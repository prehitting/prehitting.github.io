<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis命令_列表（List）</title>
    <link href="/2022/05/17/Redis/Redis%E5%91%BD%E4%BB%A4-%E5%88%97%E8%A1%A8%EF%BC%88List%EF%BC%89/"/>
    <url>/2022/05/17/Redis/Redis%E5%91%BD%E4%BB%A4-%E5%88%97%E8%A1%A8%EF%BC%88List%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="List命令"><a href="#List命令" class="headerlink" title="List命令"></a>List命令</h2><table><thead><tr><th>1</th><th>[BLPOP key1 <a href="https://www.runoob.com/redis/lists-blpop.html">key2 ] timeout</a> 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</th></tr></thead><tbody><tr><td>2</td><td>[BRPOP key1 <a href="https://www.runoob.com/redis/lists-brpop.html">key2 ] timeout</a> 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>3</td><td><a href="https://www.runoob.com/redis/lists-brpoplpush.html">BRPOPLPUSH source destination timeout</a> 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>4</td><td><a href="https://www.runoob.com/redis/lists-lindex.html">LINDEX key index</a> 通过索引获取列表中的元素</td></tr><tr><td>5</td><td><a href="https://www.runoob.com/redis/lists-linsert.html">LINSERT key BEFORE|AFTER pivot value</a> 在列表的元素前或者后插入元素</td></tr><tr><td>6</td><td><a href="https://www.runoob.com/redis/lists-llen.html">LLEN key</a> 获取列表长度</td></tr><tr><td>7</td><td><a href="https://www.runoob.com/redis/lists-lpop.html">LPOP key</a> 移出并获取列表的第一个元素</td></tr><tr><td>8</td><td>[LPUSH key value1 <a href="https://www.runoob.com/redis/lists-lpush.html">value2]</a> 将一个或多个值插入到列表头部</td></tr><tr><td>9</td><td><a href="https://www.runoob.com/redis/lists-lpushx.html">LPUSHX key value</a> 将一个值插入到已存在的列表头部</td></tr><tr><td>10</td><td><a href="https://www.runoob.com/redis/lists-lrange.html">LRANGE key start stop</a> 获取列表指定范围内的元素</td></tr><tr><td>11</td><td><a href="https://www.runoob.com/redis/lists-lrem.html">LREM key count value</a> 移除列表元素</td></tr><tr><td>12</td><td><a href="https://www.runoob.com/redis/lists-lset.html">LSET key index value</a> 通过索引设置列表元素的值</td></tr><tr><td>13</td><td><a href="https://www.runoob.com/redis/lists-ltrim.html">LTRIM key start stop</a> 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td></tr><tr><td>14</td><td><a href="https://www.runoob.com/redis/lists-rpop.html">RPOP key</a> 移除列表的最后一个元素，返回值为移除的元素。</td></tr><tr><td>15</td><td><a href="https://www.runoob.com/redis/lists-rpoplpush.html">RPOPLPUSH source destination</a> 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td>16</td><td>[RPUSH key value1 <a href="https://www.runoob.com/redis/lists-rpush.html">value2]</a> 在列表中添加一个或多个值</td></tr><tr><td>17</td><td><a href="https://www.runoob.com/redis/lists-rpushx.html">RPUSHX key value</a> 为已存在的列表添加值</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Redis命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis命令_有序集合（SortedList）</title>
    <link href="/2022/05/17/Redis/Redis%E5%91%BD%E4%BB%A4-%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%EF%BC%88SortedList%EF%BC%89/"/>
    <url>/2022/05/17/Redis/Redis%E5%91%BD%E4%BB%A4-%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%EF%BC%88SortedList%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="SortedList"><a href="#SortedList" class="headerlink" title="SortedList"></a>SortedList</h2><table><thead><tr><th>1</th><th>[ZADD key score1 member1 <a href="https://www.runoob.com/redis/sorted-sets-zadd.html">score2 member2]</a> 向有序集合添加一个或多个成员，或者更新已存在成员的分数</th></tr></thead><tbody><tr><td>2</td><td><a href="https://www.runoob.com/redis/sorted-sets-zcard.html">ZCARD key</a> 获取有序集合的成员数</td></tr><tr><td>3</td><td><a href="https://www.runoob.com/redis/sorted-sets-zcount.html">ZCOUNT key min max</a> 计算在有序集合中指定区间分数的成员数</td></tr><tr><td>4</td><td><a href="https://www.runoob.com/redis/sorted-sets-zincrby.html">ZINCRBY key increment member</a> 有序集合中对指定成员的分数加上增量 increment</td></tr><tr><td>5</td><td>[ZINTERSTORE destination numkeys key <a href="https://www.runoob.com/redis/sorted-sets-zinterstore.html">key …]</a> 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中</td></tr><tr><td>6</td><td><a href="https://www.runoob.com/redis/sorted-sets-zlexcount.html">ZLEXCOUNT key min max</a> 在有序集合中计算指定字典区间内成员数量</td></tr><tr><td>7</td><td>[ZRANGE key start stop <a href="https://www.runoob.com/redis/sorted-sets-zrange.html">WITHSCORES]</a> 通过索引区间返回有序集合指定区间内的成员</td></tr><tr><td>8</td><td>[ZRANGEBYLEX key min max <a href="https://www.runoob.com/redis/sorted-sets-zrangebylex.html">LIMIT offset count]</a> 通过字典区间返回有序集合的成员</td></tr><tr><td>9</td><td>[ZRANGEBYSCORE key min max <a href="https://www.runoob.com/redis/sorted-sets-zrangebyscore.html">WITHSCORES] [LIMIT]</a> 通过分数返回有序集合指定区间内的成员</td></tr><tr><td>10</td><td><a href="https://www.runoob.com/redis/sorted-sets-zrank.html">ZRANK key member</a> 返回有序集合中指定成员的索引</td></tr><tr><td>11</td><td>[ZREM key member <a href="https://www.runoob.com/redis/sorted-sets-zrem.html">member …]</a> 移除有序集合中的一个或多个成员</td></tr><tr><td>12</td><td><a href="https://www.runoob.com/redis/sorted-sets-zremrangebylex.html">ZREMRANGEBYLEX key min max</a> 移除有序集合中给定的字典区间的所有成员</td></tr><tr><td>13</td><td><a href="https://www.runoob.com/redis/sorted-sets-zremrangebyrank.html">ZREMRANGEBYRANK key start stop</a> 移除有序集合中给定的排名区间的所有成员</td></tr><tr><td>14</td><td><a href="https://www.runoob.com/redis/sorted-sets-zremrangebyscore.html">ZREMRANGEBYSCORE key min max</a> 移除有序集合中给定的分数区间的所有成员</td></tr><tr><td>15</td><td>[ZREVRANGE key start stop <a href="https://www.runoob.com/redis/sorted-sets-zrevrange.html">WITHSCORES]</a> 返回有序集中指定区间内的成员，通过索引，分数从高到低</td></tr><tr><td>16</td><td>[ZREVRANGEBYSCORE key max min <a href="https://www.runoob.com/redis/sorted-sets-zrevrangebyscore.html">WITHSCORES]</a> 返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td>17</td><td><a href="https://www.runoob.com/redis/sorted-sets-zrevrank.html">ZREVRANK key member</a> 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td>18</td><td><a href="https://www.runoob.com/redis/sorted-sets-zscore.html">ZSCORE key member</a> 返回有序集中，成员的分数值</td></tr><tr><td>19</td><td>[ZUNIONSTORE destination numkeys key <a href="https://www.runoob.com/redis/sorted-sets-zunionstore.html">key …]</a> 计算给定的一个或多个有序集的并集，并存储在新的 key 中</td></tr><tr><td>20</td><td>[ZSCAN key cursor <a href="https://www.runoob.com/redis/sorted-sets-zscan.html">MATCH pattern] [COUNT count]</a> 迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Redis命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis命令_集合（Set）</title>
    <link href="/2022/05/17/Redis/Redis%E5%91%BD%E4%BB%A4-%E9%9B%86%E5%90%88%EF%BC%88Set%EF%BC%89/"/>
    <url>/2022/05/17/Redis/Redis%E5%91%BD%E4%BB%A4-%E9%9B%86%E5%90%88%EF%BC%88Set%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="Set命令"><a href="#Set命令" class="headerlink" title="Set命令"></a>Set命令</h2><table><thead><tr><th>1</th><th>[SADD key member1 <a href="https://www.runoob.com/redis/sets-sadd.html">member2]</a> 向集合添加一个或多个成员</th></tr></thead><tbody><tr><td>2</td><td><a href="https://www.runoob.com/redis/sets-scard.html">SCARD key</a> 获取集合的成员数</td></tr><tr><td>3</td><td>[SDIFF key1 <a href="https://www.runoob.com/redis/sets-sdiff.html">key2]</a> 返回第一个集合与其他集合之间的差异。</td></tr><tr><td>4</td><td>[SDIFFSTORE destination key1 <a href="https://www.runoob.com/redis/sets-sdiffstore.html">key2]</a> 返回给定所有集合的差集并存储在 destination 中</td></tr><tr><td>5</td><td>[SINTER key1 <a href="https://www.runoob.com/redis/sets-sinter.html">key2]</a> 返回给定所有集合的交集</td></tr><tr><td>6</td><td>[SINTERSTORE destination key1 <a href="https://www.runoob.com/redis/sets-sinterstore.html">key2]</a> 返回给定所有集合的交集并存储在 destination 中</td></tr><tr><td>7</td><td><a href="https://www.runoob.com/redis/sets-sismember.html">SISMEMBER key member</a> 判断 member 元素是否是集合 key 的成员</td></tr><tr><td>8</td><td><a href="https://www.runoob.com/redis/sets-smembers.html">SMEMBERS key</a> 返回集合中的所有成员</td></tr><tr><td>9</td><td><a href="https://www.runoob.com/redis/sets-smove.html">SMOVE source destination member</a> 将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td>10</td><td><a href="https://www.runoob.com/redis/sets-spop.html">SPOP key</a> 移除并返回集合中的一个随机元素</td></tr><tr><td>11</td><td>[SRANDMEMBER key <a href="https://www.runoob.com/redis/sets-srandmember.html">count]</a> 返回集合中一个或多个随机数</td></tr><tr><td>12</td><td>[SREM key member1 <a href="https://www.runoob.com/redis/sets-srem.html">member2]</a> 移除集合中一个或多个成员</td></tr><tr><td>13</td><td>[SUNION key1 <a href="https://www.runoob.com/redis/sets-sunion.html">key2]</a> 返回所有给定集合的并集</td></tr><tr><td>14</td><td>[SUNIONSTORE destination key1 <a href="https://www.runoob.com/redis/sets-sunionstore.html">key2]</a> 所有给定集合的并集存储在 destination 集合中</td></tr><tr><td>15</td><td>[SSCAN key cursor <a href="https://www.runoob.com/redis/sets-sscan.html">MATCH pattern] [COUNT count]</a> 迭代集合中的元素</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Redis命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis命令_服务器</title>
    <link href="/2022/05/16/Redis/Redis%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/05/16/Redis/Redis%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ol><li>在远程Redis服务上执行命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">redis-cli -h host -p port -a password</span><br></code></pre></div></td></tr></table></figure><p><strong>实例</strong></p><p>连接到主机127.0.0.1，端口为6379，密码为mypass的redis服务上</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">$ redis-cli -h <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">6379</span> -<span class="hljs-selector-tag">a</span>  <span class="hljs-string">&quot;mypass&quot;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Redis命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis命令_字符串(String)</title>
    <link href="/2022/05/16/Redis/Redis%E5%91%BD%E4%BB%A4_%E5%AD%97%E7%AC%A6%E4%B8%B2(String)/"/>
    <url>/2022/05/16/Redis/Redis%E5%91%BD%E4%BB%A4_%E5%AD%97%E7%AC%A6%E4%B8%B2(String)/</url>
    
    <content type="html"><![CDATA[<h2 id="String命令"><a href="#String命令" class="headerlink" title="String命令"></a>String命令</h2><ol><li>获取(设定)值</li></ol><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss"><span class="hljs-built_in">set</span> (<span class="hljs-built_in">key</span>) (value)<br><span class="hljs-built_in">get</span> (<span class="hljs-built_in">key</span>)<br><span class="hljs-built_in">getrange</span> (<span class="hljs-built_in">key</span>) start <span class="hljs-keyword">end</span> <span class="hljs-meta">#范围获取</span><br><span class="hljs-built_in">getset</span> (keyvalue) <span class="hljs-meta">#获取并设定，返回原值</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>对 key 所储存的字符串值，获取（设定）指定偏移量上的位(bit)。</li></ol><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">getbit key <span class="hljs-built_in">offset</span><br>setbit key <span class="hljs-built_in">offset</span> value<br></code></pre></div></td></tr></table></figure><ol start="3"><li>获取一个或多个给定key的值</li></ol><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">mget key1<span class="hljs-selector-attr">[key2..]</span><br></code></pre></div></td></tr></table></figure><ol start="4"><li>更改</li></ol><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lsl">incr <span class="hljs-type">key</span> #将 <span class="hljs-type">key</span> 中储存的数字值增<br>incrby <span class="hljs-type">key</span> increament#将 <span class="hljs-type">key</span> 所储存的值加上给定的增量值（increment）<br>incrbyfloat <span class="hljs-type">key</span> increament#将 <span class="hljs-type">key</span> 所储存的值加上给定的浮点增量值<br>decr <span class="hljs-type">key</span> #将 <span class="hljs-type">key</span> 中储存的数字值减一<br>decrby <span class="hljs-type">key</span> decrement#<span class="hljs-type">key</span> 所储存的值减去给定的减量值<br>append <span class="hljs-type">key</span> value#如果 <span class="hljs-type">key</span> 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 <span class="hljs-type">key</span> 原来值（value）的末尾<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Redis命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis命令_哈希(Hash)</title>
    <link href="/2022/05/16/Redis/Redis%E5%91%BD%E4%BB%A4_%E5%93%88%E5%B8%8C(Hash)/"/>
    <url>/2022/05/16/Redis/Redis%E5%91%BD%E4%BB%A4_%E5%93%88%E5%B8%8C(Hash)/</url>
    
    <content type="html"><![CDATA[<h2 id="Hash命令"><a href="#Hash命令" class="headerlink" title="Hash命令"></a>Hash命令</h2><ol><li>查</li></ol><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">hexists <span class="hljs-built_in">key</span> field<span class="hljs-meta">#查看哈希表key中，指定字段是否存在</span><br>hget <span class="hljs-built_in">key</span> field<span class="hljs-meta">#获取</span><br>hgetall <span class="hljs-built_in">key</span><span class="hljs-meta">#获取所有字段和值</span><br>hkeys <span class="hljs-built_in">key</span><span class="hljs-meta">#获取所有哈希表中的字段</span><br>hlen <span class="hljs-built_in">key</span><span class="hljs-meta">#获取哈希表中字段数量</span><br>hmget <span class="hljs-built_in">key</span> field1 [field2]<span class="hljs-meta">#获取所有给定字段的值</span><br>hscan <span class="hljs-built_in">key</span> cursor [MATCH pattern] [COUNT count]<span class="hljs-meta">#迭代键值对</span><br>hvals <span class="hljs-built_in">key</span><span class="hljs-meta">#获取哈希表中所有值</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>增</li></ol><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">hincrby <span class="hljs-built_in">key</span> field increament<span class="hljs-meta">#为哈希表 key 中的指定字段的整数值加上增量</span><br>hincrbyfloat field increament<span class="hljs-meta">#为哈希表 key 中的指定字段的浮点数值加上增量</span><br>hmset <span class="hljs-built_in">key</span> field1 value1 [field2] value2<span class="hljs-meta">#设置多个键值对</span><br>hsetnx <span class="hljs-built_in">key</span> field value<span class="hljs-meta">#字段不存在时设置字段的值</span><br></code></pre></div></td></tr></table></figure><ol start="3"><li>删</li></ol><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">hdel <span class="hljs-built_in">key</span> field1 [field2]<span class="hljs-meta">#删除一个或多个字段</span><br></code></pre></div></td></tr></table></figure><ol start="4"><li>改</li></ol><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">hset</span> key <span class="hljs-meta">field</span> value<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Redis命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis命令_服务器</title>
    <link href="/2022/05/16/Redis/Redis%E5%91%BD%E4%BB%A4_%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2022/05/16/Redis/Redis%E5%91%BD%E4%BB%A4_%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ol><li>在远程Redis服务上执行命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">redis-cli -h host -p port -a password</span><br></code></pre></div></td></tr></table></figure><p><strong>实例</strong></p><p>连接到主机127.0.0.1，端口为6379，密码为mypass的redis服务上</p><blockquote><p>$ redis-cli -h 127.0.0.1 -p 6379 -a  “mypass”</p></blockquote><h2 id="键（key）命令"><a href="#键（key）命令" class="headerlink" title="键（key）命令"></a>键（key）命令</h2><ol><li>设置键值对</li></ol><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">set</span> <span class="hljs-params">(keyname)</span> <span class="hljs-params">(keyvalue)</span></span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>删除键</li></ol><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-built_in">del</span> (<span class="hljs-built_in">key</span>)<br></code></pre></div></td></tr></table></figure><ol start="3"><li>序列化给定key，并返回被序列化的值</li></ol><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">dump</span> <span class="hljs-params">(key)</span></span><br></code></pre></div></td></tr></table></figure><ol start="4"><li>检查给定key是否存在</li></ol><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">exists key<br></code></pre></div></td></tr></table></figure><ol start="5"><li>给key设置过期时间(以秒为单位)</li></ol><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">expire</span> <span class="hljs-params">(key)</span> <span class="hljs-params">(seconds)</span></span><br></code></pre></div></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">expire</span> <span class="hljs-params">(key)</span> <span class="hljs-params">(timestamp)</span></span><br><span class="hljs-function">EXPIREAT 的作用和 EXPIRE 类似，都用于为 <span class="hljs-title">key</span> 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳<span class="hljs-params">(unix timestamp)</span>。</span><br></code></pre></div></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">pexpire</span> <span class="hljs-params">(key)</span> <span class="hljs-params">(milliseconds)</span></span><br><span class="hljs-function">设置<span class="hljs-title">key</span>过期时间<span class="hljs-params">(以毫秒为单位)</span></span><br></code></pre></div></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gcode">PEXPIREAT <span class="hljs-comment">(key)</span> <span class="hljs-comment">(milliseconds-timestamp)</span><br>设置 key 过期时间的时间戳<span class="hljs-comment">(unix timestamp)</span> 以毫秒计<br></code></pre></div></td></tr></table></figure><ol start="6"><li>查找所有符合给定模式(pattern)的key</li></ol><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coq">keys <span class="hljs-built_in">pattern</span><br></code></pre></div></td></tr></table></figure><p><strong>实例</strong></p><p>keys *</p><p>列出所有键</p><ol start="7"><li>移动key到指定数据库</li></ol><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">move</span> key <span class="hljs-keyword">db</span><br></code></pre></div></td></tr></table></figure><ol start="8"><li>移除key期间，key将长久保持</li></ol><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">persist</span> <span class="hljs-params">(key)</span></span><br></code></pre></div></td></tr></table></figure><ol start="9"><li>返回key剩余的过期时间</li></ol><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss"><span class="hljs-built_in">pttl</span> (<span class="hljs-built_in">key</span>)<br><span class="hljs-meta">#以毫秒为单位</span><br><span class="hljs-built_in">ttl</span> (<span class="hljs-built_in">key</span>)<br><span class="hljs-meta">#以秒为单位</span><br></code></pre></div></td></tr></table></figure><ol start="10"><li>从数据库中随机返回一个key</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">randomkey</span><br></code></pre></div></td></tr></table></figure><ol start="11"><li>修改key名称</li></ol><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">rename</span> <span class="hljs-params">(key)</span> <span class="hljs-params">(newkey)</span></span><br></code></pre></div></td></tr></table></figure><ol start="12"><li>仅当newkey不存在时，将key改名为newkey</li></ol><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">renamenx</span> <span class="hljs-params">(key)</span> <span class="hljs-params">(newkey)</span></span><br></code></pre></div></td></tr></table></figure><ol start="13"><li>返回key所存储的值的类型</li></ol><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> key<br></code></pre></div></td></tr></table></figure><ol start="14"><li>迭代数据库中的数据库键</li></ol><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">scan <span class="hljs-attribute">cursor</span> <span class="hljs-selector-attr">[MATCH pattern]</span> <span class="hljs-selector-attr">[COUNT count]</span><br></code></pre></div></td></tr></table></figure><h2 id="String命令"><a href="#String命令" class="headerlink" title="String命令"></a>String命令</h2><ol><li>获取(设定)值</li></ol><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss"><span class="hljs-built_in">set</span> (<span class="hljs-built_in">key</span>) (value)<br><span class="hljs-built_in">get</span> (<span class="hljs-built_in">key</span>)<br><span class="hljs-built_in">getrange</span> (<span class="hljs-built_in">key</span>) start <span class="hljs-keyword">end</span> <span class="hljs-meta">#范围获取</span><br><span class="hljs-built_in">getset</span> (keyvalue) <span class="hljs-meta">#获取并设定，返回原值</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>对 key 所储存的字符串值，获取（设定）指定偏移量上的位(bit)。</li></ol><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">getbit key <span class="hljs-built_in">offset</span><br>setbit key <span class="hljs-built_in">offset</span> value<br></code></pre></div></td></tr></table></figure><ol start="3"><li>获取一个或多个给定key的值</li></ol><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">mget key1<span class="hljs-selector-attr">[key2..]</span><br></code></pre></div></td></tr></table></figure><ol start="4"><li>更改</li></ol><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lsl">incr <span class="hljs-type">key</span> #将 <span class="hljs-type">key</span> 中储存的数字值增<br>incrby <span class="hljs-type">key</span> increament#将 <span class="hljs-type">key</span> 所储存的值加上给定的增量值（increment）<br>incrbyfloat <span class="hljs-type">key</span> increament#将 <span class="hljs-type">key</span> 所储存的值加上给定的浮点增量值<br>decr <span class="hljs-type">key</span> #将 <span class="hljs-type">key</span> 中储存的数字值减一<br>decrby <span class="hljs-type">key</span> decrement#<span class="hljs-type">key</span> 所储存的值减去给定的减量值<br>append <span class="hljs-type">key</span> value#如果 <span class="hljs-type">key</span> 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 <span class="hljs-type">key</span> 原来值（value）的末尾<br></code></pre></div></td></tr></table></figure><h2 id="Hash命令"><a href="#Hash命令" class="headerlink" title="Hash命令"></a>Hash命令</h2><ol><li>查</li></ol><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">hexists <span class="hljs-built_in">key</span> field<span class="hljs-meta">#查看哈希表key中，指定字段是否存在</span><br>hget <span class="hljs-built_in">key</span> field<span class="hljs-meta">#获取</span><br>hgetall <span class="hljs-built_in">key</span><span class="hljs-meta">#获取所有字段和值</span><br>hkeys <span class="hljs-built_in">key</span><span class="hljs-meta">#获取所有哈希表中的字段</span><br>hlen <span class="hljs-built_in">key</span><span class="hljs-meta">#获取哈希表中字段数量</span><br>hmget <span class="hljs-built_in">key</span> field1 [field2]<span class="hljs-meta">#获取所有给定字段的值</span><br>hscan <span class="hljs-built_in">key</span> cursor [MATCH pattern] [COUNT count]<span class="hljs-meta">#迭代键值对</span><br>hvals <span class="hljs-built_in">key</span><span class="hljs-meta">#获取哈希表中所有值</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>增</li></ol><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">hincrby <span class="hljs-built_in">key</span> field increament<span class="hljs-meta">#为哈希表 key 中的指定字段的整数值加上增量</span><br>hincrbyfloat field increament<span class="hljs-meta">#为哈希表 key 中的指定字段的浮点数值加上增量</span><br>hmset <span class="hljs-built_in">key</span> field1 value1 [field2] value2<span class="hljs-meta">#设置多个键值对</span><br>hsetnx <span class="hljs-built_in">key</span> field value<span class="hljs-meta">#字段不存在时设置字段的值</span><br></code></pre></div></td></tr></table></figure><ol start="3"><li>删</li></ol><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">hdel <span class="hljs-built_in">key</span> field1 [field2]<span class="hljs-meta">#删除一个或多个字段</span><br></code></pre></div></td></tr></table></figure><ol start="4"><li>改</li></ol><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">hset</span> key <span class="hljs-meta">field</span> value<br></code></pre></div></td></tr></table></figure><h2 id="Set命令"><a href="#Set命令" class="headerlink" title="Set命令"></a>Set命令</h2><table><thead><tr><th>1</th><th>[SADD key member1 <a href="https://www.runoob.com/redis/sets-sadd.html">member2]</a> 向集合添加一个或多个成员</th></tr></thead><tbody><tr><td>2</td><td><a href="https://www.runoob.com/redis/sets-scard.html">SCARD key</a> 获取集合的成员数</td></tr><tr><td>3</td><td>[SDIFF key1 <a href="https://www.runoob.com/redis/sets-sdiff.html">key2]</a> 返回第一个集合与其他集合之间的差异。</td></tr><tr><td>4</td><td>[SDIFFSTORE destination key1 <a href="https://www.runoob.com/redis/sets-sdiffstore.html">key2]</a> 返回给定所有集合的差集并存储在 destination 中</td></tr><tr><td>5</td><td>[SINTER key1 <a href="https://www.runoob.com/redis/sets-sinter.html">key2]</a> 返回给定所有集合的交集</td></tr><tr><td>6</td><td>[SINTERSTORE destination key1 <a href="https://www.runoob.com/redis/sets-sinterstore.html">key2]</a> 返回给定所有集合的交集并存储在 destination 中</td></tr><tr><td>7</td><td><a href="https://www.runoob.com/redis/sets-sismember.html">SISMEMBER key member</a> 判断 member 元素是否是集合 key 的成员</td></tr><tr><td>8</td><td><a href="https://www.runoob.com/redis/sets-smembers.html">SMEMBERS key</a> 返回集合中的所有成员</td></tr><tr><td>9</td><td><a href="https://www.runoob.com/redis/sets-smove.html">SMOVE source destination member</a> 将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td>10</td><td><a href="https://www.runoob.com/redis/sets-spop.html">SPOP key</a> 移除并返回集合中的一个随机元素</td></tr><tr><td>11</td><td>[SRANDMEMBER key <a href="https://www.runoob.com/redis/sets-srandmember.html">count]</a> 返回集合中一个或多个随机数</td></tr><tr><td>12</td><td>[SREM key member1 <a href="https://www.runoob.com/redis/sets-srem.html">member2]</a> 移除集合中一个或多个成员</td></tr><tr><td>13</td><td>[SUNION key1 <a href="https://www.runoob.com/redis/sets-sunion.html">key2]</a> 返回所有给定集合的并集</td></tr><tr><td>14</td><td>[SUNIONSTORE destination key1 <a href="https://www.runoob.com/redis/sets-sunionstore.html">key2]</a> 所有给定集合的并集存储在 destination 集合中</td></tr><tr><td>15</td><td>[SSCAN key cursor <a href="https://www.runoob.com/redis/sets-sscan.html">MATCH pattern] [COUNT count]</a> 迭代集合中的元素</td></tr></tbody></table><h2 id="SortedList"><a href="#SortedList" class="headerlink" title="SortedList"></a>SortedList</h2><table><thead><tr><th>1</th><th>[ZADD key score1 member1 <a href="https://www.runoob.com/redis/sorted-sets-zadd.html">score2 member2]</a> 向有序集合添加一个或多个成员，或者更新已存在成员的分数</th></tr></thead><tbody><tr><td>2</td><td><a href="https://www.runoob.com/redis/sorted-sets-zcard.html">ZCARD key</a> 获取有序集合的成员数</td></tr><tr><td>3</td><td><a href="https://www.runoob.com/redis/sorted-sets-zcount.html">ZCOUNT key min max</a> 计算在有序集合中指定区间分数的成员数</td></tr><tr><td>4</td><td><a href="https://www.runoob.com/redis/sorted-sets-zincrby.html">ZINCRBY key increment member</a> 有序集合中对指定成员的分数加上增量 increment</td></tr><tr><td>5</td><td>[ZINTERSTORE destination numkeys key <a href="https://www.runoob.com/redis/sorted-sets-zinterstore.html">key …]</a> 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中</td></tr><tr><td>6</td><td><a href="https://www.runoob.com/redis/sorted-sets-zlexcount.html">ZLEXCOUNT key min max</a> 在有序集合中计算指定字典区间内成员数量</td></tr><tr><td>7</td><td>[ZRANGE key start stop <a href="https://www.runoob.com/redis/sorted-sets-zrange.html">WITHSCORES]</a> 通过索引区间返回有序集合指定区间内的成员</td></tr><tr><td>8</td><td>[ZRANGEBYLEX key min max <a href="https://www.runoob.com/redis/sorted-sets-zrangebylex.html">LIMIT offset count]</a> 通过字典区间返回有序集合的成员</td></tr><tr><td>9</td><td>[ZRANGEBYSCORE key min max <a href="https://www.runoob.com/redis/sorted-sets-zrangebyscore.html">WITHSCORES] [LIMIT]</a> 通过分数返回有序集合指定区间内的成员</td></tr><tr><td>10</td><td><a href="https://www.runoob.com/redis/sorted-sets-zrank.html">ZRANK key member</a> 返回有序集合中指定成员的索引</td></tr><tr><td>11</td><td>[ZREM key member <a href="https://www.runoob.com/redis/sorted-sets-zrem.html">member …]</a> 移除有序集合中的一个或多个成员</td></tr><tr><td>12</td><td><a href="https://www.runoob.com/redis/sorted-sets-zremrangebylex.html">ZREMRANGEBYLEX key min max</a> 移除有序集合中给定的字典区间的所有成员</td></tr><tr><td>13</td><td><a href="https://www.runoob.com/redis/sorted-sets-zremrangebyrank.html">ZREMRANGEBYRANK key start stop</a> 移除有序集合中给定的排名区间的所有成员</td></tr><tr><td>14</td><td><a href="https://www.runoob.com/redis/sorted-sets-zremrangebyscore.html">ZREMRANGEBYSCORE key min max</a> 移除有序集合中给定的分数区间的所有成员</td></tr><tr><td>15</td><td>[ZREVRANGE key start stop <a href="https://www.runoob.com/redis/sorted-sets-zrevrange.html">WITHSCORES]</a> 返回有序集中指定区间内的成员，通过索引，分数从高到低</td></tr><tr><td>16</td><td>[ZREVRANGEBYSCORE key max min <a href="https://www.runoob.com/redis/sorted-sets-zrevrangebyscore.html">WITHSCORES]</a> 返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td>17</td><td><a href="https://www.runoob.com/redis/sorted-sets-zrevrank.html">ZREVRANK key member</a> 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td>18</td><td><a href="https://www.runoob.com/redis/sorted-sets-zscore.html">ZSCORE key member</a> 返回有序集中，成员的分数值</td></tr><tr><td>19</td><td>[ZUNIONSTORE destination numkeys key <a href="https://www.runoob.com/redis/sorted-sets-zunionstore.html">key …]</a> 计算给定的一个或多个有序集的并集，并存储在新的 key 中</td></tr><tr><td>20</td><td>[ZSCAN key cursor <a href="https://www.runoob.com/redis/sorted-sets-zscan.html">MATCH pattern] [COUNT count]</a> 迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table><h2 id="List命令"><a href="#List命令" class="headerlink" title="List命令"></a>List命令</h2><table><thead><tr><th>1</th><th>[BLPOP key1 <a href="https://www.runoob.com/redis/lists-blpop.html">key2 ] timeout</a> 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</th></tr></thead><tbody><tr><td>2</td><td>[BRPOP key1 <a href="https://www.runoob.com/redis/lists-brpop.html">key2 ] timeout</a> 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>3</td><td><a href="https://www.runoob.com/redis/lists-brpoplpush.html">BRPOPLPUSH source destination timeout</a> 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>4</td><td><a href="https://www.runoob.com/redis/lists-lindex.html">LINDEX key index</a> 通过索引获取列表中的元素</td></tr><tr><td>5</td><td><a href="https://www.runoob.com/redis/lists-linsert.html">LINSERT key BEFORE|AFTER pivot value</a> 在列表的元素前或者后插入元素</td></tr><tr><td>6</td><td><a href="https://www.runoob.com/redis/lists-llen.html">LLEN key</a> 获取列表长度</td></tr><tr><td>7</td><td><a href="https://www.runoob.com/redis/lists-lpop.html">LPOP key</a> 移出并获取列表的第一个元素</td></tr><tr><td>8</td><td>[LPUSH key value1 <a href="https://www.runoob.com/redis/lists-lpush.html">value2]</a> 将一个或多个值插入到列表头部</td></tr><tr><td>9</td><td><a href="https://www.runoob.com/redis/lists-lpushx.html">LPUSHX key value</a> 将一个值插入到已存在的列表头部</td></tr><tr><td>10</td><td><a href="https://www.runoob.com/redis/lists-lrange.html">LRANGE key start stop</a> 获取列表指定范围内的元素</td></tr><tr><td>11</td><td><a href="https://www.runoob.com/redis/lists-lrem.html">LREM key count value</a> 移除列表元素</td></tr><tr><td>12</td><td><a href="https://www.runoob.com/redis/lists-lset.html">LSET key index value</a> 通过索引设置列表元素的值</td></tr><tr><td>13</td><td><a href="https://www.runoob.com/redis/lists-ltrim.html">LTRIM key start stop</a> 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td></tr><tr><td>14</td><td><a href="https://www.runoob.com/redis/lists-rpop.html">RPOP key</a> 移除列表的最后一个元素，返回值为移除的元素。</td></tr><tr><td>15</td><td><a href="https://www.runoob.com/redis/lists-rpoplpush.html">RPOPLPUSH source destination</a> 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td>16</td><td>[RPUSH key value1 <a href="https://www.runoob.com/redis/lists-rpush.html">value2]</a> 在列表中添加一个或多个值</td></tr><tr><td>17</td><td><a href="https://www.runoob.com/redis/lists-rpushx.html">RPUSHX key value</a> 为已存在的列表添加值</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Redis命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>Redis命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis命令_键(key)</title>
    <link href="/2022/05/16/Redis/Redis%E5%91%BD%E4%BB%A4_%E9%94%AE(key)/"/>
    <url>/2022/05/16/Redis/Redis%E5%91%BD%E4%BB%A4_%E9%94%AE(key)/</url>
    
    <content type="html"><![CDATA[<h2 id="键（key）命令"><a href="#键（key）命令" class="headerlink" title="键（key）命令"></a>键（key）命令</h2><ol><li>设置键值对</li></ol><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">set</span> <span class="hljs-params">(keyname)</span> <span class="hljs-params">(keyvalue)</span></span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>删除键</li></ol><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-built_in">del</span> (<span class="hljs-built_in">key</span>)<br></code></pre></div></td></tr></table></figure><ol start="3"><li>序列化给定key，并返回被序列化的值</li></ol><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">dump</span> <span class="hljs-params">(key)</span></span><br></code></pre></div></td></tr></table></figure><ol start="4"><li>检查给定key是否存在</li></ol><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">exists key<br></code></pre></div></td></tr></table></figure><ol start="5"><li>给key设置过期时间(以秒为单位)</li></ol><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">expire</span> <span class="hljs-params">(key)</span> <span class="hljs-params">(seconds)</span></span><br></code></pre></div></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">expire</span> <span class="hljs-params">(key)</span> <span class="hljs-params">(timestamp)</span></span><br><span class="hljs-function">EXPIREAT 的作用和 EXPIRE 类似，都用于为 <span class="hljs-title">key</span> 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳<span class="hljs-params">(unix timestamp)</span>。</span><br></code></pre></div></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">pexpire</span> <span class="hljs-params">(key)</span> <span class="hljs-params">(milliseconds)</span></span><br><span class="hljs-function">设置<span class="hljs-title">key</span>过期时间<span class="hljs-params">(以毫秒为单位)</span></span><br></code></pre></div></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gcode">PEXPIREAT <span class="hljs-comment">(key)</span> <span class="hljs-comment">(milliseconds-timestamp)</span><br>设置 key 过期时间的时间戳<span class="hljs-comment">(unix timestamp)</span> 以毫秒计<br></code></pre></div></td></tr></table></figure><ol start="6"><li>查找所有符合给定模式(pattern)的key</li></ol><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coq">keys <span class="hljs-built_in">pattern</span><br></code></pre></div></td></tr></table></figure><p><strong>实例</strong></p><p>keys *</p><p>列出所有键</p><ol start="7"><li>移动key到指定数据库</li></ol><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">move</span> key <span class="hljs-keyword">db</span><br></code></pre></div></td></tr></table></figure><ol start="8"><li>移除key期间，key将长久保持</li></ol><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">persist</span> <span class="hljs-params">(key)</span></span><br></code></pre></div></td></tr></table></figure><ol start="9"><li>返回key剩余的过期时间</li></ol><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss"><span class="hljs-built_in">pttl</span> (<span class="hljs-built_in">key</span>)<br><span class="hljs-meta">#以毫秒为单位</span><br><span class="hljs-built_in">ttl</span> (<span class="hljs-built_in">key</span>)<br><span class="hljs-meta">#以秒为单位</span><br></code></pre></div></td></tr></table></figure><ol start="10"><li>从数据库中随机返回一个key</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">randomkey</span><br></code></pre></div></td></tr></table></figure><ol start="11"><li>修改key名称</li></ol><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">rename</span> <span class="hljs-params">(key)</span> <span class="hljs-params">(newkey)</span></span><br></code></pre></div></td></tr></table></figure><ol start="12"><li>仅当newkey不存在时，将key改名为newkey</li></ol><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">renamenx</span> <span class="hljs-params">(key)</span> <span class="hljs-params">(newkey)</span></span><br></code></pre></div></td></tr></table></figure><ol start="13"><li>返回key所存储的值的类型</li></ol><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> key<br></code></pre></div></td></tr></table></figure><ol start="14"><li>迭代数据库中的数据库键</li></ol><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">scan <span class="hljs-attribute">cursor</span> <span class="hljs-selector-attr">[MATCH pattern]</span> <span class="hljs-selector-attr">[COUNT count]</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Redis命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Redis的单线程问题</title>
    <link href="/2022/05/16/Redis/%E5%85%B3%E4%BA%8ERedis%E5%8D%95%E7%BA%BF%E7%A8%8B/"/>
    <url>/2022/05/16/Redis/%E5%85%B3%E4%BA%8ERedis%E5%8D%95%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><blockquote><p>Redis是单线程的</p></blockquote><h3 id="为什么Redis单线程却支持高并发"><a href="#为什么Redis单线程却支持高并发" class="headerlink" title="为什么Redis单线程却支持高并发"></a>为什么Redis单线程却支持高并发</h3><ol><li>纯内存操作</li><li>核心是基于非阻塞的IO</li><li>多路复用机制 单线程反而避免了多线程的频繁上下文切换问题</li></ol><h3 id="Redis高并发和快速的原因"><a href="#Redis高并发和快速的原因" class="headerlink" title="Redis高并发和快速的原因"></a>Redis高并发和快速的原因</h3><p>1.redis是基于内存的，内存的读写速度非常快（纯内存）; 数据存在内存中，数据结构用HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)。</p><p>2.redis是单线程的，省去了很多上下文切换线程的时间（避免线程切换和竞态消耗）。</p><p>3.redis使用IO多路复用技术（IO multiplexing, 解决对多个I&#x2F;O监听时,一个I&#x2F;O阻塞影响其他I&#x2F;O的问题），可以处理并发的连接（非阻塞IO）。</p><h3 id="为甚么Redis是单线程的"><a href="#为甚么Redis是单线程的" class="headerlink" title="为甚么Redis是单线程的"></a>为甚么Redis是单线程的</h3><p><strong>官方答案</strong></p><p>因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了。</p><p><strong>性能指标</strong></p><p>关于redis的性能，官方网站也有，普通笔记本轻松处理每秒几十万的请求。</p><p><strong>详细原因</strong></p><p>1）不需要各种锁的性能消耗</p><p>Redis的数据结构并不全是简单的Key-Value，还有list，hash等复杂的结构，这些结构有可能会进行很细粒度的操作，比如在很长的列表后面添加一个元素，在hash当中添加或者删除一个对象。这些操作可能就需要加非常多的锁，导致的结果是同步开销大大增加。</p><p>总之，在单线程的情况下，就不用去考虑各种锁的问题，不存在加锁、释放锁操作，没有因为可能出现死锁而导致的性能消耗。</p><p>2）单线程多进程集群方案</p><p>单线程的威力实际上非常强大，单核cpu效率也非常高，多线程自然是可以比单线程有更高的性能上限，但是在今天的计算环境中，即使是单机多线程的上限也往往不能满足需要了，需要进一步摸索的是多服务器集群化的方案，这些方案中多线程的技术照样是用不上的。</p><p>所以“单线程、多进程的集群”不失为一个时髦的解决方案。</p><p>3）CPU消耗</p><p>采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU。</p><p>但是如果CPU成为Redis瓶颈，或者不想让服务器其他CUP核闲置，那怎么办？</p><p>可以考虑多起几个Redis进程，Redis是key-value数据库，不是关系数据库，数据之间没有约束。只要客户端分清哪些key放在哪个Redis进程上就可以了。</p><h3 id="Redis单线程的优劣势"><a href="#Redis单线程的优劣势" class="headerlink" title="Redis单线程的优劣势"></a>Redis单线程的优劣势</h3><p><strong>单进程单线程优势</strong></p><p>代码更清晰，处理逻辑更简单。<br>不用去考虑各种锁的问题，不存在加锁、释放锁操作，没有因为可能出现死锁而导致的性能消耗。<br>不存在“多进程或者多线程导致的切换”而消耗CPU。</p><p><strong>单进程单线程弊端</strong></p><p>无法发挥多核CPU性能，不过可以通过在单机开多个Redis实例来完善。</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>概论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态代理模式</title>
    <link href="/2022/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成的，不是我们直接写好的</li><li>动态代理分为两大类，基于接口的动态代理，基于类的动态代理<ul><li>基于接口–JDK动态代理</li><li>基于类：cglib</li><li>java字节码实现：JAVAsist</li></ul></li></ul><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><blockquote><p>使用java反射包(java.lang.reflect)中的类和接口事项动态代理的功能</p><p>里面有三个类：InvocationHandler，Method，Proxy</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 业务层模拟</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span>&#123;<br>    UserMapper userMapper;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;select方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;insert方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;update方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;delete方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTarget</span><span class="hljs-params">(Object target)</span>&#123;<br>        <span class="hljs-built_in">this</span>.target=target;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-built_in">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(),<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        log(method.getName());<br>        Object result=method.invoke(target,args);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String methodName)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了&quot;</span>+methodName+<span class="hljs-string">&quot;方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//真实对象</span><br>        UserServiceImpl userService=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>        <span class="hljs-comment">//代理对象的调用处理程序</span><br>        ProxyInvocationHandler proxyInvocationHandler=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyInvocationHandler</span>();<br>        proxyInvocationHandler.setTarget(userService); <span class="hljs-comment">//设置要代理的对象</span><br>        IUserService proxy= (IUserService) proxyInvocationHandler.getProxy();<span class="hljs-comment">//动态生成代理类</span><br>        proxy.delete();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>动态代理模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态代理模式</title>
    <link href="/2022/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/image-20220511090735455-16522312578361.png" alt="image-20220511090735455"></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​所谓静态也就是在程序运行前就已经存在代理类的<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E8%8A%82%E7%A0%81&spm=1001.2101.3001.7020">字节码</a>文件，代理类和委托类的关系在运行前就确定了</p><p>  举例理解：以租房为例，房东只需要处理自己的房子交给中介即可，其余的都是由中介充当代理进行租客签协议，带租客看房子，等等。</p><p><strong>静态代理需要满足三点</strong></p><p>  1、需要有真实角色<br>  2、需要有一个代理角色<br>  3、这两个角色之间必须实现相同的接口</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rent</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 房东</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;房东出租房子&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 代理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span>&#123;<br>    <span class="hljs-keyword">private</span> Host host;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span> &#123;<br>        host.rent();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seeHouse</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;房东带你看房&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fare</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;受中介费&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contract</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;签合同&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Host host=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>();<br>        <span class="hljs-comment">//房东要出租房子</span><br>        Proxy proxy=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(host);<br>        <span class="hljs-comment">//代理，中介帮房东出租，代理角色一般会有一些附属操作</span><br>        proxy.rent();<br>        <span class="hljs-comment">//你不用面对房东，直接找中介租房即可</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><ul><li>可以使真实角色操作更加纯粹，只需要关注业务逻辑本身，保证了业务类的重用性。这是代理的共有优点</li><li>公共业务交给了代理角色，实现了业务的分工</li><li>公共业务发生扩展的时候，方便集中管理</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li><p>代理对象的一个接口只服务于一种类型的对象，如果要代理的方法很多，势必要为每一种方法都进行代理，静态代理在程序规模稍大时就无法胜任了。</p></li><li><p>如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>静态代理模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux环境安装</title>
    <link href="/2022/05/10/Linux/Linux%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <url>/2022/05/10/Linux/Linux%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h2><ol><li><p>卸载centos7自带的openjdk</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">yum list installed <span class="hljs-string">|grep java</span><br><br>rpm -e --nodeps <br></code></pre></div></td></tr></table></figure></li><li><p>安装jdk</p><p>2.1 yum安装jdk</p><p>​<strong>以下命令查找能够安装的jdk版本</strong></p><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lsl">yum -y <span class="hljs-type">list</span> java*<br></code></pre></div></td></tr></table></figure><p>​定位到&#x2F;usr&#x2F;local&#x2F;java&#x2F;安装openJDK</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> install -y java-<span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>-openjdk<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型模式</title>
    <link href="/2022/05/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><p><strong>主要解决：</strong>在运行期建立和删除原型。</p><p><strong>何时使用：</strong> 1、当一个系统应该独立于它的产品创建，构成和表示时。 2、当要实例化的类是在运行时刻指定时，例如，通过动态装载。 3、为了避免创建一个与产品类层次平行的工厂类层次时。 4、当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。</p><p><strong>如何解决：</strong>利用已有的一个原型对象，快速地生成和原型对象一样的实例。</p><p><strong>关键代码：</strong> 1、实现克隆操作，在 JAVA 继承 Cloneable，重写 clone()，在 .NET 中可以使用 Object 类的 MemberwiseClone() 方法来实现对象的浅拷贝或通过序列化的方式来实现深拷贝。 2、原型模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些”易变类”拥有稳定的接口。</p><p><strong>应用实例：</strong> 1、细胞分裂。 2、JAVA 中的 Object clone() 方法。</p><p><strong>优点：</strong> 1、性能提高。 2、逃避构造函数的约束。</p><p><strong>缺点：</strong> 1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 2、必须实现 Cloneable 接口。</p><p><strong>使用场景：</strong> 1、资源优化场景。 2、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。 3、性能和安全要求的场景。 4、通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。 5、一个对象多个修改者的场景。 6、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。 7、在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用。</p><p><strong>注意事项：</strong>与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Video</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-comment">//深克隆</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.clone();<br>        Video video=(Video) obj;<br>        video.createTime= (Date) <span class="hljs-built_in">this</span>.createTime.clone();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@EqualsAndHashCode</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Video</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 浅拷贝</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端实现克隆</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BilibiliServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        Date date=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        Video video=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Video</span>(<span class="hljs-string">&quot;my_video&quot;</span>,date);<br>        System.out.println(video.hashCode());<br>        Video v2= (Video) video.clone();<br>        System.out.println(v2.hashCode());<br>        <span class="hljs-comment">//两个对象指向同一个date，为浅克隆</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>原型模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim编辑器</title>
    <link href="/2022/05/09/Linux/Vim%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2022/05/09/Linux/Vim%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/09/Linux/Vim%E7%BC%96%E8%BE%91%E5%99%A8/image-20220509163720196-16520854463721.png" alt="image-20220509163720196"></p><h2 id="vi-x2F-vim-的使用"><a href="#vi-x2F-vim-的使用" class="headerlink" title="vi&#x2F;vim 的使用"></a>vi&#x2F;vim 的使用</h2><p>基本上 vi&#x2F;vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。 这三种模式的作用分别是：</p><h3 id="命令模式："><a href="#命令模式：" class="headerlink" title="命令模式："></a>命令模式：</h3><p>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>&#x2F;<strong>END</strong>，移动光标到行首&#x2F;行尾</li><li><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</li><li><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>按ESC键可随时退出底线命令模式。</p><blockquote><p>使用  vim filename 命令</p></blockquote><h2 id="vi-x2F-vim-按键说明"><a href="#vi-x2F-vim-按键说明" class="headerlink" title="vi&#x2F;vim 按键说明"></a>vi&#x2F;vim 按键说明</h2><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><h3 id="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"><a href="#第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等" class="headerlink" title="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"></a>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</h3><table><thead><tr><th align="left">移动光标的方法</th><th></th></tr></thead><tbody><tr><td align="left">h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td align="left">j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td align="left">k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td align="left">l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td align="left">如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td><td></td></tr><tr><td align="left">[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td align="left">[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td align="left">+</td><td>光标移动到非空格符的下一行</td></tr><tr><td align="left">-</td><td>光标移动到非空格符的上一行</td></tr><tr><td align="left">n<space></space></td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</space></td></tr><tr><td align="left">0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td align="left">$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td align="left">H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td align="left">M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td align="left">L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td align="left">G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td align="left">nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td align="left">gg</td><td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td></tr><tr><td align="left">n<Enter></Enter></td><td>n 为数字。光标向下移动 n 行(常用)</td></tr><tr><td align="left">搜索替换</td><td></td></tr><tr><td align="left">&#x2F;word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 &#x2F;vbird 即可！ (常用)</td></tr><tr><td align="left">?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td align="left">n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td align="left">N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr><tr><td align="left">使用 &#x2F;word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td><td></td></tr><tr><td align="left">:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)</td></tr><tr><td align="left"><strong>:1,$s&#x2F;word1&#x2F;word2&#x2F;g</strong> 或 <strong>:%s&#x2F;word1&#x2F;word2&#x2F;g</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td></tr><tr><td align="left"><strong>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc</strong> 或 <strong>:%s&#x2F;word1&#x2F;word2&#x2F;gc</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr><tr><td align="left">删除、复制与贴上</td><td></td></tr><tr><td align="left">x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td align="left">nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td align="left">dd</td><td>剪切游标所在的那一整行(常用)，用 p&#x2F;P 可以粘贴。</td></tr><tr><td align="left">ndd</td><td>n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行(常用)，用 p&#x2F;P 可以粘贴。</td></tr><tr><td align="left">d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td align="left">dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td align="left">d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td align="left">d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td align="left">yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td align="left">nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td align="left">y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td align="left">yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td align="left">y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td align="left">y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td align="left">p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td></tr><tr><td align="left">J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td align="left">c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td align="left">u</td><td>复原前一个动作。(常用)</td></tr><tr><td align="left">[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td align="left">这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td><td></td></tr><tr><td align="left">.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td></tr></tbody></table><h3 id="第二部分：一般模式切换到编辑模式的可用的按钮说明"><a href="#第二部分：一般模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部分：一般模式切换到编辑模式的可用的按钮说明"></a>第二部分：一般模式切换到编辑模式的可用的按钮说明</h3><table><thead><tr><th align="left">进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td align="left">i, I</td><td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td align="left">a, A</td><td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td align="left">o, O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td align="left">r, R</td><td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td align="left">上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr><tr><td align="left">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><h3 id="第三部分：一般模式切换到指令行模式的可用的按钮说明"><a href="#第三部分：一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="第三部分：一般模式切换到指令行模式的可用的按钮说明"></a>第三部分：一般模式切换到指令行模式的可用的按钮说明</h3><table><thead><tr><th align="left">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td align="left">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td align="left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left">:q</td><td>离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td align="left">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td></tr><tr><td align="left">ZQ</td><td>不保存，强制退出。效果等同于 **:q!**。</td></tr><tr><td align="left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls &#x2F;home』即可在 vi 当中察看 &#x2F;home 底下以 ls 输出的档案信息！</td></tr><tr><td align="left">vim 环境的变更</td><td></td></tr><tr><td align="left">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建造者模式</title>
    <link href="/2022/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</p></blockquote><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>封装性好，构建和表示分离</li><li>扩展性好，各个具体的建造者相互独立，有利于系统的解耦</li><li>客户端不必知道产品内部组成的细节，建造者可以对创建过程逐步细化，而不对其他模块产生任何影响，便于控制细节风险</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>产品的组成部分必须相同，限制了其使用范围</li><li>如果产品的内部变化复杂，若产品内部发生改变，则建造者也要同步修改，后期维护成本大</li></ol><p>建造者模式和工厂模式的关注点不同：建造者模式注重零部件的组装过程，而工厂方法模式更注重部件的创建过程，但两者可以结合使用</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><table><thead><tr><th>模式</th><th>作用</th></tr></thead><tbody><tr><td>产品角色（Product）</td><td>包含多个组成部件的复杂对象，由具体建造者来创建其各个零部件</td></tr><tr><td>抽象建造者（Builder）</td><td>它是一个包含创建产品各个子部件的抽象方法的接口，通常还包含一个返回复杂产品的方法 getResult()</td></tr><tr><td>具体建造者(Concrete Builder）</td><td>实现 Builder 接口，完成复杂产品的各个部件的具体创建方法</td></tr><tr><td>指挥者（Director）</td><td>调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息</td></tr></tbody></table><p><img src="/2022/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/image-20220509121913779-16520699567131.png" alt="image-20220509121913779"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@EqualsAndHashCode</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br>    <span class="hljs-keyword">private</span> String buildA;<br>    <span class="hljs-keyword">private</span> String buildB;<br>    <span class="hljs-keyword">private</span> String buildC;<br>    <span class="hljs-keyword">private</span> String buildD;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildA</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildB</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildC</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildD</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">abstract</span> Product <span class="hljs-title function_">getProduct</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Builder</span>&#123;<br>    <span class="hljs-keyword">private</span> Product product;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Worker</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.product = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildA</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构建部件A&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildB</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构建部件B&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildC</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构建部件C&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildD</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构建部件D&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    Product <span class="hljs-title function_">getProduct</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Director</span> &#123;<br>    <span class="hljs-comment">//指挥Worker</span><br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">build</span><span class="hljs-params">(Builder builder)</span>&#123;<br>        builder.buildA();<br>        builder.buildB();<br>        builder.buildC();<br>        builder.buildD();<br>        <span class="hljs-keyword">return</span> builder.getProduct();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>建造者模式唯一区别于工厂模式的是针对<strong>复杂对象</strong>的创建。也就是说，如果创建简单对象，通常都是使用工厂模式进行创建，而如果创建复杂对象，就可以考虑使用建造者模式。</p><p>当需要创建的产品具备复杂创建过程时，可以抽取出共性创建过程，然后交由具体实现类自定义创建流程，使得同样的创建行为可以生产出不同的产品，分离了创建与表示，使创建产品的灵活性大大增加。</p><p>建造者模式主要适用于以下应用场景：</p><ul><li>相同的方法，不同的执行顺序，产生不同的结果。</li><li>多个部件或零件，都可以装配到一个对象中，但是产生的结果又不相同。</li><li>产品类非常复杂，或者产品类中不同的调用顺序产生不同的作用。</li><li>初始化一个对象特别复杂，参数多，而且很多参数都具有默认值。</li></ul><h2 id="建造者模式和工厂模式"><a href="#建造者模式和工厂模式" class="headerlink" title="建造者模式和工厂模式"></a>建造者模式和工厂模式</h2><ul><li>建造者模式更加注重方法的调用顺序，工厂模式注重创建对象。</li><li>创建对象的力度不同，建造者模式创建复杂的对象，由各种复杂的部件组成，工厂模式创建出来的对象都一样</li><li>关注重点不一样，工厂模式只需要把对象创建出来就可以了，而建造者模式不仅要创建出对象，还要知道对象由哪些部件组成。</li><li>建造者模式根据建造过程中的顺序不一样，最终对象部件组成也不一样。</li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>建造者模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工厂模式</title>
    <link href="/2022/05/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>作用<ul><li>实现了创建者和调用者的分离</li><li>详细分类<ul><li>简单工厂模式</li><li>工厂方法模式</li><li>抽象工厂模式</li></ul></li></ul></li><li>OOP满足<ul><li>开闭原则</li><li>依赖倒转</li><li>迪米特</li></ul></li><li>核心本质<ul><li>实例化对象不使用new，用工厂方法代替</li><li>将选择实现类，创建对象统一管理和控制，从而将调用者跟实现类解耦</li></ul></li><li>三种模式<ul><li>简单（静态）工厂模式<ul><li>用来生产同一等级结构中的任意产品（对于增加的新的产品，需要覆盖已有的代码）</li></ul></li><li>工厂方法模式<ul><li>用来生产同一等级结构中的固定产品（支持增加任意产品）</li></ul></li><li>抽象工厂模式<ul><li>围绕一个超级工厂创建其他工厂，该超级工厂又称为其他工厂的工厂</li></ul></li></ul></li></ul><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>代码背景：有一个consumer前来买车</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TeSiLa</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Car</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;TeSiLa&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WuLing</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Car</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;WuLing&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CarFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Car <span class="hljs-title function_">getCar</span><span class="hljs-params">(String car)</span>&#123;<br>        <span class="hljs-keyword">if</span> (car.equals(<span class="hljs-string">&quot;WuLing&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WuLing</span>();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (car.equals(<span class="hljs-string">&quot;TeSiLa&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TeSiLa</span>();<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> CarFactory.getCar(<span class="hljs-string">&quot;WuLing&quot;</span>);<br>        car.name();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="模式组成"><a href="#模式组成" class="headerlink" title="模式组成"></a>模式组成</h4><table><thead><tr><th>组成（角色）</th><th>关系</th><th>作用</th></tr></thead><tbody><tr><td>抽象产品</td><td>具体产品的父类</td><td>描述产品的公共接口</td></tr><tr><td>具体产品</td><td>抽象产品的子类；工厂类创建的目标类</td><td>描述生产的具体产品</td></tr><tr><td>工厂（Creator）</td><td>被外界调用</td><td>根据传入不同参数从而创建不同具体产品类的实例</td></tr></tbody></table><h4 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="/2022/05/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/image-20220508111631047.png" alt="image-20220508111631047"></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>将创建实例的工作和使用实例的工作分开，使用者不必关心对象如何创建，实现解耦</li><li>将初始化实例时的工作放到工厂进行，使代码更易于维护，更符合面向对象的原则&amp;面向接口编程，而不是面向实现编程</li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p>​如果增加不同品牌的车，需要在工厂中修改或添加方法，不满足OOP开闭原则</p><ul><li>工厂类集中了所有实例（产品）的创建逻辑，一旦这个工厂不能正常工作，整个系统都会受到影响</li><li>违背“开放 - 关闭原则”，一旦添加新产品就不得不修改工厂类的逻辑，这样就会造成工厂逻辑过于复杂</li><li>简单工厂模式由于使用了静态工厂方法，静态方法不能被继承和重写，会造成工厂角色无法形成基于继承的等级结构</li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>客户如果只知道传入工厂类的参数，对于如何创建对象的逻辑不关心时</li><li>当工厂类负责创建的对象（具体产品）比较少时</li></ul><h2 id="方法工厂模式"><a href="#方法工厂模式" class="headerlink" title="方法工厂模式"></a>方法工厂模式</h2><p>概述：在简单工厂模式上改进，给每种车增加一个工厂类</p><p>实现：</p><p>Car类，TeSiLa类，WuLing类同上</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 工厂方法模式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CarFactory</span> &#123;<br>    Car <span class="hljs-title function_">getCar</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TeSiLaFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CarFactory</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Car <span class="hljs-title function_">getCar</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TeSiLa</span>();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> &#123;<br>    <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WuLingFactory</span>().getCar();<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="模式组成-1"><a href="#模式组成-1" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th>主要角色</th><th>作用</th></tr></thead><tbody><tr><td>抽象工厂</td><td>提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法 newProduct() 来创建产品</td></tr><tr><td>具体工厂</td><td>主要是实现抽象工厂中的抽象方法，完成具体产品的创建</td></tr><tr><td>抽象产品</td><td>定义了产品的规范，描述了产品的主要特性和功能。</td></tr><tr><td>具体产品</td><td>实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</td></tr></tbody></table><h3 id="UML类图-1"><a href="#UML类图-1" class="headerlink" title="UML类图"></a>UML类图</h3><p><img src="/2022/05/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/image-20220508113730740.png" alt="image-20220508113730740"></p><blockquote><p>简单工厂模式违背了开闭原则，而工厂方法模式是对简单工厂模式的进一步抽象化，其好处是可以使系统在不修改原来代码的情况下引进新的产品，即满足开闭原则</p></blockquote><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程。</li><li>灵活性增强，对于新产品的创建，只需多写一个相应的工厂类。</li><li>典型的解耦框架。高层模块只需要知道产品的抽象类，无须关心其他实现类，满足迪米特法则、依赖倒置原则和里氏替换原则。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>类的个数容易过多，增加复杂度</li><li>增加了系统的抽象性和理解难度</li><li>抽象产品只能生产一种产品，此弊端可使用<a href="http://c.biancheng.net/view/1351.html">抽象工厂模式</a>解决。</li></ul><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>客户只知道创建产品的工厂名，而不知道具体的产品名。</li><li>创建对象的任务由多个具体子工厂中的某一个完成，而抽象工厂只提供创建产品的接口。</li><li>客户不关心创建产品的细节，只关心产品的品牌</li></ul><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>代码背景：产品Phone，Router交由小米工厂生产</p><p>首先定义产品接口以及小米产品实现类</p><p>然后定义抽象工厂</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductFactory</span> &#123;<br>    Phone <span class="hljs-title function_">getPhoneProduct</span><span class="hljs-params">()</span>;<br>    Router <span class="hljs-title function_">getRouterProduct</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>小米工厂需要实现该抽象工厂</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XiaoMiFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProductFactory</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Phone <span class="hljs-title function_">getPhoneProduct</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XiaoMiPhone</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Router <span class="hljs-title function_">getRouterProduct</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XiaoMiRouter</span>();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们具体的类</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li><h3 id="客户端（应用层）不依赖于产品实例如何被创建，实现等细节"><a href="#客户端（应用层）不依赖于产品实例如何被创建，实现等细节" class="headerlink" title="客户端（应用层）不依赖于产品实例如何被创建，实现等细节"></a>客户端（应用层）不依赖于产品实例如何被创建，实现等细节</h3></li><li><p>强调一系列产品相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码</p></li><li><p>提供一个产品类的库，所有的产品以同样的接口出现，从而使客户不依赖于具体的实现</p></li></ul><h4 id="优点-amp-缺点"><a href="#优点-amp-缺点" class="headerlink" title="优点&amp;缺点"></a>优点&amp;缺点</h4><ul><li><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul><li>具体产品在应用层的代码隔离，无需关心创建的细节</li><li>将一个系列的产品统一到一起创建</li></ul></li><li>缺点<ul><li>规定了所有可能被创建的产品集合，产品簇中扩展新的产品困难</li><li>增加了系统的抽象性和理解难度</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>工厂模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux目录结构</title>
    <link href="/2022/05/07/Linux/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    <url>/2022/05/07/Linux/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="/2022/05/07/Linux/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/image-20220507161042910-16519110450571.png" alt="image-20220507161042910"></p><ul><li><p>&#x2F;bin  ：</p><p>​bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p>&#x2F;boot:</p><p>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p>&#x2F;dev:</p><p>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p>&#x3D;&#x3D;<strong>&#x2F;etc:</strong>&#x3D;&#x3D;</p><p>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p>&#x3D;&#x3D;&#x2F;home：&#x3D;&#x3D;</p><p>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p>&#x2F;lib：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p>&#x2F;lost+found：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。（存放突然关机的一些文件）</p></li><li><p>&#x2F;media：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p>&#x2F;mnt：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p>&#x3D;&#x3D;&#x2F;opt：&#x3D;&#x3D;<br>opt 是 optional(可选) 的缩写，这是给主机额外<strong>安装软件所摆放的目录</strong>。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p>&#x2F;proc：<br>proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p></li></ul><ul><li><p>&#x3D;&#x3D;<strong>&#x2F;root</strong>：&#x3D;&#x3D;<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>&#x2F;sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>&#x2F;selinux</strong>：<br> 这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>&#x2F;srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>&#x2F;sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p>&#x3D;&#x3D;<strong>&#x2F;tmp</strong>：&#x3D;&#x3D;<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p>&#x3D;&#x3D;<strong>&#x2F;usr</strong>：&#x3D;&#x3D;<br> usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>&#x2F;usr&#x2F;bin：</strong><br>系统用户使用的应用程序。</p></li><li><p><strong>&#x2F;usr&#x2F;sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>&#x2F;usr&#x2F;src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>&#x2F;var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>&#x2F;run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令</title>
    <link href="/2022/05/07/Linux/Linux%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/05/07/Linux/Linux%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="系统关机-x2F-重启"><a href="#系统关机-x2F-重启" class="headerlink" title="系统关机&#x2F;重启"></a>系统关机&#x2F;重启</h3><table><thead><tr><th>命令</th><th>简述</th></tr></thead><tbody><tr><td>sync</td><td>将数据由内存同步到硬盘中</td></tr><tr><td>shutdown</td><td>关机指令</td></tr><tr><td>shutdown -h 10</td><td>十分钟后关机</td></tr><tr><td>shutdown -h now</td><td>立即关机</td></tr><tr><td>shutdown -h 20:25</td><td>指定时间关机</td></tr><tr><td>shutdown -r now</td><td>立即重启</td></tr><tr><td>shutdown -r +10</td><td>十分钟后重启</td></tr><tr><td>reboot</td><td>重启，等同于shutdown  -r now</td></tr><tr><td>halt</td><td>关闭系统</td></tr><tr><td>logout</td><td>注销</td></tr><tr><td>clear</td><td>清屏</td></tr></tbody></table><h3 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h3><table><thead><tr><th>命令</th><th>简述</th></tr></thead><tbody><tr><td>ls &#x2F;</td><td>查看根目录</td></tr><tr><td>cd root</td><td>进入某个目录</td></tr><tr><td>cd ..</td><td>目录回退</td></tr><tr><td>ls</td><td>查看目录中的文件</td></tr><tr><td>mkdir  mydir</td><td>创建文件夹</td></tr><tr><td>ls -F</td><td>查看目录中的文件</td></tr><tr><td>ls -l</td><td>查看文件和目录的详细资料</td></tr><tr><td>ls -a</td><td>显示隐藏文件</td></tr><tr><td>rm -f file1</td><td>删除file1文件</td></tr><tr><td>rmdir dir1</td><td>删除dir1目录</td></tr><tr><td>rm -rf dir1</td><td>删除dir1目录并删除其内容</td></tr><tr><td>mv dir1 new_dir</td><td>重命名&#x2F;移动目录</td></tr><tr><td>cp file1 file2</td><td>复制一个文件</td></tr><tr><td>cp dir&#x2F;* .</td><td>复制一个目录下的所有文件到当前工作目录</td></tr><tr><td>cp -a dir1 dir2</td><td>复制一个目录</td></tr><tr><td>cd ~</td><td>进入用户目录</td></tr><tr><td>pwd</td><td>显示当前用户所在的目录</td></tr><tr><td>mkdir -p dir1&#x2F;dir2&#x2F;dir3</td><td>递归（连续）创建目录</td></tr><tr><td>ls -ll</td><td>查看文件属性</td></tr><tr><td>touch [filename]</td><td>创建文件</td></tr><tr><td>ln filename1 filename2</td><td>创建链接(硬链接)</td></tr><tr><td>ln -s  filename1 filename2</td><td>创建链接(软链接：删除源文件后无法访问)</td></tr><tr><td>echo  “text” &gt;&gt; file</td><td>文件写入内容</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h3><table><thead><tr><th>命令</th><th>简述</th></tr></thead><tbody><tr><td>find &#x2F; -name file1</td><td>从‘&#x2F;’开始进入根文件系统搜索文件和目录</td></tr><tr><td>find &#x2F; -user user1</td><td>搜索属于用户 ‘user1’ 的文件和目录</td></tr><tr><td>find &#x2F;home&#x2F;user1 -name \*.bin</td><td>在目录 ‘&#x2F; home&#x2F;user1’ 中搜索带有’.bin’ 结尾的文件</td></tr><tr><td>find &#x2F;usr&#x2F;bin -type f -atime +100</td><td>搜索在过去100天内未被使用过的执行文件</td></tr><tr><td>find &#x2F;usr&#x2F;bin -type f -mtime -10</td><td>搜索在10天内被创建或者修改过的文件</td></tr><tr><td>locate *.ps</td><td>寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令</td></tr><tr><td>whereis halt</td><td>显示一个二进制文件、源码或man的位置</td></tr><tr><td>which halt</td><td>显示一个二进制文件或可执行文件的完整路径</td></tr><tr><td>find &#x2F; -name *.rpm -exec chmod 755 ‘{}’ ;</td><td>搜索以 ‘.rpm’ 结尾的文件并定义其权限</td></tr><tr><td>find &#x2F; -xdev -name *.rpm</td><td>搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备</td></tr></tbody></table><h3 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h3><p>r : 4 可读</p><p>w：2 可写</p><p>x： 1 可执行 </p><table><thead><tr><th>命令</th><th>简述</th></tr></thead><tbody><tr><td>chgrp [-R]  属组名  文件名</td><td>更改文件属组（-R：递归更改）</td></tr><tr><td>chown [-R] 属主名  &#x3D;&#x3D;或&#x3D;&#x3D;  chown [-R] 属主名：属组名 文件名</td><td>更改文件属主，也可以同时更改属组</td></tr><tr><td>chmod [-R] xyz 文件或目录（比如chmod 777 file1，即最高权限）</td><td>更改文件九个属性</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><table><thead><tr><th>命令</th><th>简述</th></tr></thead><tbody><tr><td>cat</td><td>由第一行开始显示文件内容（concatenate）</td></tr><tr><td>tac</td><td>从最后一行开始显示</td></tr><tr><td>nl</td><td>显示的时候输出行号</td></tr><tr><td>more</td><td>分页显示（空格翻页）</td></tr><tr><td>less</td><td>和more类似，但可以往前翻页</td></tr><tr><td>head</td><td>只看头几行(head -n 20  filename)</td></tr><tr><td>tail</td><td>只看尾几行</td></tr><tr><td>q</td><td>退出查看文件</td></tr><tr><td>&#x2F;</td><td>查询字符串(&#x2F;set)（n 寻找下一个  ，N寻找上一个）</td></tr><tr><td>w</td><td>保存文件（通常和q联合使用，即:wq,保存并退出）</td></tr><tr><td>vim filename</td><td>vim编辑文件</td></tr></tbody></table><h2 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h2><blockquote><p>useradd  -m  [用户名]</p></blockquote><ul><li>-c comment 指定一段注释性描述。</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul><ul><li>-m：自动创建这个用户的主目录&#x2F;home&#x2F;用户名</li></ul><p>Linux中一切皆文件，添加用户就是向某个文件中写入用户的信息</p><blockquote><p>userdel -r [用户名]</p></blockquote><p>删除用户并删除文件</p><blockquote><p>usermod  -参数  [用户名]</p></blockquote><p>修改用户</p><p>常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p><blockquote><p>passwd 选项 用户名</p></blockquote><p>用户口令管理</p><ul><li>-l 锁定口令，即禁用账号。</li><li>-u 口令解锁。</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对&#x2F;etc&#x2F;group文件的更新。</p><h3 id="1、增加一个新的用户组使用groupadd命令。其格式如下："><a href="#1、增加一个新的用户组使用groupadd命令。其格式如下：" class="headerlink" title="1、增加一个新的用户组使用groupadd命令。其格式如下："></a>1、增加一个新的用户组使用groupadd命令。其格式如下：</h3><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">groupadd</span> 选项 用户组<br></code></pre></div></td></tr></table></figure><p>可以使用的选项有：</p><ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul><h4 id="实例1："><a href="#实例1：" class="headerlink" title="实例1："></a>实例1：</h4><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta"># groupadd group1</span><br></code></pre></div></td></tr></table></figure><p>此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。</p><h4 id="实例2："><a href="#实例2：" class="headerlink" title="实例2："></a>实例2：</h4><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta"># groupadd -g 101 group2</span><br></code></pre></div></td></tr></table></figure><p>此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。</p><h3 id="2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下："><a href="#2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下：" class="headerlink" title="2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下："></a>2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下：</h3><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">groupdel</span> 用户组<br></code></pre></div></td></tr></table></figure><h4 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h4><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta"># groupdel group1</span><br></code></pre></div></td></tr></table></figure><p>此命令从系统中删除组group1。</p><h3 id="3、修改用户组的属性使用groupmod命令。其语法如下："><a href="#3、修改用户组的属性使用groupmod命令。其语法如下：" class="headerlink" title="3、修改用户组的属性使用groupmod命令。其语法如下："></a>3、修改用户组的属性使用groupmod命令。其语法如下：</h3><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">groupmod</span> 选项 用户组<br></code></pre></div></td></tr></table></figure><p>常用的选项有：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul><h4 id="实例1：-1"><a href="#实例1：-1" class="headerlink" title="实例1："></a>实例1：</h4><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta"># groupmod -g 102 group2</span><br></code></pre></div></td></tr></table></figure><p>此命令将组group2的组标识号修改为102。</p><h4 id="实例2：-1"><a href="#实例2：-1" class="headerlink" title="实例2："></a>实例2：</h4><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta"># groupmod –g 10000 -n group3 group2</span><br></code></pre></div></td></tr></table></figure><p>此命令将组group2的标识号改为10000，组名修改为group3。</p><h3 id="4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。"><a href="#4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。" class="headerlink" title="4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。"></a>4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</h3><p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p><figure class="highlight haxe"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haxe">$ <span class="hljs-keyword">new</span><span class="hljs-type">grp</span> root<br></code></pre></div></td></tr></table></figure><p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。类似于用户账号的管理，用户组的管理也可以通过集成的系统管理工具来完成。</p><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><p>常用命令 df，du，fdisk</p><h3 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h3><blockquote><p>检查文件系统的磁盘空间占用情况。可以利用该命令来获硬盘被占用了多少空间，目前还剩下多少空间等信息。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">df <span class="hljs-selector-attr">[-ahikHTm]</span> <span class="hljs-selector-attr">[目录或文件名]</span><br></code></pre></div></td></tr></table></figure><ul><li>-a ：列出所有的文件系统，包括系统特有的 &#x2F;proc 等文件系统；</li><li>-k ：以 KBytes 的容量显示各文件系统；</li><li>-m ：以 MBytes 的容量显示各文件系统；</li><li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li><li>-H ：以 M&#x3D;1000K 取代 M&#x3D;1024K 的进位方式；</li><li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li><li>-i ：不用硬盘容量，而以 inode 的数量来显示</li></ul><h3 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h3><p>对文件和目录磁盘使用的空间的查看</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> [-ahskm] 文件或目录名称<br></code></pre></div></td></tr></table></figure><ul><li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li><li>-h ：以人们较易读的容量格式 (G&#x2F;M) 显示；</li><li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li><li>-S ：不包括子目录下的总计，与 -s 有点差别。</li><li>-k ：以 KBytes 列出容量显示；</li><li>-m ：以 MBytes 列出容量显示；</li></ul><h3 id="fdisk命令"><a href="#fdisk命令" class="headerlink" title="fdisk命令"></a>fdisk命令</h3><p>fdisk 是 Linux 的磁盘分区表操作工具</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">fdisk <span class="hljs-selector-attr">[-l]</span> 装置名称<br></code></pre></div></td></tr></table></figure><h3 id="磁盘格式化"><a href="#磁盘格式化" class="headerlink" title="磁盘格式化"></a>磁盘格式化</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">mkfs <span class="hljs-selector-attr">[-t 文件系统格式]</span> 装置文件名<br></code></pre></div></td></tr></table></figure><ul><li>-t ：可以接文件系统格式，例如 ext3, ext2, vfat 等(系统有支持才会生效)</li></ul><h3 id="磁盘校验"><a href="#磁盘校验" class="headerlink" title="磁盘校验"></a>磁盘校验</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">fsck <span class="hljs-selector-attr">[-t 文件系统]</span><span class="hljs-selector-attr">[-ACay]</span> 装置名称<br></code></pre></div></td></tr></table></figure><ul><li>-t : 给定档案系统的型式，若在 &#x2F;etc&#x2F;fstab 中已有定义或 kernel 本身已支援的则不需加上此参数</li><li>-s : 依序一个一个地执行 fsck 的指令来检查</li><li>-A : 对&#x2F;etc&#x2F;fstab 中所有列出来的 分区（partition）做检查</li><li>-C : 显示完整的检查进度</li><li>-d : 打印出 e2fsck 的 debug 结果</li><li>-p : 同时有 -A 条件时，同时有多个 fsck 的检查一起执行</li><li>-R : 同时有 -A 条件时，省略 &#x2F; 不检查</li><li>-V : 详细显示模式</li><li>-a : 如果检查有错则自动修复</li><li>-r : 如果检查有错则由使用者回答是否修复</li><li>-y : 选项指定检测每个文件是自动输入yes，在不确定那些是不正常的时候，可以执行 # fsck -y 全部检查修复。</li></ul><h3 id="磁盘挂载和删除"><a href="#磁盘挂载和删除" class="headerlink" title="磁盘挂载和删除"></a>磁盘挂载和删除</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">mount <span class="hljs-selector-attr">[-t 文件系统]</span> <span class="hljs-selector-attr">[-L Label名]</span> <span class="hljs-selector-attr">[-o 额外选项]</span> <span class="hljs-selector-attr">[-n]</span>  装置文件名  挂载点<br></code></pre></div></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">umount</span> [-<span class="hljs-meta">fn</span>] 装置文件名或挂载点<br></code></pre></div></td></tr></table></figure><ul><li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li><li>-n ：不升级 &#x2F;etc&#x2F;mtab 情况下卸除。</li></ul><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><blockquote><p>ps -xx</p></blockquote><ul><li>-a 显示当前终端运行的所有的进程信息</li><li>-u 以用户的信息显示进程</li><li>-x 显示后台运行进程的参数</li></ul><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta"># ps -aux  查看所有进程</span><br>ps -aux <span class="hljs-string">| grep mysql  c</span><br><span class="hljs-meta"># | 在linux中叫做管道符</span><br><span class="hljs-meta"># grep 查找文件中符合条件的字符串</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2022/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h2><p>在程序开始时加载所有对象</p><p>问题：可能只需要部分对象，造成空间浪费</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 饿汉式单例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HungryMan</span> &#123;<br>    <span class="hljs-comment">//提前加载对象</span><br>    <span class="hljs-comment">//可能造成空间浪费</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] bytes0=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] bytes1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] bytes2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] bytes3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">HungryMan</span> <span class="hljs-variable">HUNGRY</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HungryMan</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HungryMan <span class="hljs-title function_">getHungryMan</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> HUNGRY;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h2><h3 id="非并发下"><a href="#非并发下" class="headerlink" title="非并发下"></a>非并发下</h3><p>在需要使用该对象时创建对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 懒汉式单例模式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMan</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">LazyMan</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> LazyMan lazyMan;<br><br>    <span class="hljs-comment">//需要使用时创建</span><br>    <span class="hljs-comment">//以下代码会在并发模式下出现问题，出现多个实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyMan <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (lazyMan==<span class="hljs-literal">null</span>)&#123;<br>            lazyMan=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyMan</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> lazyMan;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>存在问题</strong></p><blockquote><p>当A，B并发时，A,B同时检测到  lazyMan为null，并分别创建对象</p></blockquote><h3 id="使用静态内部类"><a href="#使用静态内部类" class="headerlink" title="使用静态内部类"></a>使用静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Holder</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Holder</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Holder <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> InnerClass.HOLDER;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Holder</span> <span class="hljs-variable">HOLDER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Holder</span>();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="双重检测锁模式处理并发问题"><a href="#双重检测锁模式处理并发问题" class="headerlink" title="双重检测锁模式处理并发问题"></a>双重检测锁模式处理并发问题</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 懒汉式单例模式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMan</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">LazyMan</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> LazyMan lazyMan;<br><br>    <span class="hljs-comment">//双重检测锁模式，懒汉式单例，DCL懒汉式</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyMan <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (lazyMan==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (LazyMan.class)&#123;<br>                <span class="hljs-keyword">if</span> (lazyMan==<span class="hljs-literal">null</span>)&#123;<br>                    lazyMan=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyMan</span>();<span class="hljs-comment">//但这不是一个原子性操作</span><br>                    <span class="hljs-comment">/**</span><br><span class="hljs-comment">                     * 1. 分配内存空间</span><br><span class="hljs-comment">                     * 2. 执行构造方法，初始化对象</span><br><span class="hljs-comment">                     * 3. 把对象指向这个空间</span><br><span class="hljs-comment">                     * 底层执行顺序会被打乱(指令重排)</span><br><span class="hljs-comment">                     */</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> lazyMan;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用反射破坏单例模式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">LazyMan</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> LazyMan.getInstance();<br>        Constructor&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LazyMan</span>&gt; declaredConstructor = instance.getClass().getDeclaredConstructor(<span class="hljs-literal">null</span>);<br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//无视私有构造器</span><br>        <span class="hljs-type">LazyMan</span> <span class="hljs-variable">instance2</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance();<br>        System.out.println(instance2);<br>        System.out.println(instance);<br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>存在问题</strong></p><ol><li>lazyMan&#x3D;new LazyMan();不是一个原子性操作<ul><li>执行过程：<ol><li>分配内存空间</li><li>执行构造方法</li><li>把对象指向这个空间</li></ol></li><li>123是正常执行流程，但底层执行时会出现指令重排（执行顺序被打乱）</li></ul></li><li>可以通过反射破坏单例模式</li></ol><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span><span class="hljs-literal">false</span>;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">LazyMan</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (LazyMan.class)&#123;<br>            <span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">false</span>)&#123;<br>                flag=<span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;实例已被创建&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p><font color="red">但是！！！</font></p><p>依然可以通过反射破坏flag，从而破坏单例模式</p><h2 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">EnumSingle</span> &#123;<br>    INSTANCE;<br>    EnumSingle()&#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> EnumSingle <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        EnumSingle instance1=EnumSingle.INSTANCE;<br>        Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.class.getDeclaredConstructor(<span class="hljs-literal">null</span>);<br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        EnumSingle instance2=declaredConstructor.newInstance();<br>        System.out.println(instance2);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>枚举本身也是一个Class</p><p>枚举类没有空参构造器</p><p>反射不能破坏枚举的单例模式</p><p>通过JAD编译枚举类</p><p><img src="https://s2.loli.net/2022/05/07/87tNqOGwml3sby1.png" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>优点 ： <ul><li>只生成一个实例减少系统性能开销</li><li>可以在系统设置全局的访问点，优化共享资源访问</li></ul></li><li>常见实现方式<ul><li>饿汉式 （线程安全，调用效率高，不能延迟加载）</li><li>懒汉式（线程安全，调用效率不高，可以延迟加载）</li><li>DCL懒汉式（由于JVM底层内部模型原因，偶尔会出现问题，不建议使用）</li><li>饿汉式改进：静态内部类（线程安全，调用效率高，延迟加载）</li><li>枚举单例（线程安全，调用效率高，不能延迟加载）</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>单例模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OOP七大原则</title>
    <link href="/2022/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/OOP%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <url>/2022/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/OOP%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<blockquote><p>PBP&#x2F;OBP&#x2F;OOP的特征 PBP（基于过程）：函数、域与生命周期的概念、函数重载、函数模板、异常处理、范型算法。 OBP（基于对象）：类（接口）、类的生命周期、类模板。 OOP（面向对象）：继承、多态。 三个概念步步深入，后者包括前者。其目的是实现软件开发的可重用性，解决软件危机（软件工程思想未引入之前）。 OOP不可避免设计原则的发展与设计模式的产生，这是OOP独具的特征决定的（正如前面所说，特征的产生是由其产生目的决定的）。</p></blockquote><blockquote><p>OOP的方法论：高内聚，低耦合，易复用</p></blockquote><h2 id="OOP七大原则"><a href="#OOP七大原则" class="headerlink" title="OOP七大原则"></a>OOP七大原则</h2><h3 id="开闭原则-OCP"><a href="#开闭原则-OCP" class="headerlink" title="开闭原则(OCP)"></a>开闭原则(OCP)</h3><blockquote><p>对扩展开放，对修改关闭</p></blockquote><p>根据开闭原则，在设计一个软件系统模块（类，方法）的时候，应该可以在不修改原有的模块（修改关闭）的基础上，能扩展其功能（扩展开放）。</p><p><strong>扩展开放</strong>：某模块的功能是可扩展的，则该模块是扩展开放的。软件系统的功能上的可扩展性要求模块是扩展开放的。</p><p><strong>修改关闭</strong>：某模块被其他模块调用，如果该模块的源代码不允许修改，则该模块修改关闭的。软件系统的功能上的稳定性，持续性要求模块是修改关闭的。</p><h3 id="里氏替换原则-LSP"><a href="#里氏替换原则-LSP" class="headerlink" title="里氏替换原则(LSP)"></a>里氏替换原则(LSP)</h3><blockquote><p>所有引用基类的地方必须能透明地使用其子类的对象</p></blockquote><blockquote><p>里式替换原则的引申意义：子类可以扩展父类的功能，但不能改变父类原有的功能。</p></blockquote><p>​也就是说，只有满足以下2个条件的OO设计才可被认为是满足了LSP原则：</p><p>​1. 不应该在代码中出现if&#x2F;else之类对派生类类型进行判断的条件。</p><p>​2. 派生类应当可以替换基类并出现在基类能够出现的任何地方，或者说如果我们把代码中使用基类的地方用它的派生类所代替，代码还能正常工作。</p><h3 id="依赖倒置原则-DIP"><a href="#依赖倒置原则-DIP" class="headerlink" title="依赖倒置原则(DIP)"></a>依赖倒置原则(DIP)</h3><blockquote><p>高层模块不应该依赖底层模块，它们都应该依赖抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</p></blockquote><p>面向接口编程，不要面向实现编程</p><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><blockquote><p>控制类的粒度大小，将对象解耦，提高其内聚性</p></blockquote><p>单一职责原则：<strong><em>一个对象应该只包含单一的职责，并且该职责被完整地封装在一个类中</em>。</strong><br>单一职责原则的另一种定义方式：<strong><em>就一个类而言，应该仅有一个引起它变化的原因</em>。</strong></p><h3 id="接口隔离原则（ISP）"><a href="#接口隔离原则（ISP）" class="headerlink" title="接口隔离原则（ISP）"></a>接口隔离原则（ISP）</h3><blockquote><p><strong>使用多个专门的接口，而不使用单一 的总接口，即客户端不应该依赖那些它不需要的接口。</strong></p></blockquote><p>​换句话说，使用多个专门的接口比使用单一的总接口总要好。</p><p>它包含了2层意思：</p><ol><li><p>接口的设计原则：接口的设计应该遵循最小接口原则，不要把用户不使用的方法塞进同一个接口里。如果一个接口的方法没有被使用到，则说明该接口过胖，应该将其分割成几个功能专一的接口。</p></li><li><p>接口的依赖（继承）原则：如果一个接口a继承另一个接口b，则接口a相当于继承了接口b的方法，那么继承了接口b后的接口a也应该遵循上述原则：不应该包含用户不使用的方法。 反之，则说明接口a被b给污染了，应该重新设计它们的关系。</p></li></ol><p>​根据接口隔离原则，当一个接口太大时，我们需要将它分割成一些更细小的接口，使用该接 口的客户端仅需知道与之相关的方法即可。</p><h3 id="迪米特法则-LoD"><a href="#迪米特法则-LoD" class="headerlink" title="迪米特法则(LoD)"></a>迪米特法则(LoD)</h3><p>也叫<font color="red">最少知道原则</font></p><blockquote><p>只与直接的朋友交谈，不和“陌生人“说话</p></blockquote><p>​迪米特法则可以简单说成：talk only to your immediate friends。 对于OOD来说，又被解释为下面几种方式：一个软件实体应当尽可能少的与其他实体发生相互作用。每一个软件单位对其他的单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位。</p><p>​迪米特法则的初衷在于降低类之间的耦合。由于每个类尽量减少对其他类的依赖，因此，很容易使得系统的功能模块功能独立，相互之间不存在（或很少有）依赖关系。</p><p>​迪米特法则不希望类之间建立直接的联系。如果真的有需要建立联系，也希望能通过它的友元类来转达。因此，应用迪米特法则有可能造成的一个后果就是：系统中存在大量的中介类，这些类之所以存在完全是为了传递类之间的相互调用关系——这在一定程度上增加了系统的复杂度。</p><p>​如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中的一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。</p><h4 id="LoD法则缺点"><a href="#LoD法则缺点" class="headerlink" title="LoD法则缺点"></a>LoD法则缺点</h4><p>​在系统里造出大量的小方法，这些方法仅仅是传递间接的调用，与系统的业务逻辑无关。</p><p>​遵循类之间的迪米特法则会是一个系统的局部设计简化，因为每一个局部都不会和远距离的对象有直接的关联。但是，这也会造成系统的不同模块之间的通信效率降低，也会使系统的不同模块之间不容易协调。</p><h3 id="合成复用原则-CARP"><a href="#合成复用原则-CARP" class="headerlink" title="合成复用原则(CARP)"></a>合成复用原则(CARP)</h3><blockquote><p>尽量先使用组合或者聚合等关联关系来实现，其次考虑使用继承关系来实现</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>OOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式概述</title>
    <link href="/2022/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="本质-amp-优点"><a href="#本质-amp-优点" class="headerlink" title="本质&amp;优点"></a>本质&amp;优点</h2><hr><ul><li><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性，继承性和多态性及类的关联关系和组合关系的充分理解</p></li><li><p>正确使用设计模式的优点</p><ul><li>提高思维，编程和设计能力</li><li>使程序设计标准化，代码编制更加工程化，提高软件开发效率，缩短开发周期</li><li>代码可重用性高，可读性强，可靠性高，灵活性好，可维护性强</li></ul></li></ul><h2 id="设计模式的基本要素"><a href="#设计模式的基本要素" class="headerlink" title="设计模式的基本要素"></a>设计模式的基本要素</h2><ul><li><p>模式名称</p><ul><li>GoF23<ul><li>创建型模式：<ul><li>单例模式，工厂模式，抽象工厂模式，建造者模式，原型模式</li></ul></li><li>结构性模式：<ul><li>适配器模式，桥接模式，装饰模式，组合模式，外观模式，享元模式，代理模式</li></ul></li><li>行为型模式：<ul><li>模板方法模式，命令模式，迭代器模式，观察者模式，中介者模式，备忘录模式，解释器模式，状态模式，策略模式，职责链模式，访问者模式</li></ul></li></ul></li></ul></li><li><p>问题</p></li><li><p>解决方案</p></li><li><p>效果</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot拦截器配置方法</title>
    <link href="/2022/05/06/SpringBoot%E6%8B%A6%E6%88%AA%E5%99%A8%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    <url>/2022/05/06/SpringBoot%E6%8B%A6%E6%88%AA%E5%99%A8%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h2><div class="hljs code-wrapper"><pre><code class="hljs">在用户浏览部分页面前，检测用户是否已经登录过，若登录过，则允许访问，若未登陆过，则拦截目标页面的访问，并跳转至登录界面</code></pre></div><h2 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h2><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><p>创建inteceptor包，创建LoginInteceptor类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测全局session对象中是否有uid数据，如果有则放行，若没有则重定向到登陆界面</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request 请求对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response 响应对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler 处理器（url+Controller，映射）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true则放行，false拦截</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">                             HttpServletResponse response,</span><br><span class="hljs-params">                             Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        Object obj=request.getSession().getAttribute(<span class="hljs-string">&quot;uid&quot;</span>);<br>        <span class="hljs-keyword">if</span> (obj==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//用户没有登录过系统</span><br>            response.sendRedirect(<span class="hljs-string">&quot;/web/index.html&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h3><div class="hljs code-wrapper"><pre><code class="hljs">在config包下创建LoginInterceptorConfig类实现WebMvcConfigure类注册拦截器</code></pre></div><blockquote><p>registry.addInterceptor()用于注册拦截器<br>addPathPatterns(“&#x2F;**”)意为拦截所有页面，参数是需要拦截的页面<br>excludePathPatterns()参数是不需要拦截的页面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 拦截器注册</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    HandlerInterceptor interceptor=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        List&lt;String&gt; patterns = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        patterns.add(<span class="hljs-string">&quot;/bootstrap3/**&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/css/**&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/images/**&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/js/**&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/web/register.html&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/web/index.html&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/web/login.html&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/web/product.html&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/users/reg&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/users/login&quot;</span>);<br>        registry.addInterceptor(interceptor).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>).excludePathPatterns(patterns);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>拦截器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot处理跨域请求的几种方法</title>
    <link href="/2022/05/06/SpringBoot%E5%A4%84%E7%90%86%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <url>/2022/05/06/SpringBoot%E5%A4%84%E7%90%86%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="Error："><a href="#Error：" class="headerlink" title="Error："></a>Error：</h2><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">Access</span> <span class="hljs-keyword">to</span> XMLHttpRequest at <span class="hljs-string">&#x27;http://localhost:8080/store/users/reg&#x27;</span> <span class="hljs-keyword">from</span> origin <span class="hljs-string">&#x27;http://localhost:52972&#x27;</span> has been blocked <span class="hljs-keyword">by</span> CORS <span class="hljs-keyword">policy</span>: <span class="hljs-keyword">No</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="hljs-keyword">header</span> <span class="hljs-keyword">is</span> present <span class="hljs-keyword">on</span> the requested resource.<br></code></pre></div></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>浏览器出于安全考虑，使用XMLHttpRequest对象发起HTTP请求时必须遵守同源策略(<strong>要求源相同才能正常进行通信，即协议，域名，端口号都完全一致</strong>)<br>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p></blockquote><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="方案一-直接采用SpringBoot的注解-CrossOrigin（支持SpringMvc）"><a href="#方案一-直接采用SpringBoot的注解-CrossOrigin（支持SpringMvc）" class="headerlink" title="方案一 直接采用SpringBoot的注解@CrossOrigin（支持SpringMvc）"></a>方案一 直接采用SpringBoot的注解@CrossOrigin（支持SpringMvc）</h3><p>在Control层需要跨域的方法或类上增加注解@CrossOrigin</p><p><font color="red">该注解可继承</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-comment">//以json数据格式响应到前端</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> IUserService userService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/reg&quot;)</span><br>    <span class="hljs-meta">@CrossOrigin</span><br>    <span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">reg</span><span class="hljs-params">(User user)</span>&#123;<br>        JsonResult&lt;Void&gt; result=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;();<br>        userService.register(user);<br>        result.setState(<span class="hljs-number">200</span>);<br>        result.setMessage(<span class="hljs-string">&quot;注册成功&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="方法二、处理跨域请求的Configuration"><a href="#方法二、处理跨域请求的Configuration" class="headerlink" title="方法二、处理跨域请求的Configuration"></a>方法二、处理跨域请求的Configuration</h3><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">增加一个配置类，<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CrossOriginConfig</span>.</span></span>java。继承WebMvcConfigurerAdapter或者实现WebMvcConfigurer接口，其他都不用管，项目启动时，会自动读取配置。<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * AJAX请求跨域</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Mr.W</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span> 2018-08-13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurerAdapter</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ORIGINS[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; <span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span> &#125;;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>).allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>).allowCredentials(<span class="hljs-literal">true</span>).allowedMethods(ORIGINS).maxAge(<span class="hljs-number">3600</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="方法三、采用过滤器（filter）的方式"><a href="#方法三、采用过滤器（filter）的方式" class="headerlink" title="方法三、采用过滤器（filter）的方式"></a>方法三、采用过滤器（filter）的方式</h3><blockquote><p>同方法二加配置类，增加一个CORSFilter 类，并实现Filter接口即可，其他都不用管，接口调用时，会过滤跨域的拦截。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"> <span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CORSFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span><br>        <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>    <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> (HttpServletResponse) response;<br>    res.addHeader(<span class="hljs-string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>    res.addHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>    res.addHeader(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;GET, POST, DELETE, PUT&quot;</span>);<br>    res.addHeader(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;Content-Type,X-CAF-Authorization-Token,sessionToken,X-TOKEN&quot;</span>);<br>    <span class="hljs-keyword">if</span> (((HttpServletRequest) request).getMethod().equals(<span class="hljs-string">&quot;OPTIONS&quot;</span>)) &#123;<br>        response.getWriter().println(<span class="hljs-string">&quot;ok&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    chain.doFilter(request, response);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于SpringMVC文件上传功能</title>
    <link href="/2022/05/06/%E5%9F%BA%E4%BA%8ESpringMVC%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/05/06/%E5%9F%BA%E4%BA%8ESpringMVC%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="基于SpringMVC的文件上传"><a href="#基于SpringMVC的文件上传" class="headerlink" title="基于SpringMVC的文件上传"></a>基于SpringMVC的文件上传</h2><h3 id="1-MultipartFile接口"><a href="#1-MultipartFile接口" class="headerlink" title="1 MultipartFile接口"></a>1 MultipartFile接口</h3><p>MultipartFile接口常用的的API见下表：</p><table><thead><tr><th align="left">方法</th><th>功能描述</th></tr></thead><tbody><tr><td align="left">String getOriginalFilename()</td><td>获取上传文件的原始文件名，即该文件在客户端中的文件名</td></tr><tr><td align="left">boolean isEmpty()</td><td>判断上传的文件是否为空，当没有选择文件就直接上传，或者选中的文件是0字节的空文件时，返回true，否则返回false</td></tr><tr><td align="left">long getSize()</td><td>获取上传的文件大小，以字节为单位</td></tr><tr><td align="left">String getContentType()</td><td>根据所上传的文件的扩展名决定该文件的MIME类型，例如上传.jpg格式的图片，将返回image&#x2F;jpeg</td></tr><tr><td align="left">InputStream getInputStream()</td><td>获取上传文件的输入字节流，通常用于自定义读取所上传的文件的过程，该方法与transferTo()方法不可以同时使用</td></tr><tr><td align="left">void transferTo(File dest)</td><td>保存上传的文件，该方法与getInputStream()方法不可以同时使用</td></tr></tbody></table><h3 id="2-MultipartResolver接口"><a href="#2-MultipartResolver接口" class="headerlink" title="2 MultipartResolver接口"></a>2 MultipartResolver接口</h3><p>1.MultipartResolver可以将上传过程中产生的数据封装为MultipartFile类型的对象中。</p><p>2.在配置MultipartResovler时，可以为其中的几个属性注入值：</p><ul><li>maxUploadSize：上传文件的最大大小，假设设置值为10M，一次性上传5个文件，则5个文件的大小总和不允许超过10M。</li><li>maxUploadSizePerFile：每个上传文件的最大大小，假设设置值为10M，一次性上传5个文件，则每个文件的大小都不可以超过10M，但是5个文件的大小总和可以接近50M。</li><li>defaultEncoding：默认编码。</li></ul><h3 id="3-基于SpringMVC的文件上传案例"><a href="#3-基于SpringMVC的文件上传案例" class="headerlink" title="3 基于SpringMVC的文件上传案例"></a>3 基于SpringMVC的文件上传案例</h3><h4 id="3-1-创建项目"><a href="#3-1-创建项目" class="headerlink" title="3.1 创建项目"></a>3.1 创建项目</h4><p>1.创建Java Enterprise项目，设置Name为springmvc-upload，Group为com.cy，Artifact为controller的Java企业级项目。</p><p>2.将项目com.cy.controller包下自动生成的HelloServlet类删除，并删除webapp下自动生成的index.jsp文件。</p><p>3.添加文件上传jar包依赖（关于文件上传需要添加spring-webmvc和commons-fileupload依赖）。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 文件上传 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>4.在src\main\resources文件夹下创建spring配置文件，并将文件命名为spring-upload.xml。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="3-2-前端页面设计"><a href="#3-2-前端页面设计" class="headerlink" title="3.2 前端页面设计"></a>3.2 前端页面设计</h4><p>在webapp目录下创建upload.html页面，并在页面中添加如下代码。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- enctype属性：规定表单中数据在提交给服务器之前如何进行编码。默认表单数据的编码是&quot;application/x-www-form-urlencoded&quot;。</span><br><span class="hljs-comment">         application/x-www-form-urlencoded：提交前表单中所有数据都会进行编码；编码的规则是：空格转换为&quot;+&quot;加号，特殊符号转换为ASCII HEX值</span><br><span class="hljs-comment">         text/plain：提交前表单中数据空格转换为&quot;+&quot;加号，但不对特殊字符进行编码。</span><br><span class="hljs-comment">         multipart/form-data：提交前表单中不对字符进行编码；在使用包含文件上传控件的表单中，必须使用该值</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;upload.do&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>文件名(N)：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;上传&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>注意</strong>：form表单的请求方式必须设置为POST，并配置属性enctype&#x3D;”multipart&#x2F;form-data”，文件上传input控件的name属性值需设置为file值。</p></blockquote><h4 id="3-3-后台功能实现"><a href="#3-3-后台功能实现" class="headerlink" title="3.3 后台功能实现"></a>3.3 后台功能实现</h4><p>1.在web.xml文件中配置前端控制器和过滤器，并指定DispatcherServlet加载的配置文件springmvc-upload.xml的位置。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-upload.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>2.创建com.cy.controller.UploadController控制器类，在类的声明之前添加@Controller注解，并在控制器中添加处理请求的upload()方法，为此方法添加类型为MultipartFile接口的参数，并为该参数添加@RequestParam注解，表示客户端上传的文件。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.controller;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadController</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    @RequestMapping(&quot;upload.do&quot;)</span><br><span class="hljs-comment">    @ResponseBody</span><br><span class="hljs-comment">    public String upload(@RequestParam(&quot;file&quot;) MultipartFile file) &#123;</span><br><span class="hljs-comment">        System.out.println(&quot;UploadController.upload()...&quot;);</span><br><span class="hljs-comment">        File dest = new File(&quot;D:/1.png&quot;);</span><br><span class="hljs-comment">        try &#123;</span><br><span class="hljs-comment">            // 调用MultipartFile参数对象的transferTo()方法即可保存上传的文件</span><br><span class="hljs-comment">            file.transferTo(dest);</span><br><span class="hljs-comment">        &#125; catch (IOException e) &#123;</span><br><span class="hljs-comment">            e.printStackTrace();</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        return &quot;OK&quot;;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    */</span><br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;upload.do&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(HttpServletRequest request, <span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获取上传文件的原始文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-comment">// 获取上下文的绝对路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">&quot;upload&quot;</span>);<br>        System.out.println(realPath);<br>        <span class="hljs-comment">// 创建File文件对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(realPath);<br>        <span class="hljs-keyword">if</span> (!dir.exists()) &#123;<br>            dir.mkdirs();<br>        &#125;<br>        <span class="hljs-comment">// 自定义上传文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>        <span class="hljs-comment">// 获取上传文件扩展名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">beginIndex</span> <span class="hljs-operator">=</span> originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>);<br>        <span class="hljs-keyword">if</span> (beginIndex &gt; <span class="hljs-number">0</span>) &#123;<br>            suffix = originalFilename.substring(beginIndex);<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fullFilename</span> <span class="hljs-operator">=</span> fileName + suffix;<br>        <span class="hljs-comment">// 调用MultipartFile参数对象的transferTo()方法即可保存上传的文件</span><br>        file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir, fullFilename));<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3.在springmvc-upload.xml配置文件中添加组件扫描和CommonsMultipartResolver类的bean标签配置。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 组件扫描 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.cy&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- CommonsMultipartResolver --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>注意</strong>：CommonsMultipartResolver类在配置时，id值必须设置成multipartResolver。</p></blockquote><p>4.启动项目，访问<a href="http://localhost:8080/springmvc_upload_war_exploded/upload.html%E7%BD%91%E5%9D%80%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6%E6%8F%90%E4%BA%A4%E3%80%82">http://localhost:8080/springmvc_upload_war_exploded/upload.html网址测试文件提交。</a></p><h2 id="上传头像"><a href="#上传头像" class="headerlink" title="上传头像"></a>上传头像</h2><h3 id="1-用户-上传头像-持久层"><a href="#1-用户-上传头像-持久层" class="headerlink" title="1 用户-上传头像-持久层"></a>1 用户-上传头像-持久层</h3><h4 id="1-1-规划需要执行的SQL语句"><a href="#1-1-规划需要执行的SQL语句" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>上传文件的操作其实是：先将用户上传的文件保存到服务器端的某个位置，然后将保存文件的路径记录在数据库中。当后续需要使用该文件时，从数据库中读出文件的路径，即可实现在线访问该文件。</p><p>在持久层处理数据库中的数据时，只需要关心如何记录头像文件的路径，并不需要考虑上传时保存文件的过程。所以，需要执行的SQL语句大致是：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">update t_user set avatar=?, modified_user=?, modified_time=? where uid=?<br></code></pre></div></td></tr></table></figure><h4 id="1-2-接口与抽象方法"><a href="#1-2-接口与抽象方法" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><p>在UserMapper接口中添加updateAvatarByUid()抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据uid更新用户的头像</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 用户的id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> avatar 新头像的路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> modifiedUser 修改执行人</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> modifiedTime 修改时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment"> */</span><br>Integer <span class="hljs-title function_">updateAvatarByUid</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-meta">@Param(&quot;uid&quot;)</span> Integer uid,</span><br><span class="hljs-params"><span class="hljs-meta">@Param(&quot;avatar&quot;)</span> String avatar,</span><br><span class="hljs-params"><span class="hljs-meta">@Param(&quot;modifiedUser&quot;)</span> String modifiedUser,</span><br><span class="hljs-params"><span class="hljs-meta">@Param(&quot;modifiedTime&quot;)</span> Date modifiedTime)</span>;<br></code></pre></div></td></tr></table></figure><h4 id="1-3-配置SQL映射"><a href="#1-3-配置SQL映射" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><p>1.在UserMapper.xml中配置updateAvatarByUid()抽象方法的映射。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 根据uid更新用户的头像</span><br><span class="hljs-comment"> Integer updateAvatarByUid(</span><br><span class="hljs-comment">@Param(&quot;uid&quot;) Integer uid,</span><br><span class="hljs-comment">@Param(&quot;avatar&quot;) String avatar,</span><br><span class="hljs-comment">@Param(&quot;modifiedUser&quot;) String modifiedUser,</span><br><span class="hljs-comment">@Param(&quot;modifiedTime&quot;) Date modifiedTime) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateAvatarByUid&quot;</span>&gt;</span><br>UPDATE<br>t_user<br>SET<br>avatar = #&#123;avatar&#125;,<br>modified_user = #&#123;modifiedUser&#125;,<br>modified_time = #&#123;modifiedTime&#125;<br>WHERE<br>uid = #&#123;uid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>2.在UserMapperTests中编写并执行单元测试。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateAvatarByUid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">avatar</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/upload/avatar.png&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">modifiedUser</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;超级管理员&quot;</span>;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">modifiedTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.updateAvatarByUid(uid, avatar, modifiedUser, modifiedTime);<br>    System.out.println(<span class="hljs-string">&quot;rows=&quot;</span> + rows);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-用户-上传头像-业务层"><a href="#2-用户-上传头像-业务层" class="headerlink" title="2 用户-上传头像-业务层"></a>2 用户-上传头像-业务层</h3><h4 id="2-1-规划异常"><a href="#2-1-规划异常" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><p>在修改头像值前先检查用户数据状态，可能抛UserNotFoundException异常；由于最终执行的是修改操作还可能抛UpdateException异常。</p><h4 id="2-2-接口与抽象方法"><a href="#2-2-接口与抽象方法" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>在IUserService中添加changeAvatar(Integer uid, String username, String avatar)抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改用户头像</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 当前登录的用户的id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username 当前登录的用户名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> avatar 用户的新头像的路径</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">changeAvatar</span><span class="hljs-params">(Integer uid, String username, String avatar)</span>;<br></code></pre></div></td></tr></table></figure><h4 id="2-3-实现抽象方法"><a href="#2-3-实现抽象方法" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>1.在UserServiceImpl类中实现changeAvatar(Integer uid, String username, String avatar)方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeAvatar</span><span class="hljs-params">(Integer uid, String username, String avatar)</span> &#123;<br>    <span class="hljs-comment">// 调用userMapper的findByUid()方法，根据参数uid查询用户数据</span><br>    <span class="hljs-comment">// 检查查询结果是否为null</span><br>    <span class="hljs-comment">// 是：抛出UserNotFoundException</span><br><br>    <span class="hljs-comment">// 检查查询结果中的isDelete是否为1</span><br>    <span class="hljs-comment">// 是：抛出UserNotFoundException</span><br><br>    <span class="hljs-comment">// 创建当前时间对象</span><br>    <span class="hljs-comment">// 调用userMapper的updateAvatarByUid()方法执行更新，并获取返回值</span><br>    <span class="hljs-comment">// 判断以上返回的受影响行数是否不为1</span><br>    <span class="hljs-comment">// 是：抛了UpdateException</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>2.changeAvatar(Integer uid, String username, String avatar)方法中代码的具体实现为。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeAvatar</span><span class="hljs-params">(Integer uid, String username, String avatar)</span> &#123;<br><span class="hljs-comment">// 调用userMapper的findByUid()方法，根据参数uid查询用户数据</span><br><span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.findByUid(uid);<br><span class="hljs-comment">// 检查查询结果是否为null</span><br><span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 是：抛出UserNotFoundException</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 检查查询结果中的isDelete是否为1</span><br><span class="hljs-keyword">if</span> (result.getIsDelete().equals(<span class="hljs-number">1</span>)) &#123;<br><span class="hljs-comment">// 是：抛出UserNotFoundException</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 创建当前时间对象</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-comment">// 调用userMapper的updateAvatarByUid()方法执行更新，并获取返回值</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.updateAvatarByUid(uid, avatar, username, now);<br><span class="hljs-comment">// 判断以上返回的受影响行数是否不为1</span><br><span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 是：抛出UpdateException</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateException</span>(<span class="hljs-string">&quot;更新用户数据时出现未知错误，请联系系统管理员&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3.在UserServiceTests类中进行单元测试。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeAvatar</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;头像管理员&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">avatar</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/upload/avatar.png&quot;</span>;<br>        userService.changeAvatar(uid, username, avatar);<br>        System.out.println(<span class="hljs-string">&quot;OK.&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>        System.out.println(e.getClass().getSimpleName());<br>        System.out.println(e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-用户-上传头像-控制器"><a href="#3-用户-上传头像-控制器" class="headerlink" title="3 用户-上传头像-控制器"></a>3 用户-上传头像-控制器</h3><h4 id="3-1-处理异常"><a href="#3-1-处理异常" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><p>1.在处理上传文件的过程中，用户可能会选择错误的文件上传，此时就应该抛出对应的异常并进行处理。所以需要创建文件上传相关异常的基类，即在com.cy.store.controller.ex包下创建FileUploadException类，并继承自RuntimeException类。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.ex;<br><br><span class="hljs-comment">/** 文件上传相关异常的基类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUploadException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FileUploadException</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FileUploadException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FileUploadException</span><span class="hljs-params">(String message, Throwable cause)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FileUploadException</span><span class="hljs-params">(Throwable cause)</span> &#123;<br>        <span class="hljs-built_in">super</span>(cause);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">FileUploadException</span><span class="hljs-params">(String message, Throwable cause, <span class="hljs-type">boolean</span> enableSuppression, <span class="hljs-type">boolean</span> writableStackTrace)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause, enableSuppression, writableStackTrace);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>2.在处理上传的文件过程中，经分析可能会产生以下异常。这些异常类都需要继承自FileUploadException类。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 上传的文件为空</span><br>cn.tedu.store.controller.ex.FileEmptyException<br><span class="hljs-comment">// 上传的文件大小超出了限制值</span><br>cn.tedu.store.controller.ex.FileSizeException<br><span class="hljs-comment">// 上传的文件类型超出了限制</span><br>cn.tedu.store.controller.ex.FileTypeException<br><span class="hljs-comment">// 上传的文件状态异常</span><br>cn.tedu.store.controller.ex.FileStateException<br><span class="hljs-comment">// 上传文件时读写异常</span><br>cn.tedu.store.controller.ex.FileUploadIOException<br></code></pre></div></td></tr></table></figure><p>3.创建FileEmptyException异常类，并继承FileUploadException类。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.ex;<br><br><span class="hljs-comment">/** 上传的文件为空的异常，例如没有选择上传的文件就提交了表单，或选择的文件是0字节的空文件 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileEmptyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FileUploadException</span> &#123;<br>    <span class="hljs-comment">// Override Methods...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>4.创建FileSizeException异常类，并继承FileUploadException类。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.ex;<br><br><span class="hljs-comment">/** 上传的文件的大小超出了限制值 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileSizeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FileUploadException</span> &#123;<br>    <span class="hljs-comment">// Override Methods...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>5.创建FileTypeException异常类，并继承FileUploadException类。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.ex;<br><br><span class="hljs-comment">/** 上传的文件类型超出了限制 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileTypeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FileUploadException</span> &#123;<br>    <span class="hljs-comment">// Override Methods...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>6.创建FileStateException异常类，并继承FileUploadException类。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.ex;<br><br><span class="hljs-comment">/** 上传的文件状态异常 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileStateException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FileUploadException</span> &#123;<br>    <span class="hljs-comment">// Override Methods...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>7.创建FileUploadIOException异常类，并继承FileUploadException类。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.ex;<br><br><span class="hljs-comment">/** 上传文件时读写异常 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUploadIOException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FileUploadException</span> &#123;<br>    <span class="hljs-comment">// Override Methods...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>8.然后在BaseController的handleException()的@ExceptionHandler注解中添加FileUploadException.class异常的处理；最后在方法中处理这些异常。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ExceptionHandler(&#123;ServiceException.class, FileUploadException.class&#125;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">handleException</span><span class="hljs-params">(Throwable e)</span> &#123;<br>JsonResult&lt;Void&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Void&gt;(e);<br><span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> UsernameDuplicateException) &#123;<br>result.setState(<span class="hljs-number">4000</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> UserNotFoundException) &#123;<br>result.setState(<span class="hljs-number">4001</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> PasswordNotMatchException) &#123;<br>result.setState(<span class="hljs-number">4002</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> InsertException) &#123;<br>result.setState(<span class="hljs-number">5000</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> UpdateException) &#123;<br>result.setState(<span class="hljs-number">5001</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FileEmptyException) &#123;<br>result.setState(<span class="hljs-number">6000</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FileSizeException) &#123;<br>result.setState(<span class="hljs-number">6001</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FileTypeException) &#123;<br>result.setState(<span class="hljs-number">6002</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FileStateException) &#123;<br>result.setState(<span class="hljs-number">6003</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FileUploadIOException) &#123;<br>result.setState(<span class="hljs-number">6004</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-2-设计请求"><a href="#3-2-设计请求" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式：</p><div class="hljs code-wrapper"><pre><code class="hljs">请求路径：/users/change_avatar请求参数：MultipartFile file, HttpSession session请求类型：POST响应结果：JsonResult&lt;String&gt;</code></pre></div><h4 id="3-3-处理请求"><a href="#3-3-处理请求" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p>1.在UserController类中添加处理请求的changeAvatar(@RequestParam(“file”) MultipartFile file, HttpSession session)方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;change_avatar&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;String&gt; <span class="hljs-title function_">changeAvatar</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, HttpSession session)</span> &#123;<br><span class="hljs-comment">// 判断上传的文件是否为空</span><br><span class="hljs-comment">// 是：抛出异常</span><br><br><span class="hljs-comment">// 判断上传的文件大小是否超出限制值</span><br><span class="hljs-comment">// 是：抛出异常</span><br><br><span class="hljs-comment">// 判断上传的文件类型是否超出限制</span><br><span class="hljs-comment">// 是：抛出异常</span><br><br><span class="hljs-comment">// 获取当前项目的绝对磁盘路径</span><br><span class="hljs-comment">// 保存头像文件的文件夹</span><br><br><span class="hljs-comment">// 保存的头像文件的文件名</span><br><br><span class="hljs-comment">// 创建文件对象，表示保存的头像文件</span><br><span class="hljs-comment">// 执行保存头像文件</span><br><span class="hljs-comment">// 如果产生异常则抛出</span><br><br><span class="hljs-comment">// 头像路径</span><br><span class="hljs-comment">// 从Session中获取uid和username</span><br><span class="hljs-comment">// 将头像写入到数据库中</span><br><br><span class="hljs-comment">// 返回成功和头像路径</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>2.changeAvatar(@RequestParam(“file”) MultipartFile file, HttpSession session)方法中具体代码实现为。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/** 头像文件大小的上限值(10MB) */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">AVATAR_MAX_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>;<br><span class="hljs-comment">/** 允许上传的头像的文件类型 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;String&gt; AVATAR_TYPES = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><br><span class="hljs-comment">/** 初始化允许上传的头像的文件类型 */</span><br><span class="hljs-keyword">static</span> &#123;<br>AVATAR_TYPES.add(<span class="hljs-string">&quot;image/jpeg&quot;</span>);<br>AVATAR_TYPES.add(<span class="hljs-string">&quot;image/png&quot;</span>);<br>AVATAR_TYPES.add(<span class="hljs-string">&quot;image/bmp&quot;</span>);<br>AVATAR_TYPES.add(<span class="hljs-string">&quot;image/gif&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@PostMapping(&quot;change_avatar&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;String&gt; <span class="hljs-title function_">changeAvatar</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, HttpSession session)</span> &#123;<br><span class="hljs-comment">// 判断上传的文件是否为空</span><br><span class="hljs-keyword">if</span> (file.isEmpty()) &#123;<br><span class="hljs-comment">// 是：抛出异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileEmptyException</span>(<span class="hljs-string">&quot;上传的头像文件不允许为空&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 判断上传的文件大小是否超出限制值</span><br><span class="hljs-keyword">if</span> (file.getSize() &gt; AVATAR_MAX_SIZE) &#123; <span class="hljs-comment">// getSize()：返回文件的大小，以字节为单位</span><br><span class="hljs-comment">// 是：抛出异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSizeException</span>(<span class="hljs-string">&quot;不允许上传超过&quot;</span> + (AVATAR_MAX_SIZE / <span class="hljs-number">1024</span>) + <span class="hljs-string">&quot;KB的头像文件&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 判断上传的文件类型是否超出限制</span><br><span class="hljs-type">String</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> file.getContentType();<br><span class="hljs-comment">// public boolean list.contains(Object o)：当前列表若包含某元素，返回结果为true；若不包含该元素，返回结果为false。</span><br><span class="hljs-keyword">if</span> (!AVATAR_TYPES.contains(contentType)) &#123;<br><span class="hljs-comment">// 是：抛出异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileTypeException</span>(<span class="hljs-string">&quot;不支持使用该类型的文件作为头像，允许的文件类型：\n&quot;</span> + AVATAR_TYPES);<br>&#125;<br><br><span class="hljs-comment">// 获取当前项目的绝对磁盘路径</span><br><span class="hljs-type">String</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> session.getServletContext().getRealPath(<span class="hljs-string">&quot;upload&quot;</span>);<br><span class="hljs-comment">// 保存头像文件的文件夹</span><br><span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parent);<br><span class="hljs-keyword">if</span> (!dir.exists()) &#123;<br>dir.mkdirs();<br>&#125;<br><br><span class="hljs-comment">// 保存的头像文件的文件名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br><span class="hljs-type">int</span> <span class="hljs-variable">beginIndex</span> <span class="hljs-operator">=</span> originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>);<br><span class="hljs-keyword">if</span> (beginIndex &gt; <span class="hljs-number">0</span>) &#123;<br>suffix = originalFilename.substring(beginIndex);<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + suffix;<br><br><span class="hljs-comment">// 创建文件对象，表示保存的头像文件</span><br><span class="hljs-type">File</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir, filename);<br><span class="hljs-comment">// 执行保存头像文件</span><br><span class="hljs-keyword">try</span> &#123;<br>file.transferTo(dest);<br>&#125; <span class="hljs-keyword">catch</span> (IllegalStateException e) &#123;<br><span class="hljs-comment">// 抛出异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileStateException</span>(<span class="hljs-string">&quot;文件状态异常，可能文件已被移动或删除&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-comment">// 抛出异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileUploadIOException</span>(<span class="hljs-string">&quot;上传文件时读写错误，请稍后重尝试&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 头像路径</span><br><span class="hljs-type">String</span> <span class="hljs-variable">avatar</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/upload/&quot;</span> + filename;<br><span class="hljs-comment">// 从Session中获取uid和username</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUsernameFromSession(session);<br><span class="hljs-comment">// 将头像写入到数据库中</span><br>userService.changeAvatar(uid, username, avatar);<br><br><span class="hljs-comment">// 返回成功头像路径</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;String&gt;(OK, avatar);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-用户-上传头像-设置上传文件大小"><a href="#4-用户-上传头像-设置上传文件大小" class="headerlink" title="4 用户-上传头像-设置上传文件大小"></a>4 用户-上传头像-设置上传文件大小</h3><p>1.SpringBoot中默认MultipartResolver的最大文件大小值为1M。如果上传的文件的大小超过1M，会抛FileSizeLimitExceededException异常。</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-bRrqkhoI-1650868471285)(img&#x2F;2.png)]</p><p>2.如果需要调整上传的限制值，直接在启动类中添加getMultipartConfigElement()方法，并且在启动类之前添加@Configuration注解。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store;<br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.MultipartConfigFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.util.unit.DataSize;<br><span class="hljs-keyword">import</span> org.springframework.util.unit.DataUnit;<br><span class="hljs-keyword">import</span> javax.servlet.MultipartConfigElement;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.cy.store.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StoreApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(StoreApplication.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MultipartConfigElement <span class="hljs-title function_">getMultipartConfigElement</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MultipartConfigFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MultipartConfigFactory</span>();<br>        <span class="hljs-comment">// DataSize dataSize = DataSize.ofMegabytes(10);</span><br>        <span class="hljs-comment">// 设置文件最大10M，DataUnit提供5中类型B,KB,MB,GB,TB</span><br>        factory.setMaxFileSize(DataSize.of(<span class="hljs-number">10</span>, DataUnit.MEGABYTES));<br>        factory.setMaxRequestSize(DataSize.of(<span class="hljs-number">10</span>, DataUnit.MEGABYTES));<br>        <span class="hljs-comment">// 设置总上传数据总大小10M</span><br>        <span class="hljs-keyword">return</span> factory.createMultipartConfig();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3.除了以上编写方法配置上传的上限值以外，还可以通过在application.properties或application.yml中添加配置来实现。</p><p>(1) 低版本：1.X</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">spring.http.multipart.max-file-size</span>=<span class="hljs-string">10MB</span><br><span class="hljs-attr">spring.http.multipart.max-request-size</span>=<span class="hljs-string">10MB</span><br></code></pre></div></td></tr></table></figure><p>(2) 高版本：2.X</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#方式1</span><br><span class="hljs-attr">spring.servlet.multipart.max-file-size</span>=<span class="hljs-string">10MB</span><br><span class="hljs-attr">spring.servlet.multipart.max-request-size</span>=<span class="hljs-string">10MB</span><br><span class="hljs-comment">#方式2</span><br><span class="hljs-attr">spring.servlet.multipart.maxFileSize</span>=<span class="hljs-string">10MB</span><br><span class="hljs-attr">spring.servlet.multipart.maxRequestSize</span>=<span class="hljs-string">10MB</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swagger配置</title>
    <link href="/2022/05/06/Swagger%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/05/06/Swagger%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>一款致力于解决接口规范化，标准化，文档化的开源库<br>一款可以根据restful风格生成的接口开发文档，并且支持做测试的一款中间软件</p></blockquote><h2 id="SpringBoot项目嵌入Swagger"><a href="#SpringBoot项目嵌入Swagger" class="headerlink" title="SpringBoot项目嵌入Swagger"></a>SpringBoot项目嵌入Swagger</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="创建配置Swagger配置类"><a href="#创建配置Swagger配置类" class="headerlink" title="创建配置Swagger配置类"></a>创建配置Swagger配置类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br><br>    <span class="hljs-comment">//配置Swagger2的Bean实例</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo())<br>                <span class="hljs-comment">//是否启用Swagger</span><br>                .enable(<span class="hljs-literal">true</span>)<br>                .select()<br>                <span class="hljs-comment">//RequestHandlerSelectors配置要扫描接口的方式</span><br>                <span class="hljs-comment">//basePackage指定要扫描的包</span><br>                <span class="hljs-comment">//any()扫描全部</span><br>                <span class="hljs-comment">//none()不扫描</span><br>                <span class="hljs-comment">//withClassAnnotation:扫描类上的注解</span><br>                <span class="hljs-comment">//withMethodAnnotation:扫描方法上的注解</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.bigcat.admin.cnotroller&quot;</span>))<br>                <span class="hljs-comment">//path()过滤路径</span><br>                .paths(PathSelectors.ant(<span class="hljs-string">&quot;/bigcat/**&quot;</span>))<br>                .build();<br>    &#125;<br><br>    <span class="hljs-comment">//配置Swagger信息 apiInfo</span><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfo</span>(<span class="hljs-string">&quot;Api Documentation标题&quot;</span>,<br>                <span class="hljs-string">&quot;Api Documentation描述&quot;</span>,<br>                <span class="hljs-string">&quot;1.0&quot;</span>,<br>                <span class="hljs-string">&quot;https://blog.kuangstudy.com/&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;YiMing&quot;</span>,<span class="hljs-string">&quot;https://blog.kuangstudy.com&quot;</span>,<span class="hljs-string">&quot;248099287@qq.com&quot;</span>),<br>                <span class="hljs-string">&quot;Apache 2.0&quot;</span>,<br>                <span class="hljs-string">&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>());<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="关于高版本SpringBoot整合Swagger2出现Error的解决方案"><a href="#关于高版本SpringBoot整合Swagger2出现Error的解决方案" class="headerlink" title="关于高版本SpringBoot整合Swagger2出现Error的解决方案"></a>关于高版本SpringBoot整合Swagger2出现Error的解决方案</h2><h3 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h3><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">pathmatch:</span><br>      <span class="hljs-attr">matching-strategy:</span> <span class="hljs-string">ANT_PATH_MATCHER</span><br></code></pre></div></td></tr></table></figure><h3 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h3><p>配置WebMvcConfigure.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发现如果继承了WebMvcConfigurationSupport，则在yml中配置的相关内容会失效。 需要重新指定静态资源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/**&quot;</span>).addResourceLocations(<br>                <span class="hljs-string">&quot;classpath:/static/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;swagger-ui.html&quot;</span>, <span class="hljs-string">&quot;doc.html&quot;</span>).addResourceLocations(<br>                <span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>).addResourceLocations(<br>                <span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br>        <span class="hljs-built_in">super</span>.addResourceHandlers(registry);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>接口文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
