{
    "version": "https://jsonfeed.org/version/1",
    "title": "不利索の鸣 • All posts by \"mybatisplus\" tag",
    "description": "欢迎来到鸣崽的空间，这里不仅有学习，还有生活",
    "home_page_url": "https://prehitting.gitee.io",
    "items": [
        {
            "id": "https://prehitting.gitee.io/2022/06/04/mybatisplus%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85/",
            "url": "https://prehitting.gitee.io/2022/06/04/mybatisplus%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85/",
            "title": "mybatisplus公共字段自动填充",
            "date_published": "2022-06-04T09:16:23.000Z",
            "content_html": "<h2 id=\"需求分析\"><a class=\"markdownIt-Anchor\" href=\"#需求分析\">#</a> 需求分析</h2>\n<p>在开发中，表结构中往往存在相同的字段（如 createUser，updateUser，createTime，updateTime 等）</p>\n<p>每次接收到 http 请求后需要手动填充这些字段，非常非常麻烦</p>\n<p>于是，使用 mybaitsPlus 中字段自动填充策略简化开发</p>\n<h2 id=\"使用方法\"><a class=\"markdownIt-Anchor\" href=\"#使用方法\">#</a> 使用方法</h2>\n<p><strong>1. 在实体类上加注解 @TableField</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@TableField(fill = FieldFill.INSERT)</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> LocalDateTime createTime;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> LocalDateTime updateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@TableField(fill = FieldFill.INSERT)</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> Long createUser;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> Long updateUser;</span><br></pre></td></tr></table></figure>\n<p><strong>2.</strong> 构建实现 MetaObjectHandler 的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 元数据对象处理器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyMetaObjectHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MetaObjectHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入操作时自动填充</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertFill</span><span class=\"params\">(MetaObject metaObject)</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更新时自动填充</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateFill</span><span class=\"params\">(MetaObject metaObject)</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其他类中执行 update，insert 等方法前会先将数据交由这个类处理（可以理解为 AOP）</p>\n<h3 id=\"如何将数据传递给自定义的处理器\"><a class=\"markdownIt-Anchor\" href=\"#如何将数据传递给自定义的处理器\">#</a> 如何将数据传递给自定义的处理器</h3>\n<p><mark>通过 ThreadLocal</mark></p>\n<p>一个用户通过浏览器访问数据，使用的是一个线程</p>\n<p><strong>什么是 ThreadLocal</strong></p>\n<blockquote>\n<p>它并不是一个 Thread，而是 Thread 的局部变量，当使用 ThreadLocal 维护变量时，ThreadLocal 为每个使用该变量的线程提供单独的<strong>变量副本</strong>，所以每个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。ThreadLocal 为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问。</p>\n</blockquote>\n<p><strong>ThreadLocal 常用方法</strong></p>\n<ul>\n<li>void set (T value) 设置当前线程局部变量的值</li>\n<li>T get（） 返回当前线程所对应的线程局部变量的值</li>\n</ul>\n<p><strong>因此</strong></p>\n<blockquote>\n<p>我们可以在 LoginCheckFilter 的 doFilter 方法中获取当前登录用户 id, 并调用 ThreadLocal 的 set 方法来设置当前线程的线程局部变量的值 (用户 id), 然后在 MyMetaObjectHandler 的 updateFill 方法中调用 ThreadLocal 的 get 方法来获得当前线程所对应的线程局部变量的值 (用户 id)。</p>\n</blockquote>\n<h2 id=\"实现步骤\"><a class=\"markdownIt-Anchor\" href=\"#实现步骤\">#</a> 实现步骤</h2>\n<ol>\n<li>编写 BaseContext 工具类，基于 ThreadLocal 封装的工具类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 基于ThreadLocal封装工具类，用户保存和获取当前登录用户id</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseContext</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCurrentId</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        threadLocal.set(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Long <span class=\"title function_\">getCurrentId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> threadLocal.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 LoginCheckFilter 的 doFilter, 方法中调用 BaseContext 来设置当前登录用户的 id</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//3. 判断登录状态，若已登录则放行</span></span><br><span class=\"line\"><span class=\"type\">Long</span> <span class=\"variable\">empId</span> <span class=\"operator\">=</span> (Long) request.getSession().getAttribute(<span class=\"string\">&quot;employee&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (empId!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>,empId);</span><br><span class=\"line\">    BaseContext.setCurrentId(empId);</span><br><span class=\"line\">    filterChain.doFilter(request,response);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 MyMetaObjectHandler 的方法中调用 BaseContext 获取登录用户的 id</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 元数据对象处理器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyMetaObjectHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MetaObjectHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入操作时自动填充</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertFill</span><span class=\"params\">(MetaObject metaObject)</span> &#123;</span><br><span class=\"line\">        metaObject.setValue(<span class=\"string\">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class=\"line\">        metaObject.setValue(<span class=\"string\">&quot;updateTime&quot;</span>,LocalDateTime.now());</span><br><span class=\"line\">        metaObject.setValue(<span class=\"string\">&quot;createUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class=\"line\">        metaObject.setValue(<span class=\"string\">&quot;updateUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更新时自动填充</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateFill</span><span class=\"params\">(MetaObject metaObject)</span> &#123;</span><br><span class=\"line\">        metaObject.setValue(<span class=\"string\">&quot;updateTime&quot;</span>,LocalDateTime.now());</span><br><span class=\"line\">        metaObject.setValue(<span class=\"string\">&quot;updateUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "mybatisPlus"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/31/MybatisPlus%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/",
            "url": "https://prehitting.gitee.io/2022/05/31/MybatisPlus%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/",
            "title": "MybatisPlus分页插件配置",
            "date_published": "2022-05-31T10:54:38.000Z",
            "content_html": "<p><strong>创建 MybatisPlus 配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 配置MP分页插件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBatisPlusConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MybatisPlusInterceptor <span class=\"title function_\">mybatisPlusInterceptor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MybatisPlusInterceptor</span> <span class=\"variable\">interceptor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MybatisPlusInterceptor</span>();</span><br><span class=\"line\">        interceptor.addInnerInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">PaginationInnerInterceptor</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> interceptor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>service 层中增加方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//其中page是指定查询页数，pageSize是总页数，name是根据name模糊查询指定数据</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> Page&lt;UserEntity&gt; <span class=\"title function_\">getPage</span><span class=\"params\">(<span class=\"type\">int</span> page,<span class=\"type\">int</span> pageSize,String name)</span> &#123;</span><br><span class=\"line\">       Page&lt;UserEntity&gt; pageInfo = <span class=\"keyword\">new</span> <span class=\"title class_\">Page</span>&lt;&gt;(page,pageSize);</span><br><span class=\"line\">       LambdaQueryWrapper&lt;Employee&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">       wrapper.like(StringUtils.isNotEmpty(name),Employee::getName,name);</span><br><span class=\"line\">       page(pageInfo,wrapper);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> pageInfo;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Controller 层中增加方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 员工信息分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> page 查询页</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pageSize 总页数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name 条件查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Page</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;分页查询&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/page&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R&lt;Page&lt;Employee&gt;&gt; <span class=\"title function_\">page</span><span class=\"params\">(<span class=\"meta\">@ApiParam(&quot;查询页&quot;)</span> <span class=\"type\">int</span> page,</span></span><br><span class=\"line\"><span class=\"params\">                                  <span class=\"meta\">@ApiParam(&quot;总页数&quot;)</span> <span class=\"type\">int</span> pageSize,</span></span><br><span class=\"line\"><span class=\"params\">                                  <span class=\"meta\">@ApiParam(&quot;条件查询&quot;)</span> String name)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;page = &#123;&#125;,pageSize = &#123;&#125;,name = &#123;&#125;&quot;</span>,page,pageSize,name);</span><br><span class=\"line\"></span><br><span class=\"line\">        Page&lt;<span class=\"type\">U</span> <span class=\"variable\">pageInfo</span> <span class=\"operator\">=</span> employeeService.getPage(page, pageSize, name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.success(pageInfo);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "MybatisPlus"
            ]
        }
    ]
}