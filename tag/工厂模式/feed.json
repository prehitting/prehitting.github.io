{
    "version": "https://jsonfeed.org/version/1",
    "title": "不利索の鸣 • All posts by \"工厂模式\" tag",
    "description": "欢迎来到鸣崽的空间，这里不仅有学习，还有生活",
    "home_page_url": "https://prehitting.gitee.io",
    "items": [
        {
            "id": "https://prehitting.gitee.io/2022/05/08/she-ji-mo-shi/gong-han-mo-shi/",
            "url": "https://prehitting.gitee.io/2022/05/08/she-ji-mo-shi/gong-han-mo-shi/",
            "title": "工厂模式",
            "date_published": "2022-05-08T02:41:45.000Z",
            "content_html": "<h2 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\">#</a> 概述</h2>\n<ul>\n<li>作用\n<ul>\n<li>实现了创建者和调用者的分离</li>\n<li>详细分类\n<ul>\n<li>简单工厂模式</li>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>OOP 满足\n<ul>\n<li>开闭原则</li>\n<li>依赖倒转</li>\n<li>迪米特</li>\n</ul>\n</li>\n<li>核心本质\n<ul>\n<li>实例化对象不使用 new，用工厂方法代替</li>\n<li>将选择实现类，创建对象统一管理和控制，从而将调用者跟实现类解耦</li>\n</ul>\n</li>\n<li>三种模式\n<ul>\n<li>简单（静态）工厂模式\n<ul>\n<li>用来生产同一等级结构中的任意产品（对于增加的新的产品，需要覆盖已有的代码）</li>\n</ul>\n</li>\n<li>工厂方法模式\n<ul>\n<li>用来生产同一等级结构中的固定产品（支持增加任意产品）</li>\n</ul>\n</li>\n<li>抽象工厂模式\n<ul>\n<li>围绕一个超级工厂创建其他工厂，该超级工厂又称为其他工厂的工厂</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"简单工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#简单工厂模式\">#</a> 简单工厂模式</h3>\n<p>代码背景：有一个 consumer 前来买车</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TeSiLa</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TeSiLa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WuLing</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WuLing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CarFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WuLing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WuLing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TeSiLa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TeSiLa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Car</span> car <span class=\"token operator\">=</span> <span class=\"token class-name\">CarFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WuLing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        car<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"模式组成\"><a class=\"markdownIt-Anchor\" href=\"#模式组成\">#</a> 模式组成</h4>\n<table>\n<thead>\n<tr>\n<th>组成（角色）</th>\n<th>关系</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>抽象产品</td>\n<td>具体产品的父类</td>\n<td>描述产品的公共接口</td>\n</tr>\n<tr>\n<td>具体产品</td>\n<td>抽象产品的子类；工厂类创建的目标类</td>\n<td>描述生产的具体产品</td>\n</tr>\n<tr>\n<td>工厂（Creator）</td>\n<td>被外界调用</td>\n<td>根据传入不同参数从而创建不同具体产品类的实例</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"uml类图\"><a class=\"markdownIt-Anchor\" href=\"#uml类图\">#</a> UML 类图</h4>\n<p><img src=\"/2022/05/08/she-ji-mo-shi/gong-han-mo-shi/image-20220508111631047.png\" alt=\"image-20220508111631047\"></p>\n<h4 id=\"优点\"><a class=\"markdownIt-Anchor\" href=\"#优点\">#</a> 优点</h4>\n<ul>\n<li>将创建实例的工作和使用实例的工作分开，使用者不必关心对象如何创建，实现解耦</li>\n<li>将初始化实例时的工作放到工厂进行，使代码更易于维护，更符合面向对象的原则 &amp; 面向接口编程，而不是面向实现编程</li>\n</ul>\n<h4 id=\"缺点\"><a class=\"markdownIt-Anchor\" href=\"#缺点\">#</a> 缺点：</h4>\n<p>​\t如果增加不同品牌的车，需要在工厂中修改或添加方法，不满足 OOP 开闭原则</p>\n<ul>\n<li>工厂类集中了所有实例（产品）的创建逻辑，一旦这个工厂不能正常工作，整个系统都会受到影响</li>\n<li>违背 “开放 - 关闭原则”，一旦添加新产品就不得不修改工厂类的逻辑，这样就会造成工厂逻辑过于复杂</li>\n<li>简单工厂模式由于使用了静态工厂方法，静态方法不能被继承和重写，会造成工厂角色无法形成基于继承的等级结构</li>\n</ul>\n<h4 id=\"应用场景\"><a class=\"markdownIt-Anchor\" href=\"#应用场景\">#</a> 应用场景</h4>\n<ul>\n<li>客户如果只知道传入工厂类的参数，对于如何创建对象的逻辑不关心时</li>\n<li>当工厂类负责创建的对象（具体产品）比较少时</li>\n</ul>\n<h2 id=\"方法工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#方法工厂模式\">#</a> 方法工厂模式</h2>\n<p>概述：在简单工厂模式上改进，给每种车增加一个工厂类</p>\n<p>实现：</p>\n<p>Car 类，TeSiLa 类，WuLing 类同上</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 工厂方法模式\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CarFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Car</span> <span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TeSiLaFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CarFactory</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TeSiLa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Car</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WuLingFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"模式组成-2\"><a class=\"markdownIt-Anchor\" href=\"#模式组成-2\">#</a> 模式组成</h3>\n<table>\n<thead>\n<tr>\n<th>主要角色</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>抽象工厂</td>\n<td>提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法 newProduct () 来创建产品</td>\n</tr>\n<tr>\n<td>具体工厂</td>\n<td>主要是实现抽象工厂中的抽象方法，完成具体产品的创建</td>\n</tr>\n<tr>\n<td>抽象产品</td>\n<td>定义了产品的规范，描述了产品的主要特性和功能。</td>\n</tr>\n<tr>\n<td>具体产品</td>\n<td>实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"uml类图-2\"><a class=\"markdownIt-Anchor\" href=\"#uml类图-2\">#</a> UML 类图</h3>\n<p><img src=\"/2022/05/08/she-ji-mo-shi/gong-han-mo-shi/image-20220508113730740.png\" alt=\"image-20220508113730740\"></p>\n<blockquote>\n<p>简单工厂模式违背了开闭原则，而工厂方法模式是对简单工厂模式的进一步抽象化，其好处是可以使系统在不修改原来代码的情况下引进新的产品，即满足开闭原则</p>\n</blockquote>\n<h3 id=\"优点-2\"><a class=\"markdownIt-Anchor\" href=\"#优点-2\">#</a> 优点</h3>\n<ul>\n<li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程。</li>\n<li>灵活性增强，对于新产品的创建，只需多写一个相应的工厂类。</li>\n<li>典型的解耦框架。高层模块只需要知道产品的抽象类，无须关心其他实现类，满足迪米特法则、依赖倒置原则和里氏替换原则。</li>\n</ul>\n<h3 id=\"缺点-2\"><a class=\"markdownIt-Anchor\" href=\"#缺点-2\">#</a> 缺点</h3>\n<ul>\n<li>类的个数容易过多，增加复杂度</li>\n<li>增加了系统的抽象性和理解难度</li>\n<li>抽象产品只能生产一种产品，此弊端可使用<a href=\"http://c.biancheng.net/view/1351.html\">抽象工厂模式</a>解决。</li>\n</ul>\n<h3 id=\"应用场景-2\"><a class=\"markdownIt-Anchor\" href=\"#应用场景-2\">#</a> 应用场景</h3>\n<ul>\n<li>客户只知道创建产品的工厂名，而不知道具体的产品名。</li>\n<li>创建对象的任务由多个具体子工厂中的某一个完成，而抽象工厂只提供创建产品的接口。</li>\n<li>客户不关心创建产品的细节，只关心产品的品牌</li>\n</ul>\n<h2 id=\"抽象工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#抽象工厂模式\">#</a> 抽象工厂模式</h2>\n<p>代码背景：产品 Phone，Router 交由小米工厂生产</p>\n<p>首先定义产品接口以及小米产品实现类</p>\n<p>然后定义抽象工厂</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProductFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Phone</span> <span class=\"token function\">getPhoneProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Router</span> <span class=\"token function\">getRouterProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>小米工厂需要实现该抽象工厂</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">XiaoMiFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ProductFactory</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Phone</span> <span class=\"token function\">getPhoneProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XiaoMiPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Router</span> <span class=\"token function\">getRouterProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XiaoMiRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"概述-2\"><a class=\"markdownIt-Anchor\" href=\"#概述-2\">#</a> 概述</h3>\n<h4 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h4>\n<p>提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们具体的类</p>\n<h4 id=\"适用场景\"><a class=\"markdownIt-Anchor\" href=\"#适用场景\">#</a> 适用场景</h4>\n<ul>\n<li>\n<h3 id=\"客户端应用层不依赖于产品实例如何被创建实现等细节\"><a class=\"markdownIt-Anchor\" href=\"#客户端应用层不依赖于产品实例如何被创建实现等细节\">#</a> 客户端（应用层）不依赖于产品实例如何被创建，实现等细节</h3>\n</li>\n<li>\n<p>强调一系列产品相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码</p>\n</li>\n<li>\n<p>提供一个产品类的库，所有的产品以同样的接口出现，从而使客户不依赖于具体的实现</p>\n</li>\n</ul>\n<h4 id=\"优点缺点\"><a class=\"markdownIt-Anchor\" href=\"#优点缺点\">#</a> 优点 &amp; 缺点</h4>\n<ul>\n<li>\n<h4 id=\"优点-3\"><a class=\"markdownIt-Anchor\" href=\"#优点-3\">#</a> 优点</h4>\n<ul>\n<li>具体产品在应用层的代码隔离，无需关心创建的细节</li>\n<li>将一个系列的产品统一到一起创建</li>\n</ul>\n</li>\n<li>\n<p>缺点</p>\n<ul>\n<li>规定了所有可能被创建的产品集合，产品簇中扩展新的产品困难</li>\n<li>增加了系统的抽象性和理解难度</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "设计模式",
                "工厂模式"
            ]
        }
    ]
}