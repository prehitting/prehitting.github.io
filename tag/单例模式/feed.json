{
    "version": "https://jsonfeed.org/version/1",
    "title": "不利索の鸣 • All posts by \"单例模式\" tag",
    "description": "欢迎来到鸣崽的空间，这里不仅有学习，还有生活",
    "home_page_url": "https://prehitting.gitee.io",
    "items": [
        {
            "id": "https://prehitting.gitee.io/2022/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",
            "url": "https://prehitting.gitee.io/2022/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",
            "title": "单例模式",
            "date_published": "2022-05-06T15:05:11.000Z",
            "content_html": "<h2 id=\"饿汉式单例模式\"><a class=\"markdownIt-Anchor\" href=\"#饿汉式单例模式\">#</a> 饿汉式单例模式</h2>\n<p>在程序开始时加载所有对象</p>\n<p>问题：可能只需要部分对象，造成空间浪费</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 饿汉式单例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HungryMan</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//提前加载对象</span></span><br><span class=\"line\">    <span class=\"comment\">//可能造成空间浪费</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">byte</span>[] bytes0=<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">byte</span>[] bytes1=<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">byte</span>[] bytes2=<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">byte</span>[] bytes3=<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">HungryMan</span> <span class=\"variable\">HUNGRY</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HungryMan</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HungryMan <span class=\"title function_\">getHungryMan</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HUNGRY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"懒汉式单例模式\"><a class=\"markdownIt-Anchor\" href=\"#懒汉式单例模式\">#</a> 懒汉式单例模式</h2>\n<h3 id=\"非并发下\"><a class=\"markdownIt-Anchor\" href=\"#非并发下\">#</a> 非并发下</h3>\n<p>在需要使用该对象时创建对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉式单例模式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LazyMan</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LazyMan</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LazyMan lazyMan;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//需要使用时创建</span></span><br><span class=\"line\">    <span class=\"comment\">//以下代码会在并发模式下出现问题，出现多个实例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazyMan <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            lazyMan=<span class=\"keyword\">new</span> <span class=\"title class_\">LazyMan</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazyMan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>存在问题</strong></p>\n<blockquote>\n<p>当 A，B 并发时，A,B 同时检测到  lazyMan 为 null，并分别创建对象</p>\n</blockquote>\n<h3 id=\"使用静态内部类\"><a class=\"markdownIt-Anchor\" href=\"#使用静态内部类\">#</a> 使用静态内部类</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Holder</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Holder</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Holder <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> InnerClass.HOLDER;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InnerClass</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Holder</span> <span class=\"variable\">HOLDER</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Holder</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"双重检测锁模式处理并发问题\"><a class=\"markdownIt-Anchor\" href=\"#双重检测锁模式处理并发问题\">#</a> 双重检测锁模式处理并发问题</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉式单例模式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LazyMan</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LazyMan</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> LazyMan lazyMan;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//双重检测锁模式，懒汉式单例，DCL懒汉式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazyMan <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (LazyMan.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    lazyMan=<span class=\"keyword\">new</span> <span class=\"title class_\">LazyMan</span>();<span class=\"comment\">//但这不是一个原子性操作</span></span><br><span class=\"line\">                    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                     * 1. 分配内存空间</span></span><br><span class=\"line\"><span class=\"comment\">                     * 2. 执行构造方法，初始化对象</span></span><br><span class=\"line\"><span class=\"comment\">                     * 3. 把对象指向这个空间</span></span><br><span class=\"line\"><span class=\"comment\">                     * 底层执行顺序会被打乱(指令重排)</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazyMan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用反射破坏单例模式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">LazyMan</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> LazyMan.getInstance();</span><br><span class=\"line\">        Constructor&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">LazyMan</span>&gt; declaredConstructor = instance.getClass().getDeclaredConstructor(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        declaredConstructor.setAccessible(<span class=\"literal\">true</span>);<span class=\"comment\">//无视私有构造器</span></span><br><span class=\"line\">        <span class=\"type\">LazyMan</span> <span class=\"variable\">instance2</span> <span class=\"operator\">=</span> declaredConstructor.newInstance();</span><br><span class=\"line\">        System.out.println(instance2);</span><br><span class=\"line\">        System.out.println(instance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>存在问题</strong></p>\n<ol>\n<li>lazyMan=new LazyMan (); 不是一个原子性操作\n<ul>\n<li>执行过程：\n<ol>\n<li>分配内存空间</li>\n<li>执行构造方法</li>\n<li>把对象指向这个空间</li>\n</ol>\n</li>\n<li>123 是正常执行流程，但底层执行时会出现指令重排（执行顺序被打乱）</li>\n</ul>\n</li>\n<li>可以通过反射破坏单例模式</li>\n</ol>\n<h3 id=\"优化\"><a class=\"markdownIt-Anchor\" href=\"#优化\">#</a> 优化</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span><span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LazyMan</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (LazyMan.class)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag == <span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">                flag=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;实例已被创建&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><font color=\"red\">但是！！！</font></p>\n<p>依然可以通过反射破坏 flag，从而破坏单例模式</p>\n<h2 id=\"枚举单例\"><a class=\"markdownIt-Anchor\" href=\"#枚举单例\">#</a> 枚举单例</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">EnumSingle</span> &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    EnumSingle()&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> EnumSingle <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        EnumSingle instance1=EnumSingle.INSTANCE;</span><br><span class=\"line\">        Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.class.getDeclaredConstructor(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        declaredConstructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        EnumSingle instance2=declaredConstructor.newInstance();</span><br><span class=\"line\">        System.out.println(instance2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>枚举本身也是一个 Class</p>\n<p>枚举类没有空参构造器</p>\n<p>反射不能破坏枚举的单例模式</p>\n<p>通过 JAD 编译枚举类</p>\n<p><img src=\"https://s2.loli.net/2022/05/07/87tNqOGwml3sby1.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li>优点 ：\n<ul>\n<li>只生成一个实例减少系统性能开销</li>\n<li>可以在系统设置全局的访问点，优化共享资源访问</li>\n</ul>\n</li>\n<li>常见实现方式\n<ul>\n<li>饿汉式 （线程安全，调用效率高，不能延迟加载）</li>\n<li>懒汉式（线程安全，调用效率不高，可以延迟加载）</li>\n<li>DCL 懒汉式（由于 JVM 底层内部模型原因，偶尔会出现问题，不建议使用）</li>\n<li>饿汉式改进：静态内部类（线程安全，调用效率高，延迟加载）</li>\n<li>枚举单例（线程安全，调用效率高，不能延迟加载）</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "设计模式",
                "单例模式"
            ]
        }
    ]
}