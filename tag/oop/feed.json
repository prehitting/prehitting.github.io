{
    "version": "https://jsonfeed.org/version/1",
    "title": "不利索の鸣 • All posts by \"oop\" tag",
    "description": "欢迎来到鸣崽的空间，这里不仅有学习，还有生活",
    "home_page_url": "https://prehitting.gitee.io",
    "items": [
        {
            "id": "https://prehitting.gitee.io/2022/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/OOP%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/",
            "url": "https://prehitting.gitee.io/2022/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/OOP%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/",
            "title": "OOP七大原则",
            "date_published": "2022-05-06T14:12:48.000Z",
            "content_html": "<blockquote>\n<p>PBP/OBP/OOP 的特征 PBP（基于过程）：函数、域与生命周期的概念、函数重载、函数模板、异常处理、范型算法。 OBP（基于对象）：类（接口）、类的生命周期、类模板。 OOP（面向对象）：继承、多态。 三个概念步步深入，后者包括前者。其目的是实现软件开发的可重用性，解决软件危机（软件工程思想未引入之前）。 OOP 不可避免设计原则的发展与设计模式的产生，这是 OOP 独具的特征决定的（正如前面所说，特征的产生是由其产生目的决定的）。</p>\n</blockquote>\n<blockquote>\n<p>OOP 的方法论：高内聚，低耦合，易复用</p>\n</blockquote>\n<h2 id=\"oop七大原则\"><a class=\"markdownIt-Anchor\" href=\"#oop七大原则\">#</a> OOP 七大原则</h2>\n<h3 id=\"开闭原则ocp\"><a class=\"markdownIt-Anchor\" href=\"#开闭原则ocp\">#</a> 开闭原则 (OCP)</h3>\n<blockquote>\n<p>对扩展开放，对修改关闭</p>\n</blockquote>\n<p>根据开闭原则，在设计一个软件系统模块（类，方法）的时候，应该可以在不修改原有的模块（修改关闭）的基础上，能扩展其功能（扩展开放）。</p>\n<p><strong>扩展开放</strong>：某模块的功能是可扩展的，则该模块是扩展开放的。软件系统的功能上的可扩展性要求模块是扩展开放的。</p>\n<p><strong>修改关闭</strong>：某模块被其他模块调用，如果该模块的源代码不允许修改，则该模块修改关闭的。软件系统的功能上的稳定性，持续性要求模块是修改关闭的。</p>\n<h3 id=\"里氏替换原则lsp\"><a class=\"markdownIt-Anchor\" href=\"#里氏替换原则lsp\">#</a> 里氏替换原则 (LSP)</h3>\n<blockquote>\n<p>所有引用基类的地方必须能透明地使用其子类的对象</p>\n</blockquote>\n<blockquote>\n<p>里式替换原则的引申意义：子类可以扩展父类的功能，但不能改变父类原有的功能。</p>\n</blockquote>\n<p>​\t也就是说，只有满足以下 2 个条件的 OO 设计才可被认为是满足了 LSP 原则：</p>\n<p>​\t1. 不应该在代码中出现 if/else 之类对派生类类型进行判断的条件。</p>\n<p>​\t2. 派生类应当可以替换基类并出现在基类能够出现的任何地方，或者说如果我们把代码中使用基类的地方用它的派生类所代替，代码还能正常工作。</p>\n<h3 id=\"依赖倒置原则dip\"><a class=\"markdownIt-Anchor\" href=\"#依赖倒置原则dip\">#</a> 依赖倒置原则 (DIP)</h3>\n<blockquote>\n<p>高层模块不应该依赖底层模块，它们都应该依赖抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</p>\n</blockquote>\n<p>面向接口编程，不要面向实现编程</p>\n<h3 id=\"单一职责原则\"><a class=\"markdownIt-Anchor\" href=\"#单一职责原则\">#</a> 单一职责原则</h3>\n<blockquote>\n<p>控制类的粒度大小，将对象解耦，提高其内聚性</p>\n</blockquote>\n<p>单一职责原则：<strong><em>一个对象应该只包含单一的职责，并且该职责被完整地封装在一个类中</em>。</strong><br>\n单一职责原则的另一种定义方式：<strong><em>就一个类而言，应该仅有一个引起它变化的原因</em>。</strong></p>\n<h3 id=\"接口隔离原则isp\"><a class=\"markdownIt-Anchor\" href=\"#接口隔离原则isp\">#</a> 接口隔离原则（ISP）</h3>\n<blockquote>\n<p><strong>使用多个专门的接口，而不使用单一 的总接口，即客户端不应该依赖那些它不需要的接口。</strong></p>\n</blockquote>\n<p>​\t换句话说，使用多个专门的接口比使用单一的总接口总要好。</p>\n<p>它包含了 2 层意思：</p>\n<ol>\n<li>\n<p>接口的设计原则：接口的设计应该遵循最小接口原则，不要把用户不使用的方法塞进同一个接口里。如果一个接口的方法没有被使用到，则说明该接口过胖，应该将其分割成几个功能专一的接口。</p>\n</li>\n<li>\n<p>接口的依赖（继承）原则：如果一个接口 a 继承另一个接口 b，则接口 a 相当于继承了接口 b 的方法，那么继承了接口 b 后的接口 a 也应该遵循上述原则：不应该包含用户不使用的方法。 反之，则说明接口 a 被 b 给污染了，应该重新设计它们的关系。</p>\n</li>\n</ol>\n<p>​\t根据接口隔离原则，当一个接口太大时，我们需要将它分割成一些更细小的接口，使用该接 口的客户端仅需知道与之相关的方法即可。</p>\n<h3 id=\"迪米特法则lod\"><a class=\"markdownIt-Anchor\" href=\"#迪米特法则lod\">#</a> 迪米特法则 (LoD)</h3>\n<p>也叫<font color=\"red\">最少知道原则</font></p>\n<blockquote>\n<p>只与直接的朋友交谈，不和 “陌生人 “说话</p>\n</blockquote>\n<p>​\t迪米特法则可以简单说成：talk only to your immediate friends。 对于 OOD 来说，又被解释为下面几种方式：一个软件实体应当尽可能少的与其他实体发生相互作用。每一个软件单位对其他的单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位。</p>\n<p>​\t迪米特法则的初衷在于降低类之间的耦合。由于每个类尽量减少对其他类的依赖，因此，很容易使得系统的功能模块功能独立，相互之间不存在（或很少有）依赖关系。</p>\n<p>​\t迪米特法则不希望类之间建立直接的联系。如果真的有需要建立联系，也希望能通过它的友元类来转达。因此，应用迪米特法则有可能造成的一个后果就是：系统中存在大量的中介类，这些类之所以存在完全是为了传递类之间的相互调用关系 —— 这在一定程度上增加了系统的复杂度。</p>\n<p>​\t如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中的一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。</p>\n<h4 id=\"lod法则缺点\"><a class=\"markdownIt-Anchor\" href=\"#lod法则缺点\">#</a> LoD 法则缺点</h4>\n<p>​\t在系统里造出大量的小方法，这些方法仅仅是传递间接的调用，与系统的业务逻辑无关。</p>\n<p>​\t遵循类之间的迪米特法则会是一个系统的局部设计简化，因为每一个局部都不会和远距离的对象有直接的关联。但是，这也会造成系统的不同模块之间的通信效率降低，也会使系统的不同模块之间不容易协调。</p>\n<h3 id=\"合成复用原则carp\"><a class=\"markdownIt-Anchor\" href=\"#合成复用原则carp\">#</a> 合成复用原则 (CARP)</h3>\n<blockquote>\n<p>尽量先使用组合或者聚合等关联关系来实现，其次考虑使用继承关系来实现</p>\n</blockquote>\n",
            "tags": [
                "设计模式",
                "OOP"
            ]
        }
    ]
}