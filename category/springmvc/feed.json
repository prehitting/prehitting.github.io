{
    "version": "https://jsonfeed.org/version/1",
    "title": "不利索の鸣 • All posts by \"springmvc\" category",
    "description": "欢迎来到鸣崽的空间，这里不仅有学习，还有生活",
    "home_page_url": "https://prehitting.gitee.io",
    "items": [
        {
            "id": "https://prehitting.gitee.io/2022/06/02/mvc%E6%B6%88%E6%81%AF%E8%BD%AC%E6%8D%A2%E5%99%A8/",
            "url": "https://prehitting.gitee.io/2022/06/02/mvc%E6%B6%88%E6%81%AF%E8%BD%AC%E6%8D%A2%E5%99%A8/",
            "title": "mvc消息转换器",
            "date_published": "2022-06-02T04:04:50.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>本文介绍 Spring MVC 中的一个极其重要的组件：HttpMessageConverter 消息转换器。</p>\n<p>有一副非常著名的图，来形容 Spring MVC 对一个请求的处理：</p>\n<p><img src=\"/2022/06/02/mvc%E6%B6%88%E6%81%AF%E8%BD%AC%E6%8D%A2%E5%99%A8/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=.png\" alt=\"【小家Spring】Spring MVC容器的web九大组件之---HandlerAdapter源码详解---HttpMessageConverter 消息转换器详解_# 享学Spring MVC\"></p>\n<p>从图中可见 HttpMessageConverter 对 Spring MVC 的重要性。它对请求、响应都起到了非常关键的作用～</p>\n<h2 id=\"瑞吉外卖项目中遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#瑞吉外卖项目中遇到的问题\">#</a> 瑞吉外卖项目中遇到的问题</h2>\n<p>修改员工信息时，前端需要向后端传入员工 id，这个 id 是超过 16 位的 long 型变量，而 js 在处理时会失去精度（对末尾几位四舍五入），导致传入后端的 id 与数据库表中的 id 字段不符，从而修改信息失败。</p>\n<p>因此需要在后端配置 mvc 消息转换器，将前端传入的 Long 型字段转化为字符串</p>\n<h2 id=\"为何需要消息转换器\"><a class=\"markdownIt-Anchor\" href=\"#为何需要消息转换器\">#</a> 为何需要消息转换器</h2>\n<p>==<strong>HttpMessageConverter</strong>== 是用来处理 request 和 response 里的数据的。.</p>\n<p>请求和响应都有对应的 body，而这个 body 就是需要关注的主要数据。<br>\n请求体的表述一般就是一段字符串，当然也可以是二进制数据（比如上传～）。<br>\n响应体则是浏览器渲染页面的依据，对于一个普通 html 页面得响应，响应体就是这个 html 页面的源代码。</p>\n<p>请求体和响应体都是需要配合 Content-Type 头部使用的，这个头部主要用于说明 body 中得字符串是什么格式的，比如：text，json，xml 等。对于请求报文，只有通过此头部，服务器才能知道怎么解析请求体中的字符串，对于响应报文，浏览器通过此头部才知道应该怎么渲染响应结果，是<strong>直接打印字符串还是根据代码渲染为一个网页</strong></p>\n<p>对于<mark> HttpServletRequest 和 HttpServletResponse</mark>，可以分别调用<mark> getInputStream</mark> 和<mark> getOutputStream</mark> 来直接获取 body。但是<mark>获取到的仅仅只是一段字符串</mark></p>\n<p>** 而对于 java 来说，处理一个对象肯定比处理一个字符串要方便得多，也好理解得多。** 所以根据 Content-Type 头部，将 body 字符串转换为 java 对象是常有的事。反过来，根据 Accept 头部，将 java 对象转换客户端期望格式的字符串也是必不可少的工作。这就是我们本文所讲述的消息转换器的工作～</p>\n<p>消息转换器<strong>它能屏蔽你对底层转换的实现，分离你的关注点，让你专心操作 java 对象，其余的事情你就交给我 Spring MVC 吧～大大提高你的编码效率 (可议说比源生 Servlet 开发高级太多了)</strong></p>\n<p>Spring 内置了很多<mark> HttpMessageConverter</mark>，比如<mark> MappingJackson2HttpMessageConverter</mark>，StringHttpMessageConverter，甚至还有<mark> FastJsonHttpMessageConverter</mark>（需导包和自己配置）</p>\n<h2 id=\"基于jackson将对象转换为json\"><a class=\"markdownIt-Anchor\" href=\"#基于jackson将对象转换为json\">#</a> 基于 Jackson 将对象转换为 json</h2>\n<h3 id=\"1定义jsonobjectmapper类\"><a class=\"markdownIt-Anchor\" href=\"#1定义jsonobjectmapper类\">#</a> 1，定义 JsonObjectMapper 类</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class=\"line\"><span class=\"comment\"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JacksonObjectMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ObjectMapper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_DATE_FORMAT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_DATE_TIME_FORMAT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_TIME_FORMAT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;HH:mm:ss&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">JacksonObjectMapper</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"comment\">//收到未知属性时不报异常</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//反序列化时，属性不存在的兼容处理</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">SimpleModule</span> <span class=\"variable\">simpleModule</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleModule</span>()</span><br><span class=\"line\">                .addDeserializer(LocalDateTime.class, <span class=\"keyword\">new</span> <span class=\"title class_\">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class=\"line\">                .addDeserializer(LocalDate.class, <span class=\"keyword\">new</span> <span class=\"title class_\">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class=\"line\">                .addDeserializer(LocalTime.class, <span class=\"keyword\">new</span> <span class=\"title class_\">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class=\"line\"></span><br><span class=\"line\">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class=\"line\">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class=\"line\">                .addSerializer(LocalDateTime.class, <span class=\"keyword\">new</span> <span class=\"title class_\">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class=\"line\">                .addSerializer(LocalDate.class, <span class=\"keyword\">new</span> <span class=\"title class_\">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class=\"line\">                .addSerializer(LocalTime.class, <span class=\"keyword\">new</span> <span class=\"title class_\">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.registerModule(simpleModule);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-将转换器注册到mvc框架\"><a class=\"markdownIt-Anchor\" href=\"#2-将转换器注册到mvc框架\">#</a> 2. 将转换器注册到 mvc 框架</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurationSupport</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">extendMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建消息转换器对象</span></span><br><span class=\"line\">        <span class=\"type\">MappingJackson2HttpMessageConverter</span> <span class=\"variable\">messageConverter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MappingJackson2HttpMessageConverter</span>();</span><br><span class=\"line\">        <span class=\"comment\">//设置对象转换器，底层使用Jackson将Java对象转Json</span></span><br><span class=\"line\">        messageConverter.setObjectMapper(<span class=\"keyword\">new</span> <span class=\"title class_\">JacksonObjectMapper</span>());</span><br><span class=\"line\">        <span class=\"comment\">//将其加入到mvc框架的转换器集合中</span></span><br><span class=\"line\">        converters.add(<span class=\"number\">0</span>,messageConverter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决前后端交互long类型精度丢失问题\"><a class=\"markdownIt-Anchor\" href=\"#解决前后端交互long类型精度丢失问题\">#</a> 解决前后端交互 Long 类型精度丢失问题</h2>\n<p>一、现象与分析<br>\n 1.1. 现象<br>\n雪花算法得到的 ID 较长，传到前端后，精度丢失，导致更新、删除功能不可用</p>\n<p>1.2. 分析<br>\n库中存的值：23754851322302474<br>\n 后端取的值：23754851322302474<br>\n 前端得到值：23754851322302470，数据被四舍五入了</p>\n<p>二、解决方案</p>\n<blockquote>\n<p>将 Long 类型转成 String，再传给前端</p>\n</blockquote>\n<p>2.1. 方法一单个注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonSerialize(using= ToStringSerializer.class)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Long id;</span><br></pre></td></tr></table></figure>\n<p>2.2. 方法二统一配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 统一注解，解决前后端交互Long类型精度丢失的问题</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JacksonConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ObjectMapper <span class=\"title function_\">jacksonObjectMapper</span><span class=\"params\">(Jackson2ObjectMapperBuilder builder)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> builder.createXmlMapper(<span class=\"literal\">false</span>).build();</span><br><span class=\"line\">        <span class=\"comment\">//全局配置序列化返回json处理</span></span><br><span class=\"line\">        <span class=\"type\">SimpleModule</span> <span class=\"variable\">simpleModule</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleModule</span>();</span><br><span class=\"line\">        <span class=\"comment\">//json Long ==&gt;String</span></span><br><span class=\"line\">        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);</span><br><span class=\"line\">        objectMapper.registerModule(simpleModule);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> objectMapper;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Springmvc"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/",
            "url": "https://prehitting.gitee.io/2022/05/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/",
            "title": "文件上传下载功能",
            "date_published": "2022-05-06T05:26:08.000Z",
            "content_html": "<h2 id=\"基于springmvc的文件上传\"><a class=\"markdownIt-Anchor\" href=\"#基于springmvc的文件上传\">#</a> 基于 SpringMVC 的文件上传</h2>\n<h3 id=\"1-multipartfile接口\"><a class=\"markdownIt-Anchor\" href=\"#1-multipartfile接口\">#</a> 1 MultipartFile 接口</h3>\n<p>MultipartFile 接口常用的的 API 见下表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">String getOriginalFilename()</td>\n<td>获取上传文件的原始文件名，即该文件在客户端中的文件名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">boolean isEmpty()</td>\n<td>判断上传的文件是否为空，当没有选择文件就直接上传，或者选中的文件是 0 字节的空文件时，返回 true，否则返回 false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long getSize()</td>\n<td>获取上传的文件大小，以字节为单位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">String getContentType()</td>\n<td>根据所上传的文件的扩展名决定该文件的 MIME 类型，例如上传.jpg 格式的图片，将返回 image/jpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">InputStream getInputStream()</td>\n<td>获取上传文件的输入字节流，通常用于自定义读取所上传的文件的过程，该方法与 transferTo () 方法不可以同时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">void transferTo(File dest)</td>\n<td>保存上传的文件，该方法与 getInputStream () 方法不可以同时使用</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-multipartresolver接口\"><a class=\"markdownIt-Anchor\" href=\"#2-multipartresolver接口\">#</a> 2 MultipartResolver 接口</h3>\n<p>1.MultipartResolver 可以将上传过程中产生的数据封装为 MultipartFile 类型的对象中。</p>\n<p>2. 在配置 MultipartResovler 时，可以为其中的几个属性注入值：</p>\n<ul>\n<li>maxUploadSize：上传文件的最大大小，假设设置值为 10M，一次性上传 5 个文件，则 5 个文件的大小总和不允许超过 10M。</li>\n<li>maxUploadSizePerFile：每个上传文件的最大大小，假设设置值为 10M，一次性上传 5 个文件，则每个文件的大小都不可以超过 10M，但是 5 个文件的大小总和可以接近 50M。</li>\n<li>defaultEncoding：默认编码。</li>\n</ul>\n<h3 id=\"3-基于springmvc的文件上传案例\"><a class=\"markdownIt-Anchor\" href=\"#3-基于springmvc的文件上传案例\">#</a> 3 基于 SpringMVC 的文件上传案例</h3>\n<h4 id=\"31-创建项目\"><a class=\"markdownIt-Anchor\" href=\"#31-创建项目\">#</a> 3.1 创建项目</h4>\n<p>1. 创建 Java Enterprise 项目，设置 Name 为 springmvc-upload，<a href=\"http://xn--Groupcom-1g0m.cy\">Group 为 com.cy</a>，Artifact 为 controller 的 Java 企业级项目。</p>\n<p>2. 将项目 com.cy.controller 包下自动生成的 HelloServlet 类删除，并删除 webapp 下自动生成的 index.jsp 文件。</p>\n<p>3. 添加文件上传 jar 包依赖（关于文件上传需要添加 spring-webmvc 和 commons-fileupload 依赖）。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 文件上传 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>4. 在 src\\main\\resources 文件夹下创建 spring 配置文件，并将文件命名为 spring-upload.xml。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t   http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t   http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t   http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"32-前端页面设计\"><a class=\"markdownIt-Anchor\" href=\"#32-前端页面设计\">#</a> 3.2 前端页面设计</h4>\n<p>在 webapp 目录下创建 upload.html 页面，并在页面中添加如下代码。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>文件上传<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>文件上传<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- enctype属性：规定表单中数据在提交给服务器之前如何进行编码。默认表单数据的编码是&quot;application/x-www-form-urlencoded&quot;。</span></span><br><span class=\"line\"><span class=\"comment\">         application/x-www-form-urlencoded：提交前表单中所有数据都会进行编码；编码的规则是：空格转换为&quot;+&quot;加号，特殊符号转换为ASCII HEX值</span></span><br><span class=\"line\"><span class=\"comment\">         text/plain：提交前表单中数据空格转换为&quot;+&quot;加号，但不对特殊字符进行编码。</span></span><br><span class=\"line\"><span class=\"comment\">         multipart/form-data：提交前表单中不对字符进行编码；在使用包含文件上传控件的表单中，必须使用该值</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;upload.do&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>文件名(N)：<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">colspan</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;上传&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意</strong>：form 表单的请求方式必须设置为 POST，并配置属性 enctype=“multipart/form-data”，文件上传 input 控件的 name 属性值需设置为 file 值。</p>\n</blockquote>\n<h4 id=\"33-后台功能实现\"><a class=\"markdownIt-Anchor\" href=\"#33-后台功能实现\">#</a> 3.3 后台功能实现</h4>\n<p>1. 在 web.xml 文件中配置前端控制器和过滤器，并指定 DispatcherServlet 加载的配置文件 springmvc-upload.xml 的位置。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springmvc-upload.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.do<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2. 创建 com.cy.controller.UploadController 控制器类，在类的声明之前添加 @Controller 注解，并在控制器中添加处理请求的 upload () 方法，为此方法添加类型为 MultipartFile 接口的参数，并为该参数添加 @RequestParam 注解，表示客户端上传的文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cy.controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UploadController</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    @RequestMapping(&quot;upload.do&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">    @ResponseBody</span></span><br><span class=\"line\"><span class=\"comment\">    public String upload(@RequestParam(&quot;file&quot;) MultipartFile file) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;UploadController.upload()...&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        File dest = new File(&quot;D:/1.png&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        try &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            // 调用MultipartFile参数对象的transferTo()方法即可保存上传的文件</span></span><br><span class=\"line\"><span class=\"comment\">            file.transferTo(dest);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125; catch (IOException e) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            e.printStackTrace();</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        return &quot;OK&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;upload.do&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">upload</span><span class=\"params\">(HttpServletRequest request, <span class=\"meta\">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取上传文件的原始文件名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">originalFilename</span> <span class=\"operator\">=</span> file.getOriginalFilename();</span><br><span class=\"line\">        <span class=\"comment\">// 获取上下文的绝对路径</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">realPath</span> <span class=\"operator\">=</span> request.getServletContext().getRealPath(<span class=\"string\">&quot;upload&quot;</span>);</span><br><span class=\"line\">        System.out.println(realPath);</span><br><span class=\"line\">        <span class=\"comment\">// 创建File文件对象</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">dir</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(realPath);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dir.exists()) &#123;</span><br><span class=\"line\">            dir.mkdirs();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 自定义上传文件名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> UUID.randomUUID().toString();</span><br><span class=\"line\">        <span class=\"comment\">// 获取上传文件扩展名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">suffix</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">beginIndex</span> <span class=\"operator\">=</span> originalFilename.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (beginIndex &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            suffix = originalFilename.substring(beginIndex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fullFilename</span> <span class=\"operator\">=</span> fileName + suffix;</span><br><span class=\"line\">        <span class=\"comment\">// 调用MultipartFile参数对象的transferTo()方法即可保存上传的文件</span></span><br><span class=\"line\">        file.transferTo(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(dir, fullFilename));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;OK&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3. 在 springmvc-upload.xml 配置文件中添加组件扫描和 CommonsMultipartResolver 类的 bean 标签配置。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 组件扫描 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.cy&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- CommonsMultipartResolver --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;multipartResolver&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意</strong>：CommonsMultipartResolver 类在配置时，id 值必须设置成 multipartResolver。</p>\n</blockquote>\n<p>4. 启动项目，访问 http://localhost:8080/springmvc_upload_war_exploded/upload.html 网址测试文件提交。</p>\n<h2 id=\"上传头像\"><a class=\"markdownIt-Anchor\" href=\"#上传头像\">#</a> 上传头像</h2>\n<h3 id=\"1-用户-上传头像-持久层\"><a class=\"markdownIt-Anchor\" href=\"#1-用户-上传头像-持久层\">#</a> 1 用户 - 上传头像 - 持久层</h3>\n<h4 id=\"11-规划需要执行的sql语句\"><a class=\"markdownIt-Anchor\" href=\"#11-规划需要执行的sql语句\">#</a> 1.1 规划需要执行的 SQL 语句</h4>\n<p>上传文件的操作其实是：先将用户上传的文件保存到服务器端的某个位置，然后将保存文件的路径记录在数据库中。当后续需要使用该文件时，从数据库中读出文件的路径，即可实现在线访问该文件。</p>\n<p>在持久层处理数据库中的数据时，只需要关心如何记录头像文件的路径，并不需要考虑上传时保存文件的过程。所以，需要执行的 SQL 语句大致是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">update t_user set avatar=?, modified_user=?, modified_time=? where uid=?</span><br></pre></td></tr></table></figure>\n<h4 id=\"12-接口与抽象方法\"><a class=\"markdownIt-Anchor\" href=\"#12-接口与抽象方法\">#</a> 1.2 接口与抽象方法</h4>\n<p>在 UserMapper 接口中添加 updateAvatarByUid () 抽象方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据uid更新用户的头像</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> uid 用户的id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> avatar 新头像的路径</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> modifiedUser 修改执行人</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> modifiedTime 修改时间</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 受影响的行数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Integer <span class=\"title function_\">updateAvatarByUid</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@Param(&quot;uid&quot;)</span> Integer uid,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@Param(&quot;avatar&quot;)</span> String avatar,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@Param(&quot;modifiedUser&quot;)</span> String modifiedUser,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@Param(&quot;modifiedTime&quot;)</span> Date modifiedTime)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"13-配置sql映射\"><a class=\"markdownIt-Anchor\" href=\"#13-配置sql映射\">#</a> 1.3 配置 SQL 映射</h4>\n<p>1. 在 UserMapper.xml 中配置 updateAvatarByUid () 抽象方法的映射。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 根据uid更新用户的头像</span></span><br><span class=\"line\"><span class=\"comment\">\t Integer updateAvatarByUid(</span></span><br><span class=\"line\"><span class=\"comment\">\t\t@Param(&quot;uid&quot;) Integer uid,</span></span><br><span class=\"line\"><span class=\"comment\">\t\t@Param(&quot;avatar&quot;) String avatar,</span></span><br><span class=\"line\"><span class=\"comment\">\t\t@Param(&quot;modifiedUser&quot;) String modifiedUser,</span></span><br><span class=\"line\"><span class=\"comment\">\t\t@Param(&quot;modifiedTime&quot;) Date modifiedTime) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;updateAvatarByUid&quot;</span>&gt;</span></span><br><span class=\"line\">\tUPDATE</span><br><span class=\"line\">\t\tt_user</span><br><span class=\"line\">\tSET</span><br><span class=\"line\">\t\tavatar = #&#123;avatar&#125;,</span><br><span class=\"line\">\t\tmodified_user = #&#123;modifiedUser&#125;,</span><br><span class=\"line\">\t\tmodified_time = #&#123;modifiedTime&#125;</span><br><span class=\"line\">\tWHERE</span><br><span class=\"line\">\t\tuid = #&#123;uid&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2. 在 UserMapperTests 中编写并执行单元测试。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateAvatarByUid</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">uid</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">avatar</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/upload/avatar.png&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">modifiedUser</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;超级管理员&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">Date</span> <span class=\"variable\">modifiedTime</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">rows</span> <span class=\"operator\">=</span> userMapper.updateAvatarByUid(uid, avatar, modifiedUser, modifiedTime);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;rows=&quot;</span> + rows);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-用户-上传头像-业务层\"><a class=\"markdownIt-Anchor\" href=\"#2-用户-上传头像-业务层\">#</a> 2 用户 - 上传头像 - 业务层</h3>\n<h4 id=\"21-规划异常\"><a class=\"markdownIt-Anchor\" href=\"#21-规划异常\">#</a> 2.1 规划异常</h4>\n<p>在修改头像值前先检查用户数据状态，可能抛 UserNotFoundException 异常；由于最终执行的是修改操作还可能抛 UpdateException 异常。</p>\n<h4 id=\"22-接口与抽象方法\"><a class=\"markdownIt-Anchor\" href=\"#22-接口与抽象方法\">#</a> 2.2 接口与抽象方法</h4>\n<p>在 IUserService 中添加 changeAvatar (Integer uid, String username, String avatar) 抽象方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 修改用户头像</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> uid 当前登录的用户的id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> username 当前登录的用户名</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> avatar 用户的新头像的路径</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">changeAvatar</span><span class=\"params\">(Integer uid, String username, String avatar)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"23-实现抽象方法\"><a class=\"markdownIt-Anchor\" href=\"#23-实现抽象方法\">#</a> 2.3 实现抽象方法</h4>\n<p>1. 在 UserServiceImpl 类中实现 changeAvatar (Integer uid, String username, String avatar) 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeAvatar</span><span class=\"params\">(Integer uid, String username, String avatar)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用userMapper的findByUid()方法，根据参数uid查询用户数据</span></span><br><span class=\"line\">    <span class=\"comment\">// 检查查询结果是否为null</span></span><br><span class=\"line\">    <span class=\"comment\">// 是：抛出UserNotFoundException</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查查询结果中的isDelete是否为1</span></span><br><span class=\"line\">    <span class=\"comment\">// 是：抛出UserNotFoundException</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建当前时间对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 调用userMapper的updateAvatarByUid()方法执行更新，并获取返回值</span></span><br><span class=\"line\">    <span class=\"comment\">// 判断以上返回的受影响行数是否不为1</span></span><br><span class=\"line\">    <span class=\"comment\">// 是：抛了UpdateException</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.changeAvatar (Integer uid, String username, String avatar) 方法中代码的具体实现为。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeAvatar</span><span class=\"params\">(Integer uid, String username, String avatar)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 调用userMapper的findByUid()方法，根据参数uid查询用户数据</span></span><br><span class=\"line\">\t<span class=\"type\">User</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> userMapper.findByUid(uid);</span><br><span class=\"line\">\t<span class=\"comment\">// 检查查询结果是否为null</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (result == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 是：抛出UserNotFoundException</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserNotFoundException</span>(<span class=\"string\">&quot;用户数据不存在&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 检查查询结果中的isDelete是否为1</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (result.getIsDelete().equals(<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 是：抛出UserNotFoundException</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserNotFoundException</span>(<span class=\"string\">&quot;用户数据不存在&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 创建当前时间对象</span></span><br><span class=\"line\">\t<span class=\"type\">Date</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// 调用userMapper的updateAvatarByUid()方法执行更新，并获取返回值</span></span><br><span class=\"line\">\t<span class=\"type\">Integer</span> <span class=\"variable\">rows</span> <span class=\"operator\">=</span> userMapper.updateAvatarByUid(uid, avatar, username, now);</span><br><span class=\"line\">\t<span class=\"comment\">// 判断以上返回的受影响行数是否不为1</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rows != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 是：抛出UpdateException</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UpdateException</span>(<span class=\"string\">&quot;更新用户数据时出现未知错误，请联系系统管理员&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3. 在 UserServiceTests 类中进行单元测试。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeAvatar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">uid</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;头像管理员&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">avatar</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/upload/avatar.png&quot;</span>;</span><br><span class=\"line\">        userService.changeAvatar(uid, username, avatar);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;OK.&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ServiceException e) &#123;</span><br><span class=\"line\">        System.out.println(e.getClass().getSimpleName());</span><br><span class=\"line\">        System.out.println(e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-用户-上传头像-控制器\"><a class=\"markdownIt-Anchor\" href=\"#3-用户-上传头像-控制器\">#</a> 3 用户 - 上传头像 - 控制器</h3>\n<h4 id=\"31-处理异常\"><a class=\"markdownIt-Anchor\" href=\"#31-处理异常\">#</a> 3.1 处理异常</h4>\n<p>1. 在处理上传文件的过程中，用户可能会选择错误的文件上传，此时就应该抛出对应的异常并进行处理。所以需要创建文件上传相关异常的基类，即在 com.cy.store.controller.ex 包下创建 FileUploadException 类，并继承自 RuntimeException 类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cy.store.service.ex;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 文件上传相关异常的基类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileUploadException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RuntimeException</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FileUploadException</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FileUploadException</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FileUploadException</span><span class=\"params\">(String message, Throwable cause)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(message, cause);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FileUploadException</span><span class=\"params\">(Throwable cause)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(cause);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"title function_\">FileUploadException</span><span class=\"params\">(String message, Throwable cause, <span class=\"type\">boolean</span> enableSuppression, <span class=\"type\">boolean</span> writableStackTrace)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2. 在处理上传的文件过程中，经分析可能会产生以下异常。这些异常类都需要继承自 FileUploadException 类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 上传的文件为空</span></span><br><span class=\"line\">cn.tedu.store.controller.ex.FileEmptyException</span><br><span class=\"line\"><span class=\"comment\">// 上传的文件大小超出了限制值</span></span><br><span class=\"line\">cn.tedu.store.controller.ex.FileSizeException</span><br><span class=\"line\"><span class=\"comment\">// 上传的文件类型超出了限制</span></span><br><span class=\"line\">cn.tedu.store.controller.ex.FileTypeException</span><br><span class=\"line\"><span class=\"comment\">// 上传的文件状态异常</span></span><br><span class=\"line\">cn.tedu.store.controller.ex.FileStateException</span><br><span class=\"line\"><span class=\"comment\">// 上传文件时读写异常</span></span><br><span class=\"line\">cn.tedu.store.controller.ex.FileUploadIOException</span><br></pre></td></tr></table></figure>\n<p>3. 创建 FileEmptyException 异常类，并继承 FileUploadException 类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cy.store.service.ex;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 上传的文件为空的异常，例如没有选择上传的文件就提交了表单，或选择的文件是0字节的空文件 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileEmptyException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">FileUploadException</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Override Methods...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4. 创建 FileSizeException 异常类，并继承 FileUploadException 类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cy.store.service.ex;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 上传的文件的大小超出了限制值 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileSizeException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">FileUploadException</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Override Methods...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5. 创建 FileTypeException 异常类，并继承 FileUploadException 类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cy.store.service.ex;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 上传的文件类型超出了限制 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileTypeException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">FileUploadException</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Override Methods...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>6. 创建 FileStateException 异常类，并继承 FileUploadException 类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cy.store.service.ex;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 上传的文件状态异常 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileStateException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">FileUploadException</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Override Methods...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>7. 创建 FileUploadIOException 异常类，并继承 FileUploadException 类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cy.store.service.ex;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 上传文件时读写异常 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileUploadIOException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">FileUploadException</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Override Methods...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>8. 然后在 BaseController 的 handleException () 的 @ExceptionHandler 注解中添加 FileUploadException.class 异常的处理；最后在方法中处理这些异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(&#123;ServiceException.class, FileUploadException.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> JsonResult&lt;Void&gt; <span class=\"title function_\">handleException</span><span class=\"params\">(Throwable e)</span> &#123;</span><br><span class=\"line\">\tJsonResult&lt;Void&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">JsonResult</span>&lt;Void&gt;(e);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> UsernameDuplicateException) &#123;</span><br><span class=\"line\">\t\tresult.setState(<span class=\"number\">4000</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> UserNotFoundException) &#123;</span><br><span class=\"line\">\t\tresult.setState(<span class=\"number\">4001</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> PasswordNotMatchException) &#123;</span><br><span class=\"line\">\t\tresult.setState(<span class=\"number\">4002</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> InsertException) &#123;</span><br><span class=\"line\">\t\tresult.setState(<span class=\"number\">5000</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> UpdateException) &#123;</span><br><span class=\"line\">\t\tresult.setState(<span class=\"number\">5001</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> FileEmptyException) &#123;</span><br><span class=\"line\">\t\tresult.setState(<span class=\"number\">6000</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> FileSizeException) &#123;</span><br><span class=\"line\">\t\tresult.setState(<span class=\"number\">6001</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> FileTypeException) &#123;</span><br><span class=\"line\">\t\tresult.setState(<span class=\"number\">6002</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> FileStateException) &#123;</span><br><span class=\"line\">\t\tresult.setState(<span class=\"number\">6003</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> FileUploadIOException) &#123;</span><br><span class=\"line\">\t\tresult.setState(<span class=\"number\">6004</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"32-设计请求\"><a class=\"markdownIt-Anchor\" href=\"#32-设计请求\">#</a> 3.2 设计请求</h4>\n<p>设计用户提交的请求，并设计响应的方式：</p>\n<pre><code>请求路径：/users/change_avatar\n请求参数：MultipartFile file, HttpSession session\n请求类型：POST\n响应结果：JsonResult&lt;String&gt;\n</code></pre>\n<h4 id=\"33-处理请求\"><a class=\"markdownIt-Anchor\" href=\"#33-处理请求\">#</a> 3.3 处理请求</h4>\n<p>1. 在 UserController 类中添加处理请求的 changeAvatar (@RequestParam (“file”) MultipartFile file, HttpSession session) 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;change_avatar&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> JsonResult&lt;String&gt; <span class=\"title function_\">changeAvatar</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;file&quot;)</span> MultipartFile file, HttpSession session)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 判断上传的文件是否为空</span></span><br><span class=\"line\">\t<span class=\"comment\">// 是：抛出异常</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 判断上传的文件大小是否超出限制值</span></span><br><span class=\"line\">\t<span class=\"comment\">// 是：抛出异常</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 判断上传的文件类型是否超出限制</span></span><br><span class=\"line\">\t<span class=\"comment\">// 是：抛出异常</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 获取当前项目的绝对磁盘路径</span></span><br><span class=\"line\">\t<span class=\"comment\">// 保存头像文件的文件夹</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 保存的头像文件的文件名</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">// 创建文件对象，表示保存的头像文件</span></span><br><span class=\"line\">\t<span class=\"comment\">// 执行保存头像文件</span></span><br><span class=\"line\">\t<span class=\"comment\">// 如果产生异常则抛出</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 头像路径</span></span><br><span class=\"line\">\t<span class=\"comment\">// 从Session中获取uid和username</span></span><br><span class=\"line\">\t<span class=\"comment\">// 将头像写入到数据库中</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 返回成功和头像路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.changeAvatar (@RequestParam (“file”) MultipartFile file, HttpSession session) 方法中具体代码实现为。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 头像文件大小的上限值(10MB) */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">AVATAR_MAX_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 允许上传的头像的文件类型 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> List&lt;String&gt; AVATAR_TYPES = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 初始化允许上传的头像的文件类型 */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\tAVATAR_TYPES.add(<span class=\"string\">&quot;image/jpeg&quot;</span>);</span><br><span class=\"line\">\tAVATAR_TYPES.add(<span class=\"string\">&quot;image/png&quot;</span>);</span><br><span class=\"line\">\tAVATAR_TYPES.add(<span class=\"string\">&quot;image/bmp&quot;</span>);</span><br><span class=\"line\">\tAVATAR_TYPES.add(<span class=\"string\">&quot;image/gif&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;change_avatar&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> JsonResult&lt;String&gt; <span class=\"title function_\">changeAvatar</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;file&quot;)</span> MultipartFile file, HttpSession session)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 判断上传的文件是否为空</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (file.isEmpty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 是：抛出异常</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileEmptyException</span>(<span class=\"string\">&quot;上传的头像文件不允许为空&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 判断上传的文件大小是否超出限制值</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (file.getSize() &gt; AVATAR_MAX_SIZE) &#123; <span class=\"comment\">// getSize()：返回文件的大小，以字节为单位</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 是：抛出异常</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileSizeException</span>(<span class=\"string\">&quot;不允许上传超过&quot;</span> + (AVATAR_MAX_SIZE / <span class=\"number\">1024</span>) + <span class=\"string\">&quot;KB的头像文件&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 判断上传的文件类型是否超出限制</span></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">contentType</span> <span class=\"operator\">=</span> file.getContentType();</span><br><span class=\"line\">\t<span class=\"comment\">// public boolean list.contains(Object o)：当前列表若包含某元素，返回结果为true；若不包含该元素，返回结果为false。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!AVATAR_TYPES.contains(contentType)) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 是：抛出异常</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileTypeException</span>(<span class=\"string\">&quot;不支持使用该类型的文件作为头像，允许的文件类型：\\n&quot;</span> + AVATAR_TYPES);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 获取当前项目的绝对磁盘路径</span></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">parent</span> <span class=\"operator\">=</span> session.getServletContext().getRealPath(<span class=\"string\">&quot;upload&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 保存头像文件的文件夹</span></span><br><span class=\"line\">\t<span class=\"type\">File</span> <span class=\"variable\">dir</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(parent);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!dir.exists()) &#123;</span><br><span class=\"line\">\t\tdir.mkdirs();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 保存的头像文件的文件名</span></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">suffix</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">originalFilename</span> <span class=\"operator\">=</span> file.getOriginalFilename();</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">beginIndex</span> <span class=\"operator\">=</span> originalFilename.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beginIndex &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tsuffix = originalFilename.substring(beginIndex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">filename</span> <span class=\"operator\">=</span> UUID.randomUUID().toString() + suffix;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 创建文件对象，表示保存的头像文件</span></span><br><span class=\"line\">\t<span class=\"type\">File</span> <span class=\"variable\">dest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(dir, filename);</span><br><span class=\"line\">\t<span class=\"comment\">// 执行保存头像文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tfile.transferTo(dest);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (IllegalStateException e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 抛出异常</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileStateException</span>(<span class=\"string\">&quot;文件状态异常，可能文件已被移动或删除&quot;</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 抛出异常</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileUploadIOException</span>(<span class=\"string\">&quot;上传文件时读写错误，请稍后重尝试&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 头像路径</span></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">avatar</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/upload/&quot;</span> + filename;</span><br><span class=\"line\">\t<span class=\"comment\">// 从Session中获取uid和username</span></span><br><span class=\"line\">\t<span class=\"type\">Integer</span> <span class=\"variable\">uid</span> <span class=\"operator\">=</span> getUidFromSession(session);</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> getUsernameFromSession(session);</span><br><span class=\"line\">\t<span class=\"comment\">// 将头像写入到数据库中</span></span><br><span class=\"line\">\tuserService.changeAvatar(uid, username, avatar);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 返回成功头像路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JsonResult</span>&lt;String&gt;(OK, avatar);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-用户-上传头像-设置上传文件大小\"><a class=\"markdownIt-Anchor\" href=\"#4-用户-上传头像-设置上传文件大小\">#</a> 4 用户 - 上传头像 - 设置上传文件大小</h3>\n<p>1.SpringBoot 中默认 MultipartResolver 的最大文件大小值为 1M。如果上传的文件的大小超过 1M，会抛 FileSizeLimitExceededException 异常。</p>\n<p>[外链图片转存失败，源站可能有防盗链机制，建议将图片保存下来直接上传 (img-bRrqkhoI-1650868471285)(img/2.png)]</p>\n<p>2. 如果需要调整上传的限制值，直接在启动类中添加 getMultipartConfigElement () 方法，并且在启动类之前添加 @Configuration 注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cy.store;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.MultipartConfigFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.unit.DataSize;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.unit.DataUnit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.MultipartConfigElement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;com.cy.store.mapper&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StoreApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(StoreApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MultipartConfigElement <span class=\"title function_\">getMultipartConfigElement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MultipartConfigFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MultipartConfigFactory</span>();</span><br><span class=\"line\">        <span class=\"comment\">// DataSize dataSize = DataSize.ofMegabytes(10);</span></span><br><span class=\"line\">        <span class=\"comment\">// 设置文件最大10M，DataUnit提供5中类型B,KB,MB,GB,TB</span></span><br><span class=\"line\">        factory.setMaxFileSize(DataSize.of(<span class=\"number\">10</span>, DataUnit.MEGABYTES));</span><br><span class=\"line\">        factory.setMaxRequestSize(DataSize.of(<span class=\"number\">10</span>, DataUnit.MEGABYTES));</span><br><span class=\"line\">        <span class=\"comment\">// 设置总上传数据总大小10M</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> factory.createMultipartConfig();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3. 除了以上编写方法配置上传的上限值以外，还可以通过在 application.properties 或 application.yml 中添加配置来实现。</p>\n<p>(1) 低版本：1.X</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.http.multipart.max-file-size</span>=<span class=\"string\">10MB</span></span><br><span class=\"line\"><span class=\"attr\">spring.http.multipart.max-request-size</span>=<span class=\"string\">10MB</span></span><br></pre></td></tr></table></figure>\n<p>(2) 高版本：2.X</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方式1</span></span><br><span class=\"line\"><span class=\"attr\">spring.servlet.multipart.max-file-size</span>=<span class=\"string\">10MB</span></span><br><span class=\"line\"><span class=\"attr\">spring.servlet.multipart.max-request-size</span>=<span class=\"string\">10MB</span></span><br><span class=\"line\"><span class=\"comment\">#方式2</span></span><br><span class=\"line\"><span class=\"attr\">spring.servlet.multipart.maxFileSize</span>=<span class=\"string\">10MB</span></span><br><span class=\"line\"><span class=\"attr\">spring.servlet.multipart.maxRequestSize</span>=<span class=\"string\">10MB</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"基于springbootmybatisplus\"><a class=\"markdownIt-Anchor\" href=\"#基于springbootmybatisplus\">#</a> 基于 SpringBoot+mybatisPlus</h2>\n<h3 id=\"上传\"><a class=\"markdownIt-Anchor\" href=\"#上传\">#</a> 上传</h3>\n<p><strong>文件上传时，对页面的 form 表单有如下要求</strong></p>\n<ul>\n<li>\n<p>method = “post”----------------- 采用 post 方式提交数据</p>\n</li>\n<li>\n<p>enctype = “multipart/form-data”---- 采用 multipart 格式上传文件</p>\n</li>\n<li>\n<p>type = “file”--------------------- 使用 input 的 file 控件上传</p>\n</li>\n</ul>\n<p>服务端要接收客户端页面上传的文件，通常使用 Apache 的两个组件：</p>\n<ul>\n<li>commons-fileupload</li>\n<li>commons-io</li>\n</ul>\n<p>Spring 框架在 spring-web 包中对文件上传进行了封装，只需要在 Controller 方法中声明一个 MultipartFile 类型的参数即可接收上传的文件</p>\n<h3 id=\"下载\"><a class=\"markdownIt-Anchor\" href=\"#下载\">#</a> 下载</h3>\n<p>通过浏览器进行文件下载，通常有两种形式</p>\n<ul>\n<li>以附件形式下载，退出保存对话框，将文件保存到指定磁盘目录</li>\n<li>直接在浏览器中打开</li>\n</ul>\n<p>通过浏览器下载文件，本质是服务端将文件以流的形式写回浏览器的过程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 文件上传下载</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/common&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommonController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String basePath;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 文件上传</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file 文件，参数名与input组件的name属性保持一致</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R&lt;String&gt; <span class=\"title function_\">upload</span><span class=\"params\">(MultipartFile file)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里file为临时文件形式（拓展名.tmp）</span></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;文件上传:&#123;&#125;&quot;</span>,file.getOriginalFilename());</span><br><span class=\"line\">        <span class=\"comment\">//转存文件</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">originalFilename</span> <span class=\"operator\">=</span> file.getOriginalFilename();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">suffix</span> <span class=\"operator\">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> UUID.randomUUID().toString()+suffix;</span><br><span class=\"line\">        <span class=\"comment\">//创建目录</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">dir</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(basePath);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dir.exists()) &#123;</span><br><span class=\"line\">            dir.mkdirs();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            file.transferTo(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(basePath + fileName));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.success(basePath+fileName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 文件下载</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/download&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">download</span><span class=\"params\">(String name, HttpServletResponse response)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>(</span><br><span class=\"line\">                <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(basePath+name));</span><br><span class=\"line\">                <span class=\"type\">ServletOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> response.getOutputStream();</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            response.setContentType(<span class=\"string\">&quot;image/jpeg&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len=fileInputStream.read(bytes))!=-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                outputStream.write(bytes,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">                outputStream.flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "SpringBoot",
                "SpringMVC"
            ]
        }
    ]
}