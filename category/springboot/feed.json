{
    "version": "https://jsonfeed.org/version/1",
    "title": "不利索の鸣 • All posts by \"springboot\" category",
    "description": "欢迎来到鸣崽的空间，这里不仅有学习，还有生活",
    "home_page_url": "https://prehitting.gitee.io",
    "items": [
        {
            "id": "https://prehitting.gitee.io/2022/05/30/SpringBoot%E7%83%AD%E9%83%A8%E7%BD%B2/",
            "url": "https://prehitting.gitee.io/2022/05/30/SpringBoot%E7%83%AD%E9%83%A8%E7%BD%B2/",
            "title": "SpringBoot热部署配置",
            "date_published": "2022-05-30T01:29:28.000Z",
            "content_html": "<h2 id=\"使用devtool实现springboot热部署\"><a class=\"markdownIt-Anchor\" href=\"#使用devtool实现springboot热部署\">#</a> 使用 devTool 实现 Springboot 热部署</h2>\n<p>首先引入依赖项</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class=\"line\">    &lt;optional&gt;<span class=\"literal\">true</span>&lt;/optional&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>配置 application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">\t<span class=\"attr\">devtools:</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span></span><br><span class=\"line\">    \t<span class=\"attr\">enabled:</span> <span class=\"literal\">true</span>  <span class=\"comment\">#设置开启热部署</span></span><br><span class=\"line\">      \t<span class=\"attr\">additional-paths:</span> <span class=\"string\">src/main/java</span> <span class=\"comment\">#重启目录</span></span><br><span class=\"line\">      \t<span class=\"attr\">exclude:</span> <span class=\"string\">WEB-INF/**</span>  <span class=\"comment\">#排除文件(不重启项目)</span></span><br><span class=\"line\">    <span class=\"attr\">freemarker:</span></span><br><span class=\"line\">    \t<span class=\"attr\">cache:</span> <span class=\"literal\">false</span> <span class=\"comment\">#不加载缓存</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "SpringBoot"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/06/SpringBoot%E6%8B%A6%E6%88%AA%E5%99%A8%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/",
            "url": "https://prehitting.gitee.io/2022/05/06/SpringBoot%E6%8B%A6%E6%88%AA%E5%99%A8%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/",
            "title": "SpringBoot拦截器配置方法",
            "date_published": "2022-05-06T05:29:28.000Z",
            "content_html": "<h2 id=\"项目需求\"><a class=\"markdownIt-Anchor\" href=\"#项目需求\">#</a> 项目需求</h2>\n<pre><code>在用户浏览部分页面前，检测用户是否已经登录过，若登录过，则允许访问，\n若未登陆过，则拦截目标页面的访问，并跳转至登录界面\n</code></pre>\n<h2 id=\"配置方法\"><a class=\"markdownIt-Anchor\" href=\"#配置方法\">#</a> 配置方法</h2>\n<h3 id=\"步骤一\"><a class=\"markdownIt-Anchor\" href=\"#步骤一\">#</a> 步骤一</h3>\n<p>创建 inteceptor 包，创建 LoginInteceptor 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 检测全局session对象中是否有uid数据，如果有则放行，若没有则重定向到登陆界面</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request 请求对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response 响应对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> handler 处理器（url+Controller，映射）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true则放行，false拦截</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">                             HttpServletResponse response,</span></span><br><span class=\"line\"><span class=\"params\">                             Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Object obj=request.getSession().getAttribute(<span class=\"string\">&quot;uid&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//用户没有登录过系统</span></span><br><span class=\"line\">            response.sendRedirect(<span class=\"string\">&quot;/web/index.html&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤二\"><a class=\"markdownIt-Anchor\" href=\"#步骤二\">#</a> 步骤二</h3>\n<pre><code>在config包下创建LoginInterceptorConfig类实现WebMvcConfigure类注册拦截器\n</code></pre>\n<blockquote>\n<p>registry.addInterceptor () 用于注册拦截器<br>\n addPathPatterns (&quot;/**&quot;) 意为拦截所有页面，参数是需要拦截的页面<br>\n excludePathPatterns () 参数是不需要拦截的页面</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拦截器注册</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginInterceptorConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    HandlerInterceptor interceptor=<span class=\"keyword\">new</span> <span class=\"title class_\">LoginInterceptor</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; patterns = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        patterns.add(<span class=\"string\">&quot;/bootstrap3/**&quot;</span>);</span><br><span class=\"line\">        patterns.add(<span class=\"string\">&quot;/css/**&quot;</span>);</span><br><span class=\"line\">        patterns.add(<span class=\"string\">&quot;/images/**&quot;</span>);</span><br><span class=\"line\">        patterns.add(<span class=\"string\">&quot;/js/**&quot;</span>);</span><br><span class=\"line\">        patterns.add(<span class=\"string\">&quot;/web/register.html&quot;</span>);</span><br><span class=\"line\">        patterns.add(<span class=\"string\">&quot;/web/index.html&quot;</span>);</span><br><span class=\"line\">        patterns.add(<span class=\"string\">&quot;/web/login.html&quot;</span>);</span><br><span class=\"line\">        patterns.add(<span class=\"string\">&quot;/web/product.html&quot;</span>);</span><br><span class=\"line\">        patterns.add(<span class=\"string\">&quot;/users/reg&quot;</span>);</span><br><span class=\"line\">        patterns.add(<span class=\"string\">&quot;/users/login&quot;</span>);</span><br><span class=\"line\">        registry.addInterceptor(interceptor).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>).excludePathPatterns(patterns);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "SpringBoot",
                "拦截器"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/06/SpringBoot%E5%A4%84%E7%90%86%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/",
            "url": "https://prehitting.gitee.io/2022/05/06/SpringBoot%E5%A4%84%E7%90%86%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/",
            "title": "SpringBoot处理跨域请求的几种方法",
            "date_published": "2022-05-06T05:28:22.000Z",
            "content_html": "<h2 id=\"error\"><a class=\"markdownIt-Anchor\" href=\"#error\">#</a> Error：</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Access to XMLHttpRequest at &#x27;http://localhost:8080/store/users/reg&#x27; from origin &#x27;http://localhost:52972&#x27; has been blocked by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure>\n<h2 id=\"原因\"><a class=\"markdownIt-Anchor\" href=\"#原因\">#</a> 原因</h2>\n<blockquote>\n<p>浏览器出于安全考虑，使用 XMLHttpRequest 对象发起 HTTP 请求时必须遵守同源策略 (<strong>要求源相同才能正常进行通信，即协议，域名，端口号都完全一致</strong>)<br>\n 同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p>\n</blockquote>\n<h2 id=\"方案\"><a class=\"markdownIt-Anchor\" href=\"#方案\">#</a> 方案</h2>\n<h3 id=\"方案一-直接采用springboot的注解crossorigin支持springmvc\"><a class=\"markdownIt-Anchor\" href=\"#方案一-直接采用springboot的注解crossorigin支持springmvc\">#</a> 方案一 直接采用 SpringBoot 的注解 @CrossOrigin（支持 SpringMvc）</h3>\n<p>在 Control 层需要跨域的方法或类上增加注解 @CrossOrigin</p>\n<p><font color=\"red\">该注解可继承</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span><span class=\"comment\">//以json数据格式响应到前端</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/users&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseController</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IUserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/reg&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@CrossOrigin</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JsonResult&lt;Void&gt; <span class=\"title function_\">reg</span><span class=\"params\">(User user)</span>&#123;</span><br><span class=\"line\">        JsonResult&lt;Void&gt; result=<span class=\"keyword\">new</span> <span class=\"title class_\">JsonResult</span>&lt;&gt;();</span><br><span class=\"line\">        userService.register(user);</span><br><span class=\"line\">        result.setState(<span class=\"number\">200</span>);</span><br><span class=\"line\">        result.setMessage(<span class=\"string\">&quot;注册成功&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二-处理跨域请求的configuration\"><a class=\"markdownIt-Anchor\" href=\"#方法二-处理跨域请求的configuration\">#</a> 方法二、处理跨域请求的 Configuration</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">增加一个配置类，CrossOriginConfig.java。继承WebMvcConfigurerAdapter或者实现WebMvcConfigurer接口，其他都不用管，项目启动时，会自动读取配置。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * AJAX请求跨域</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Mr.W</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@time</span> 2018-08-13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CorsConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurerAdapter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ORIGINS[] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[] &#123; <span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;PUT&quot;</span>, <span class=\"string\">&quot;DELETE&quot;</span> &#125;;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span> &#123;</span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">&quot;/**&quot;</span>).allowedOrigins(<span class=\"string\">&quot;*&quot;</span>).allowCredentials(<span class=\"literal\">true</span>).allowedMethods(ORIGINS).maxAge(<span class=\"number\">3600</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法三-采用过滤器filter的方式\"><a class=\"markdownIt-Anchor\" href=\"#方法三-采用过滤器filter的方式\">#</a> 方法三、采用过滤器（filter）的方式</h3>\n<blockquote>\n<p>同方法二加配置类，增加一个 CORSFilter 类，并实现 Filter 接口即可，其他都不用管，接口调用时，会过滤跨域的拦截。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CORSFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">    <span class=\"type\">HttpServletResponse</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> (HttpServletResponse) response;</span><br><span class=\"line\">    res.addHeader(<span class=\"string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">    res.addHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">    res.addHeader(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"string\">&quot;GET, POST, DELETE, PUT&quot;</span>);</span><br><span class=\"line\">    res.addHeader(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;Content-Type,X-CAF-Authorization-Token,sessionToken,X-TOKEN&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((HttpServletRequest) request).getMethod().equals(<span class=\"string\">&quot;OPTIONS&quot;</span>)) &#123;</span><br><span class=\"line\">        response.getWriter().println(<span class=\"string\">&quot;ok&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    chain.doFilter(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "SpringBoot"
            ]
        }
    ]
}