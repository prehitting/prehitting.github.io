{
    "version": "https://jsonfeed.org/version/1",
    "title": "不利索の鸣 • All posts by \"redis\" category",
    "description": "欢迎来到鸣崽的空间，这里不仅有学习，还有生活",
    "home_page_url": "https://prehitting.gitee.io",
    "items": [
        {
            "id": "https://prehitting.gitee.io/2022/05/21/redis/redis-huan-cun-chuan-tou-yu-xue-beng/",
            "url": "https://prehitting.gitee.io/2022/05/21/redis/redis-huan-cun-chuan-tou-yu-xue-beng/",
            "title": "Redis缓存穿透与雪崩",
            "date_published": "2022-05-21T03:17:43.000Z",
            "content_html": "<h2 id=\"redis缓存穿透与雪崩\"><a class=\"markdownIt-Anchor\" href=\"#redis缓存穿透与雪崩\">#</a> Redis 缓存穿透与雪崩</h2>\n<p>Redis 缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询仿麦呢，但同时，它也带来了，它也带来了一些问题。其中，最要害的问题，就是数据一致性问题，从严格意义上讲，这个问题无解，如果对数据的一致性要求很高，那么就不能使用缓存</p>\n<p>另外的一些经典问题就是，缓存穿透，缓存雪崩和缓存击穿，目前，业界也有一些比较流行的解决方案</p>\n<h3 id=\"缓存穿透\"><a class=\"markdownIt-Anchor\" href=\"#缓存穿透\">#</a> 缓存穿透</h3>\n<blockquote>\n<p>概念</p>\n</blockquote>\n<p>用户想要查询一个数据，发现 redis 内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询，发现也没有，于是本次查询失败，当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库，这会给数据库造成很大压力，相当于缓存穿透</p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<ul>\n<li>布隆过滤器</li>\n</ul>\n<p>布隆过滤器是一种数据结构，对所有可能查询的参数以 hash 形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力</p>\n<p><img src=\"/2022/05/21/redis/redis-huan-cun-chuan-tou-yu-xue-beng/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWlpZU1l-,size_20,color_FFFFFF,t_70,g_se,x_16.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>缓存空对象</li>\n</ul>\n<p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源</p>\n<p><img src=\"/2022/05/21/redis/redis-huan-cun-chuan-tou-yu-xue-beng/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWlpZU1l-,size_20,color_FFFFFF,t_70,g_se,x_16-16531038930102.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>但是这种方法会存在两个问题：</strong></p>\n<ol>\n<li>如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键；</li>\n<li>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</li>\n</ol>\n<h3 id=\"缓存击穿量太大缓存过期\"><a class=\"markdownIt-Anchor\" href=\"#缓存击穿量太大缓存过期\">#</a> 缓存击穿（量太大，缓存过期）</h3>\n<blockquote>\n<p>概念</p>\n</blockquote>\n<p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个 key 非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个 key 在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞<br>\n当某个 key 在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<ul>\n<li>设置热点数据永不过期</li>\n</ul>\n<p>从缓存层面来看，没有设置过期时间，所以不会出现热点 key 过期后产生的问题。</p>\n<ul>\n<li>加互斥锁</li>\n</ul>\n<p>分布式锁∶使用分布式锁，保证对于每个 key 同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p>\n<p><img src=\"/2022/05/21/redis/redis-huan-cun-chuan-tou-yu-xue-beng/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWlpZU1l-,size_20,color_FFFFFF,t_70,g_se,x_16-16531040925354.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"缓存雪崩\"><a class=\"markdownIt-Anchor\" href=\"#缓存雪崩\">#</a> 缓存雪崩</h3>\n<blockquote>\n<p>概念</p>\n</blockquote>\n<p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis 宕机</p>\n<p>产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况</p>\n<p><img src=\"/2022/05/21/redis/redis-huan-cun-chuan-tou-yu-xue-beng/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWlpZU1l-,size_20,color_FFFFFF,t_70,g_se,x_16-16531041697446.png\" alt=\"在这里插入图片描述\"></p>\n<p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。<br>\n<strong>（双十一：停掉一些服务，保证主要服务可用）</strong></p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<ul>\n<li>redis 高可用</li>\n</ul>\n<p>这个思想的含义是，既然 redis 有可能挂掉，那我多增设几台 redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。（异地多活）</p>\n<ul>\n<li>限流降级</li>\n</ul>\n<p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个 key 只允许一个线程查询数据和写缓存，其他线程等待。</p>\n<ul>\n<li>数据预热</li>\n</ul>\n<p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的 key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/21/redis/redis-zhu-cong-fu-zhi/",
            "url": "https://prehitting.gitee.io/2022/05/21/redis/redis-zhu-cong-fu-zhi/",
            "title": "Redis主从复制",
            "date_published": "2022-05-21T01:18:52.000Z",
            "content_html": "<h2 id=\"redis主从复制\"><a class=\"markdownIt-Anchor\" href=\"#redis主从复制\">#</a> Redis 主从复制</h2>\n<p>主从复制，是指将一台 Redis 服务器的数据，复制到其他 Redis 服务器，前者称为主节点 (master/leader), 后者称为从节点 (slave/follower), 数据的复制是单向的，只能由主节点到从节点，<strong>Master 以写为主，slave 以读为主</strong></p>\n<p><strong>主从复制的作用：</strong></p>\n<ol>\n<li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式</li>\n<li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余</li>\n<li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个结点分担读负载，可以大大提高 Redis 服务器的并发量。</li>\n<li>高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是 Redis 高可用的基础</li>\n</ol>\n<p>一般来说，要将 Redis 应用于工程项目中，只使用一台 Redis 是玩玩不可的，原因如下</p>\n<ol>\n<li>从结构上，单个 Redis 服务器会发生单点 故障，并且一台服务器需要处理所有的请求负载，压力较大；</li>\n<li>从容量上，单个 Redis 服务器内存容量有限，就算一台 Redis 服务器内存容量为 256G，也不能将所有内存用作 Redis 存储内存，一般来说，单台 Redis 最大使用内存不应该超过 20G</li>\n</ol>\n<p>电商网站上的商品，一般都是一次上传，数次浏览，也就是多读少写</p>\n<h2 id=\"环境配置\"><a class=\"markdownIt-Anchor\" href=\"#环境配置\">#</a> 环境配置</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> info replication <span class=\"token comment\">#查看当前库的信息</span>\n<span class=\"token comment\"># Replication</span>\nrole:master <span class=\"token comment\"># 角色</span>\nconnected_slaves:0 <span class=\"token comment\"># 从机数量</span>\nmaster_replid:12673735635e5cedc1e668b27e7a83855086ab0c\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:0\nsecond_repl_offset:-1\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"windows环境下配置\"><a class=\"markdownIt-Anchor\" href=\"#windows环境下配置\">#</a> windows 环境下配置</h3>\n<ul>\n<li>复制 Redis 安装主文件夹</li>\n<li>此处采用一主二从</li>\n</ul>\n<p><img src=\"/2022/05/21/redis/redis-zhu-cong-fu-zhi/image-20220521101305709.png\" alt=\"image-20220521101305709\"></p>\n<blockquote>\n<ol>\n<li>分别进入文件夹</li>\n</ol>\n<p>修改 redis.windows.conf 和 redis.windows-service.conf 中的端口信息</p>\n<p>port 6380</p>\n<p>slaveof 127.0.0.1 6379</p>\n<ol start=\"2\">\n<li>然后在 cmd 中安装服务</li>\n</ol>\n<p>redis-server --service-install redis.windows.conf --maxmemory 200m --service-name redis6380</p>\n<p>redis-server --service-install redis.windows.conf --maxmemory 200m --service-name redis6381</p>\n</blockquote>\n<p><img src=\"/2022/05/21/redis/redis-zhu-cong-fu-zhi/image-20220521101705547.png\" alt=\"image-20220521101705547\"></p>\n<h2 id=\"一主二从\"><a class=\"markdownIt-Anchor\" href=\"#一主二从\">#</a> 一主二从</h2>\n<p><font color=\"red\">默认情况下每台 Redis 服务器都是主节点 </font> \t配置从机</p>\n<ol>\n<li>命令 slave 127.0.0.1    6379  #配置主机</li>\n<li>改写配置文件</li>\n</ol>\n<p><strong>从机只读不写</strong></p>\n<p>如果主机宕机，从机仍然可以读到数据</p>\n<blockquote>\n<p>复制原理</p>\n</blockquote>\n<p>Slave 启动成功连接到 master 后会发送一个 sync 命令</p>\n<p>Master 接到命令后，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕后，master 将传送整个数据文件到 slave，并完成一次完全同步</p>\n<p>全量复制：而 slave 服务在接收到数据库文件数据后，将其存盘并加载到内存中</p>\n<p>增量复制，Master 继续将新的所有收集到的修改命令依次传给 slave，完成同步</p>\n<p>但是只要是重新连接 master，一次完全同步（全量复制）将被自动执行</p>\n<blockquote>\n<p>如果主机宕机，重新选择主句</p>\n</blockquote>\n<p>如果主机断开连接，可以使用 slaveof  no one 让自己变成主机。其他的结点就可以手动连接到最新的这个主节点（手动）。</p>\n<h2 id=\"哨兵模式\"><a class=\"markdownIt-Anchor\" href=\"#哨兵模式\">#</a> 哨兵模式</h2>\n<blockquote>\n<p>概述</p>\n</blockquote>\n<p>在 Redis 主从复制模式中，因为系统不具备自动恢复的功能，所以当主服务器（master）宕机后，需要手动把一台从服务器（slave）切换为主服务器。在这个过程中，不仅需要人为干预，而且还会造成一段时间内服务器处于不可用状态，同时数据安全性也得不到保障，因此主从模式的可用性较低，不适用于线上生产环境。</p>\n<p>Redis 官方推荐一种高可用方案，也就是 Redis Sentinel 哨兵模式，它弥补了主从模式的不足。Sentinel 通过监控的方式获取主机的工作状态是否正常，当主机发生故障时， Sentinel 会自动进行 Failover（即故障转移），并将其监控的从机提升主服务器（master），从而保证了系统的高可用性。</p>\n<h3 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\">#</a> 原理</h3>\n<p>哨兵模式是一种特殊的模式，Redis 为其提供了专属的哨兵命令，它是一个独立的进程，能够独立运行。下面使用 Sentinel 搭建 Redis 集群，基本结构图如下所示：</p>\n<p><img src=\"/2022/05/21/redis/redis-zhu-cong-fu-zhi/1K00M955-0.gif\" alt=\"哨兵模式\"></p>\n<blockquote>\n<p>哨兵模式的作用</p>\n</blockquote>\n<ul>\n<li>第一：哨兵节点会以每秒一次的频率对每个 Redis 节点发送 <code>PING</code>  命令，并通过 Redis 节点的回复来判断其运行状态。</li>\n<li>第二：当哨兵监测到主服务器发生故障时，会自动在从节点中选择一台将机器，并其提升为主服务器，然后使用 PubSub 发布订阅模式，通知其他的从节点，修改配置文件，跟随新的主服务器。</li>\n</ul>\n<blockquote>\n<p>多哨兵模式</p>\n</blockquote>\n<p>在实际生产情况中，Redis Sentinel 是集群的高可用的保障，为避免 Sentinel 发生意外，它一般是由 3～5 个节点组成，这样就算挂了个别节点，该集群仍然可以正常运转。其结构图如下所示：</p>\n<p><img src=\"/2022/05/21/redis/redis-zhu-cong-fu-zhi/1K00HQ5-1.gif\" alt=\"Redis哨兵模式\"></p>\n<p>上图所示，多个哨兵之间也存在互相监控，这就形成了多哨兵模式，现在对该模式的工作过程进行讲解，介绍如下：</p>\n<ol>\n<li><strong>主观下线</strong></li>\n</ol>\n<p>主观下线，适用于主服务器和从服务器。如果在规定的时间内 (配置参数：down-after-milliseconds)，Sentinel 节点没有收到目标服务器的有效回复，则判定该服务器为 “主观下线”。比如 Sentinel1 向主服务发送了 <code>PING</code>  命令，在规定时间内没收到主服务器 <code>PONG</code>  回复，则 Sentinel1 判定主服务器为 “主观下线”。</p>\n<ol start=\"2\">\n<li><strong>客观下线</strong></li>\n</ol>\n<p>客观下线，只适用于主服务器。 Sentinel1 发现主服务器出现了故障，它会通过相应的命令，询问其它 Sentinel 节点对主服务器的状态判断。如果超过半数以上的 Sentinel 节点认为主服务器 down 掉，则 Sentinel1 节点判定主服务为 “客观下线”。</p>\n<ol start=\"3\">\n<li><strong>投票选举</strong></li>\n</ol>\n<p>投票选举，所有 Sentinel 节点会通过投票机制，按照谁发现谁去处理的原则，选举 Sentinel1 为领头节点去做 Failover（故障转移）操作。Sentinel1 节点则按照一定的规则在所有从节点中选择一个最优的作为主服务器，然后通过发布订功能通知其余的从节点（slave）更改配置文件，跟随新上任的主服务器（master）。至此就完成了主从切换的操作。</p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/21/redis/redis-fa-bu-ding-yue/",
            "url": "https://prehitting.gitee.io/2022/05/21/redis/redis-fa-bu-ding-yue/",
            "title": "Redis发布订阅",
            "date_published": "2022-05-21T00:51:42.000Z",
            "content_html": "<h2 id=\"redis发布订阅\"><a class=\"markdownIt-Anchor\" href=\"#redis发布订阅\">#</a> Redis 发布订阅</h2>\n<p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p>\n<p>Redis 客户端可以订阅任意数量的频道。</p>\n<p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p>\n<p><img src=\"/2022/05/21/redis/redis-fa-bu-ding-yue/pubsub1.png\" alt=\"img\"></p>\n<p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p>\n<p><img src=\"/2022/05/21/redis/redis-fa-bu-ding-yue/pubsub2.png\" alt=\"img\"></p>\n<h2 id=\"实例\"><a class=\"markdownIt-Anchor\" href=\"#实例\">#</a> 实例</h2>\n<p>以下实例演示了发布订阅是如何工作的，需要开启两个 redis-cli 客户端。</p>\n<p>在我们实例中我们创建了订阅频道名为 <strong>runoobChat</strong>:</p>\n<p><strong>第一个 redis-cli 客户端</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">redis 127.0.0.1:6379&gt; SUBSCRIBE runoobChat\n\nReading messages... (press Ctrl-C to quit)\n1) &quot;subscribe&quot;\n2) &quot;runoobChat&quot;\n3) (integer) 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>现在，我们先重新开启个 redis 客户端，然后在同一个频道 runoobChat 发布两次消息，订阅者就能接收到消息。</p>\n<p><strong>第二个 redis-cli 客户端</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\nredis 127.0.0.1:6379&gt; PUBLISH runoobChat &quot;Redis PUBLISH test&quot;\n\n(integer) 1\n\nredis 127.0.0.1:6379&gt; PUBLISH runoobChat &quot;Learn redis by runoob.com&quot;\n\n(integer) 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>订阅者的客户端会显示如下消息</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1) &quot;message&quot; #消息\n2) &quot;runoobChat&quot; #订阅\n3) &quot;Redis PUBLISH test&quot; #消息详情\n1) &quot;message&quot;\n2) &quot;runoobChat&quot;\n3) &quot;Learn redis by runoob.com&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"命令\"><a class=\"markdownIt-Anchor\" href=\"#命令\">#</a> 命令</h2>\n<ol>\n<li>psubscribe pattern [pattern…]\n<ul>\n<li>订阅一个或多个符合给定模式的频道</li>\n</ul>\n</li>\n<li>pubsub subcommand [argument [argument…]]\n<ul>\n<li>查看订阅与发布系统状态</li>\n</ul>\n</li>\n<li>publish channel message\n<ul>\n<li>将消息发送到指定的频道</li>\n</ul>\n</li>\n<li>punsubscribe channel message\n<ul>\n<li>将消息发送到指定的频道</li>\n</ul>\n</li>\n<li>subscribe channel [channel…]\n<ul>\n<li>订阅给定的一个或多个频道的消息</li>\n</ul>\n</li>\n<li>unsubscribe [channel[channel…]]\n<ul>\n<li>退订频道</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/20/redis/redis-chi-jiu-hua-aof/",
            "url": "https://prehitting.gitee.io/2022/05/20/redis/redis-chi-jiu-hua-aof/",
            "title": "Redis持久化_AOF",
            "date_published": "2022-05-20T05:58:57.000Z",
            "content_html": "<h2 id=\"redis持久化操作之aofappend-on-file\"><a class=\"markdownIt-Anchor\" href=\"#redis持久化操作之aofappend-on-file\">#</a> Redis 持久化操作之 AOF（Append On File)</h2>\n<p>​\t\t以独立日志的方式记录每次写命令，并在 Redis 重启时再重新执行 AOF 文件中的命令以达到恢复数据的目的。主要作用是解决数据持久化的实时性</p>\n<h2 id=\"rdb和aof\"><a class=\"markdownIt-Anchor\" href=\"#rdb和aof\">#</a> RDB 和 AOF</h2>\n<p>antirez 在《Redis 持久化解密》一文中讲述了 RDB 和 AOF 各自的优缺点：</p>\n<ul>\n<li>RDB 是一个紧凑压缩的二进制文件，代表 Redis 在某个时间点上的数据备份。非常适合备份，全量复制等场景。比如每 6 小时执行 bgsave 备份，并把 RDB 文件拷贝到远程机器或者文件系统中，用于灾难恢复。</li>\n<li>Redis 加载 RDB 恢复数据远远快于 AOF 的方式</li>\n<li>RDB 方式数据没办法做到实时持久化，而 AOF 方式可以做到。</li>\n</ul>\n<h2 id=\"aof持久化流程\"><a class=\"markdownIt-Anchor\" href=\"#aof持久化流程\">#</a> AOF 持久化流程</h2>\n<ol>\n<li>\n<p>写入缓存：每次执行命令后，进行 append 操作写入 AOF 缓存</p>\n</li>\n<li>\n<p>同步磁盘：AOF 缓冲区根据对应的策略向硬盘进行同步操作。</p>\n</li>\n<li>\n<p>AOF 重写：随着 AOF 文件越来越大，需要定期对 AOF 文件进行重写，达到压缩的目的。</p>\n</li>\n<li>\n<p>重启加载： 当 Redis 重启时，可以加载 AOF 文件进行数据恢复。</p>\n</li>\n</ol>\n<p><img src=\"/2022/05/20/redis/redis-chi-jiu-hua-aof/image-20220520140702861.png\" alt=\"image-20220520140702861\"></p>\n<p><mark>默认不开启</mark></p>\n<h2 id=\"aof重写\"><a class=\"markdownIt-Anchor\" href=\"#aof重写\">#</a> AOF 重写</h2>\n<p>因为 AOF 持久化是通过保存被执行的写命令来记录 Redis 状态的，所以随着 Redis 长时间运行，AOF 文件中的内容会越来越多，文件的体积也会越来越大，如果不加以控制的话，体积过大的 AOF 文件很可能对 Redis 甚至宿主计算机造成影响。</p>\n<p>为了解决 AOF 文件体积膨胀的问题，Redis 提供了 AOF 文件重写 (rewrite) 功能。通过该功能，Redis 可以创建一个新的 AOF 文件来替代现有的 AOF 文件。新旧两个 AOF 文件所保存的 Redis 状态相同，但是新的 AOF 文件不会包含任何浪费空间的荣誉命令，所以新 AOF 文件的体积通常比旧 AOF 文件的体积要小得很多。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token comment\"># Automatic rewrite of the append only file.</span>\n<span class=\"token comment\"># Redis is able to automatically rewrite the log file implicitly calling</span>\n<span class=\"token comment\"># BGREWRITEAOF when the AOF log size grows by the specified percentage.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># This is how it works: Redis remembers the size of the AOF file after the</span>\n<span class=\"token comment\"># latest rewrite (if no rewrite has happened since the restart, the size of</span>\n<span class=\"token comment\"># the AOF at startup is used).</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># This base size is compared to the current size. If the current size is</span>\n<span class=\"token comment\"># bigger than the specified percentage, the rewrite is triggered. Also</span>\n<span class=\"token comment\"># you need to specify a minimal size for the AOF file to be rewritten, this</span>\n<span class=\"token comment\"># is useful to avoid rewriting the AOF file even if the percentage increase</span>\n<span class=\"token comment\"># is reached but it is still pretty small.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Specify a percentage of zero in order to disable the automatic AOF</span>\n<span class=\"token comment\"># rewrite feature.</span>\n\nauto<span class=\"token operator\">-</span>aof<span class=\"token operator\">-</span>rewrite<span class=\"token operator\">-</span>percentage <span class=\"token number\">100</span>\nauto<span class=\"token operator\">-</span>aof<span class=\"token operator\">-</span>rewrite<span class=\"token operator\">-</span>min<span class=\"token operator\">-</span>size <span class=\"token number\">64</span>mb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/2022/05/20/redis/redis-chi-jiu-hua-aof/ca3fed21bad23c649026bd4565476d1e.png\" alt=\"img\"></p>\n<p>如上图所示，重写前要记录名为  <code>list</code>  的键的状态，AOF 文件要保存五条命令，而重写后，则只需要保存一条命令。</p>\n<p>AOF 文件重写并不需要对现有的 AOF 文件进行任何读取、分析或者写入操作，而是通过读取服务器当前的数据库状态来实现的。首先从数据库中读取键现在的值，然后用一条命令去记录键值对，代替之前记录这个键值对的多条命令，这就是 AOF 重写功能的实现原理。</p>\n<p>在实际过程中，为了避免在执行命令时造成客户端输入缓冲区溢出，AOF 重写在处理列表、哈希表、集合和有序集合这四种可能会带有多个元素的键时，会先检查键所包含的元素数量，如果数量超过 REDISAOFREWRITEITEMSPER_CMD (一般为 64) 常量，则使用多条命令记录该键的值，而不是一条命令。</p>\n<p>rewrite 的触发机制主要有一下三个：</p>\n<ul>\n<li>手动调用 bgrewriteaof 命令，如果当前有正在运行的 rewrite 子进程，则本次 rewrite 会推迟执行，否则，直接触发一次 rewrite。</li>\n<li>通过配置指令手动开启 AOF 功能，如果没有 RDB 子进程的情况下，会触发一次 rewrite，将当前数据库中的数据写入 rewrite 文件。</li>\n<li>在 Redis 定时器中，如果有需要退出执行的 rewrite 并且没有正在运行的 RDB 或者 rewrite 子进程时，触发一次或者 AOF 文件大小已经到达配置的 rewrite 条件也会自动触发一次。</li>\n</ul>\n<h2 id=\"aof的优缺点\"><a class=\"markdownIt-Anchor\" href=\"#aof的优缺点\">#</a> AOF 的优缺点</h2>\n<p><strong>优点：</strong></p>\n<ul>\n<li>每一次修改都同步，文件的完整性更好</li>\n<li>每秒同步一次，可能会丢失疫苗的数据</li>\n<li>从不同步，效率高</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>相对于数据文件来说，aof 远远大于 rdb，修复速度也比 rdb 慢</li>\n<li>aof 运行效率也比 rdb 慢，所以 redis 默认的配置是 rdb 持久化</li>\n</ul>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/20/redis/redis-chi-jiu-hua-rdb/",
            "url": "https://prehitting.gitee.io/2022/05/20/redis/redis-chi-jiu-hua-rdb/",
            "title": "Redis持久化_RDB",
            "date_published": "2022-05-20T05:41:39.000Z",
            "content_html": "<h2 id=\"持久化操作之rdbredis-database\"><a class=\"markdownIt-Anchor\" href=\"#持久化操作之rdbredis-database\">#</a> 持久化操作之 RDB（Redis DataBase）</h2>\n<p>redis 是内存数据库，如果不将内存中的数据保存到磁盘，那么一旦服务器进程退出，服务器中的数据状态也会消失，所以 redis 提供了持久化的功能</p>\n<p>原理是 redis 会单独创建（fork）一个与当前线程一模一样的子进程来进行持久化，这个子线程的所有数据（变量。环境变量，程序程序计数器等）都和原进程一模一样，会先将数据写入到一个临时文件中，待持久化结束了，再用这个临时文件替换上次持久化好的文件，整个过程中，主进程不进行任何的 io 操作，这就确保了极高的性能。</p>\n<p>我们默认的就是 RDB，一般情况下不需要修改这个配置</p>\n<p>如果需要进行大规模数据恢复，且对于数据的完整性回复不是非常的敏感，那么 RDB 方式比 AOF 的方式更加高效。RDb 的缺点是<strong>最后一次持久化的数据可能会丢失</strong><br>\n rdb 保存的文件是<mark> dump.rdb</mark></p>\n<h2 id=\"rdb快照模式原理\"><a class=\"markdownIt-Anchor\" href=\"#rdb快照模式原理\">#</a> RDB 快照模式原理</h2>\n<p>RDB 即快照模式，它是 Redis 默认的数据持久化方式，它会将数据库的快照保存在 dump.rdb 这个二进制文件中。</p>\n<blockquote>\n<p>提示：所谓 “快照” 就是将内存数据以二进制文件的形式保存起来。</p>\n</blockquote>\n<p>我们知道 Redis 是单线程的，也就说一个线程要同时负责多个客户端套接字的并发读写，以及内存数据结构的逻辑读写。</p>\n<p>Redis 服务器不仅需要服务线上请求，同时还要备份内存快照。在备份过程中 Redis 必须进行文件 IO 读写，而 IO 操作会严重服务器的性能。那么如何实现既不影响客户端的请求，又实现快照备份操作呢，这时就用到了多进程。</p>\n<p>Redis 使用操作系统的多进程 COW (Copy On Write) 机制来实现快照持久化操作。</p>\n<p>RDB 实际上是 Redis 内部的一个定时器事件，它每隔一段固定时间就去检查当前数据发生改变的次数和改变的时间频率，看它们是否满足配置文件中规定的持久化触发条件。当满足条件时，Redis 就会通过操作系统调用 fork () 来创建一个子进程，该子进程与父进程享有相同的地址空间。</p>\n<p>Redis 通过子进程遍历整个内存空间来获取存储的数据，从而完成数据持久化操作。注意，此时的主进程则仍然可以对外提供服务，父子进程之间通过操作系统的 COW 机制实现了数据段分离，从而保证了父子进程之间互不影响。</p>\n<h2 id=\"rdb持久化触发策略\"><a class=\"markdownIt-Anchor\" href=\"#rdb持久化触发策略\">#</a> RDB 持久化触发策略</h2>\n<h3 id=\"1手动触发策略\"><a class=\"markdownIt-Anchor\" href=\"#1手动触发策略\">#</a> 1）手动触发策略</h3>\n<p>手动触发是通过 == <code>SAVAE</code> <mark> 命令或者</mark> <code>BGSAVE</code> == 命令将内存数据保存到磁盘文件中。如下所示：</p>\n<p>(== <code>Lastsave</code> == 命令用于查看 BGSAVE 命令是否执行成功)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">127.0.0.1:6379&gt; SAVE\nOK\n127.0.0.1:6379&gt; BGSAVE\nBackground saving started\n127.0.0.1:6379&gt;  LASTSAVE\n(integer) 1611298430<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>SAVE 命令会阻塞 Redis 服务器进程，直到 dump.rdb 文件创建完毕为止，在这个过程中，服务器不能处理任何的命令请求。</p>\n<p><code>BGSAVE</code>  命令是非阻塞式的，所谓非阻塞式，指的是在该命令执行的过程中，并不影响 Redis 服务器处理客户端的其他请求。这是因为 Redis 服务器会 fork () 一个子进程来进行持久化操作（比如创建新的 dunp.rdb 文件），而父进程则继续处理客户端请求。当子进程处理完后会向父进程发送一个信号，通知它已经处理完毕。此时，父进程会用新的 dump.rdb 文件<strong>覆盖掉原来的旧文件</strong>。</p>\n<p>因为 <code>SAVE</code>  命令无需创建子进程，所以执行速度要略快于 <code>BGSAVE</code>  命令，但是 <code>SAVE</code>  命令是阻塞式的，因此其可用性欠佳，如果在数据量较少的情况下，基本上体会不到两个命令的差别，不过仍然建议您使用  <code>BGSAVE</code>  命令。</p>\n<h3 id=\"3自动触发策略\"><a class=\"markdownIt-Anchor\" href=\"#3自动触发策略\">#</a> 3）自动触发策略</h3>\n<p>自动触发策略，是指 Redis 在指定的时间内，数据发生了多少次变化时，会自动执行 <code>BGSAVE</code>  命令。自动触发的条件包含在了 Redis 的配置文件中，如下所示：</p>\n<p>搜索 snapshot</p>\n<p><img src=\"/2022/05/20/redis/redis-chi-jiu-hua-rdb/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80ODQxMjg0Ng==,size_16,color_FFFFFF,t_70-16530255128282.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/2022/05/20/redis/redis-chi-jiu-hua-rdb/2021040519580770.png\" alt=\"在这里插入图片描述\"></p>\n<p>删除 dump.rdb 文件</p>\n<p><img src=\"/2022/05/20/redis/redis-chi-jiu-hua-rdb/20210405200110446.png\" alt=\"在这里插入图片描述\"></p>\n<p>一分钟内设置 5 次 key，自动生成 dump.rdb 文件</p>\n<p><img src=\"/2022/05/20/redis/redis-chi-jiu-hua-rdb/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80ODQxMjg0Ng==,size_16,color_FFFFFF,t_70-16530255548305-16530255563167.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/2022/05/20/redis/redis-chi-jiu-hua-rdb/20210405200611422.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/2022/05/20/redis/redis-chi-jiu-hua-rdb/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80ODQxMjg0Ng==,size_16,color_FFFFFF,t_70-16530256237909-165302562609811.png\" alt=\"在这里插入图片描述\"></p>\n<p>进程被占用，重启云服务器</p>\n<p><strong>触发机制</strong><br>\n 1. 满足 save 规则<br>\n 2. 执行 flushdb 命令<br>\n 3. 退出 redis，都会产生 rdb 文件</p>\n<p><strong>如何恢复 rdb 文件</strong><br>\n 1. 只需要将 rdb 文件放在 redis 启动目录就可以，redis 启动时就会自动检测 dum.rdb 文件，恢复其中数据<br>\n 2.rdb 文件存放的位置</p>\n<p><strong>优点:</strong><br>\n1. 适合大规模的数据恢复<br>\n 2. 对数据的完整性要求不高<br>\n<strong>缺点</strong><br>\n 1. 需要一定时间间隔进程操作，如果 redis 意外宕机，这个最后一次修改的数据就没了<br>\n 2.fork 进程的时候，会占用一定的内存空间</p>\n<p>因此有时候生产环境会将这个文件备份</p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/19/redis/redis-pei-zhi-wen-jian-xiang-jie/",
            "url": "https://prehitting.gitee.io/2022/05/19/redis/redis-pei-zhi-wen-jian-xiang-jie/",
            "title": "Redis配置文件详解",
            "date_published": "2022-05-19T14:43:22.000Z",
            "content_html": "<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">include</span> <span class=\"token operator\">.</span>\\path\\to\\local<span class=\"token operator\">.</span>conf\n<span class=\"token keyword\">include</span> c<span class=\"token punctuation\">:</span>\\path\\to\\other<span class=\"token operator\">.</span>conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>额外载入配置文件，如果需要的话，可以开启此配置</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">bind <span class=\"token number\">192.168</span><span class=\"token number\">.1</span><span class=\"token number\">.100</span> <span class=\"token number\">10.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>\nbind <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span> <span class=\"token operator\">::</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>绑定 redis 服务器网卡 IP，默认为 127.0.0.1, 即本地回环地址。这样的话，访问 redis 服务只能通过本机的客户端连接，而无法通过远程连接。如果 bind 选项为空的话，那会接受所有来自于可用网络接口的连接。如上配置，绑定一个 127.0.0.1 的本机地址和 192.168.1.100 的外网地址。</p>\n<p>默认情况下，如果没有指定 “绑定” 配置指令，Redis 会侦听来自服务器上所有可用网络接口的连接。可以使用 “绑定” 配置指令仅监听一个或多个选定的接口，然后是一个或多个 IP 地址。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">protected</span><span class=\"token operator\">-</span>mode yes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>保护模式，默认是开启状态，只允许本地客户端连接， 可以设置密码或添加 bind 来连接</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">port <span class=\"token number\">6379</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>监听端口号，默认 6379.</p>\n<p>若设置为 0，redis 将不在 socket 上监听任何客户端的连接</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">tcp<span class=\"token operator\">-</span>backlog <span class=\"token number\">511</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>TCP 监听的最大容纳数量，在高并发环境下需要调高这个值以避免连接缓慢。</p>\n<p>Linux 内核会把这个值缩小成 /proc/sys/net/core/somaxconn 对应的值，要提高并发量需要修改这两个值才能达到目的</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">timeout <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>指定在一个 client 空闲多少秒之后关闭连接（0 表示永不关闭）</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">tcp<span class=\"token operator\">-</span>keepalive <span class=\"token number\">300</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>单位是秒，表示将周期性的使用 SO_KEEPALIVE 检测客户端是否还处于健康状态，避免服务器一直阻塞，官方给出的建议值是 300s，如果设置为 0，则不会周期性的检测</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">loglevel notice<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>定义日志级别。<br>\n可以是下面的这些值：</p>\n<ol>\n<li>debug（记录大量日志信息，适用于开发、测试阶段）</li>\n<li>verbose（较多日志信息）</li>\n<li>notice（适量日志信息，使用于生产环境）</li>\n<li>warning（仅有部分重要、关键信息才会被记录）</li>\n</ol>\n<ul>\n<li>line 165</li>\n</ul>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">logfile <span class=\"token string double-quoted-string\">\"\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>日志文件的位置，当指定为空字符串时，为标准输出，如果 redis 已守护进程模式运行，那么日志将会输出到 /dev/null</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">syslog-enabled no<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>要想把日志记录到系统日志，就把它改成 yes，也可以可选择性的更新其他的 syslog 参数以达到你的要求</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">syslog-ident redis<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>设置系统日志的 ID</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">syslog-facility local0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>指定系统日志设置，必须是 USER 或者是 LOCAL0-LOCAL7 之间的值</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">databases 16<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>设置数据库的数目。默认的数据库是 DB 0 ，可以在每个连接上使用 select <dbid> 命令选择一个不同的数据库，dbid 是一个介于 0 到 databases - 1 之间的数值。</dbid></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">save 900 1\nsave 300 10\nsave 60 10000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>存 DB 到磁盘：<br>\n格式：save &lt;间隔时间（秒）&gt; &lt; 写入次数 &gt;<br>\n 根据给定的时间间隔和写入次数将数据保存到磁盘<br>\n下面的例子的意思是：<br>\n900 秒内如果至少有 1 个 key 的值变化，则保存<br>\n 300 秒内如果至少有 10 个 key 的值变化，则保存<br>\n 60 秒内如果至少有 10000 个 key 的值变化，则保存<br>\n　<br>\n注意：你可以注释掉所有的 save 行来停用保存功能。<br>\n也可以直接一个空字符串来实现停用：<br>\nsave “”</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">stop-writes-on-bgsave-error yes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果用户开启了 RDB 快照功能，那么在 redis 持久化数据到磁盘时如果出现失败，默认情况下，redis 会停止接受所有的写请求。<br>\n这样做的好处在于可以让用户很明确的知道内存中的数据和磁盘上的数据已经存在不一致了。<br>\n如果 redis 不顾这种不一致，一意孤行的继续接收写请求，就可能会引起一些灾难性的后果。<br>\n如果下一次 RDB 持久化成功，redis 会自动恢复接受写请求。<br>\n如果不在乎这种数据不一致或者有其他的手段发现和控制这种不一致的话，可以关闭这个功能，<br>\n以便在快照写入失败时，也能确保 redis 继续接受新的写请求。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">rdbcompression yes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>对于存储到磁盘中的快照，可以设置是否进行压缩存储。<br>\n如果是的话，redis 会采用 LZF 算法进行压缩。如果你不想消耗 CPU 来进行压缩的话，<br>\n可以设置为关闭此功能，但是存储在磁盘上的快照会比较大。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">rdbchecksum yes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在存储快照后，我们还可以让 redis 使用 CRC64 算法来进行数据校验，但是这样做会增加大约 10% 的性能消耗，<br>\n如果希望获取到最大的性能提升，可以关闭此功能。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">dbfilename dump.rdb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>设置快照的文件名</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">dir &#x2F;var&#x2F;redis&#x2F;6379<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>设置快照文件的存放路径，这个配置项一定是个目录，而不能是文件名</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">slaveof &lt;masterip&gt; &lt;masterport&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>主从复制，使用 slaveof 来让一个 redis 实例成为另一个 reids 实例的副本，默认关闭<br>\n注意这个只需要在 slave 上配置</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">masterauth &lt;master-password&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果 master 需要密码认证，就在这里设置，默认不设置</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">slave-serve-stale-data yes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当一个 slave 与 master 失去联系，或者复制正在进行的时候，<br>\nslave 可能会有两种表现：<br>\n\\1) 如果为 yes ，slave 仍然会应答客户端请求，但返回的数据可能是过时，<br>\n或者数据可能是空的在第一次同步的时候<br>\n \\2) 如果为 no ，在你执行除了 info he salveof 之外的其他命令时，<br>\nslave 都将返回一个 “SYNC with master in progress” 的错误</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">slave-read-only yes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>你可以配置一个 slave 实体是否接受写入操作。<br>\n通过写入操作来存储一些短暂的数据对于一个 slave 实例来说可能是有用的，<br>\n因为相对从 master 重新同步数而言，据数据写入到 slave 会更容易被删除。<br>\n但是如果客户端因为一个错误的配置写入，也可能会导致一些问题。<br>\n从 redis 2.6 版起，默认 slaves 都是只读的。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">repl-diskless-sync no<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>主从数据复制是否使用无硬盘复制功能。<br>\n新的从站和重连后不能继续备份的从站，需要做所谓的 “完全备份”，即将一个 RDB 文件从主站传送到从站。<br>\n这个传送有以下两种方式：<br>\n1）硬盘备份：redis 主站创建一个新的进程，用于把 RDB 文件写到硬盘上。过一会儿，其父进程递增地将文件传送给从站。<br>\n2）无硬盘备份：redis 主站创建一个新的进程，子进程直接把 RDB 文件写到从站的套接字，不需要用到硬盘。<br>\n在硬盘备份的情况下，主站的子进程生成 RDB 文件。一旦生成，多个从站可以立即排成队列使用主站的 RDB 文件。<br>\n在无硬盘备份的情况下，一次 RDB 传送开始，新的从站到达后，需要等待现在的传送结束，才能开启新的传送。<br>\n如果使用无硬盘备份，主站会在开始传送之间等待一段时间（可配置，以秒为单位），希望等待多个子站到达后并行传送。<br>\n在硬盘低速而网络高速（高带宽）情况下，无硬盘备份更好。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">repl-diskless-sync-delay 5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当启用无硬盘备份，服务器等待一段时间后才会通过套接字向从站传送 RDB 文件，这个等待时间是可配置的。<br>\n这一点很重要，因为一旦传送开始，就不可能再为一个新到达的从站服务。从站则要排队等待下一次 RDB 传送。因此服务器等待一段<br>\n时间以期更多的从站到达。<br>\n延迟时间以秒为单位，默认为 5 秒。要关掉这一功能，只需将它设置为 0 秒，传送会立即启动。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">repl-ping-slave-period 10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>从 redis 会周期性的向主 redis 发出 PING 包，你可以通过 repl_ping_slave_period 指令来控制其周期，默认是 10 秒。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">repl-timeout 60<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来的选项为以下内容设置备份的超时时间：<br>\n1）从从站的角度，同步期间的批量传输的 I/O<br>\n2）从站角度认为的主站超时（数据，ping）<br>\n3）主站角度认为的从站超时（REPLCONF ACK pings)<br>\n 确认这些值比定义的 repl-ping-slave-period 要大，否则每次主站和从站之间通信低速时都会被检测为超时。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">repl-disable-tcp-nodelay no<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>同步之后是否禁用从站上的 TCP_NODELAY<br>\n 如果你选择 yes，redis 会使用较少量的 TCP 包和带宽向从站发送数据。但这会导致在从站增加一点数据的延时。<br>\nLinux 内核默认配置情况下最多 40 毫秒的延时。<br>\n如果选择 no，从站的数据延时不会那么多，但备份需要的带宽相对较多。<br>\n默认情况下我们将潜在因素优化，但在高负载情况下或者在主从站都跳的情况下，把它切换为 yes 是个好主意。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">repl-backlog-size 1mb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>设置备份的工作储备大小。工作储备是一个缓冲区，当从站断开一段时间的情况时，它替从站接收存储数据，<br>\n因此当从站重连时，通常不需要完全备份，只需要一个部分同步就可以，即把从站断开时错过的一部分数据接收。<br>\n工作储备越大，从站可以断开并稍后执行部分同步的断开时间就越长。<br>\n只要有一个从站连接，就会立刻分配一个工作储备。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">repl-backlog-ttl 3600<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>主站有一段时间没有与从站连接，对应的工作储备就会自动释放。<br>\n这个选项用于配置释放前等待的秒数，秒数从断开的那一刻开始计算，值为 0 表示不释放。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">slave-priority 100<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>从站优先级是可以从 redis 的 INFO 命令输出中查到的一个整数。当主站不能正常工作时<br>\n redis sentinel 使用它来选择一个从站并将它提升为主站。<br>\n低优先级的从站被认为更适合于提升，因此如果有三个从站优先级分别是 10，<br>\n100，25，sentinel 会选择优先级为 10 的从站，因为它的优先级最低。<br>\n然而优先级值为 0 的从站不能执行主站的角色，因此优先级为 0 的从站永远不会被 redis sentinel 提升。<br>\n默认优先级是 100</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">min-slaves-to-write 3\nmin-slaves-max-lag 10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>主站可以停止接受写请求，当与它连接的从站少于 N 个，滞后少于 M 秒，N 个从站必须是在线状态。<br>\n延迟的秒数必须 &lt;= 所定义的值，延迟秒数是从最后一次收到的来自从站的 ping 开始计算。ping 通常是每秒一次。<br>\n这一选项并不保证 N 个备份都会接受写请求，但是会限制在指定秒数内由于从站数量不够导致的写操作丢失的情况。<br>\n如果想要至少 3 个从站且延迟少于 10 秒，如上配置即可</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">slave-announce-ip 5.5.5.5\nslave-announce-port 1234<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>Redis master 能够以不同的方式列出所连接 slave 的地址和端口。<br>\n例如，“INFO replication” 部分提供此信息，除了其他工具之外，Redis Sentinel 还使用该信息来发现 slave 实例。<br>\n此信息可用的另一个地方在 masterser 的 “ROLE” 命令的输出中。<br>\n通常由 slave 报告的列出的 IP 和地址，通过以下方式获得：<br>\nIP：通过检查 slave 与 master 连接使用的套接字的对等体地址自动检测地址。<br>\n端口：端口在复制握手期间由 slavet 通信，并且通常是 slave 正在使用列出连接的端口。<br>\n然而，当使用端口转发或网络地址转换（NAT）时，slave 实际上可以通过 (不同的 IP 和端口对) 来到达。 slave 可以使用以下两个选项，以便向 master 报告一组特定的 IP 和端口，<br>\n以便 INFO 和 ROLE 将报告这些值。<br>\n如果你需要仅覆盖端口或 IP 地址，则没必要使用这两个选项。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">requirepass foobared<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>设置 redis 连接密码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">rename-command CONFIG &quot;&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将命令重命名，为了安全考虑，可以将某些重要的、危险的命令重命名。<br>\n当你把某个命令重命名成空字符串的时候就等于取消了这个命令。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">maxclients 10000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>设置客户端最大并发连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件<br>\n描述符数 - 32（redis server 自身会使用一些），如果设置 maxclients 为 0<br>\n 表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">maxmemory &lt;bytes&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key<br>\n 当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，<br>\n会把 Key 存放内存，Value 会存放在 swap 区，格式：maxmemory <bytes></bytes></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">maxmemory-policy noeviction<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当内存使用达到最大值时，redis 使用的清楚策略。有以下几种可以选择：<br>\n1）volatile-lru  利用 LRU 算法移除设置过过期时间的 key (LRU: 最近使用 Least Recently Used)<br>\n 2）allkeys-lru  利用 LRU 算法移除任何 key<br>\n3）volatile-random 移除设置过过期时间的随机 key<br>\n4）allkeys-random 移除随机 ke<br>\n5）volatile-ttl  移除即将过期的 key (minor TTL)<br>\n 6）noeviction noeviction  不移除任何 key，只是返回一个写错误 ，默认选项</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">maxmemory-samples 5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>LRU 和 minimal TTL 算法都不是精准的算法，但是相对精确的算法 (为了节省内存)<br>\n 随意你可以选择样本大小进行检，redis 默认选择 3 个样本进行检测，你可以通过 maxmemory-samples 进行设置样本数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">appendonly no<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>默认 redis 使用的是 rdb 方式持久化，这种方式在许多应用中已经足够用了。但是 redis 如果中途宕机，<br>\n会导致可能有几分钟的数据丢失，根据 save 来策略进行持久化，Append Only File 是另一种持久化方式，<br>\n可以提供更好的持久化特性。Redis 会把每次写入的数据在接收后都写入 appendonly.aof 文件，<br>\n每次启动时 Redis 都会先把这个文件的数据读入内存里，先忽略 RDB 文件。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">appendfilename &quot;appendonly.aof&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>aof 文件名</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">appendfsync always\nappendfsync everysec\nappendfsync no<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>aof 持久化策略的配置<br>\n no 表示不执行 fsync，由操作系统保证数据同步到磁盘，速度最快。<br>\nalways 表示每次写入都执行 fsync，以保证数据同步到磁盘。<br>\neverysec 表示每秒执行一次 fsync，可能会导致丢失这 1s 数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">no-appendfsync-on-rewrite no<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在 aof 重写或者写入 rdb 文件的时候，会执行大量 IO，此时对于 everysec 和 always 的 aof 模式来说，<br>\n执行 fsync 会造成阻塞过长时间，no-appendfsync-on-rewrite 字段设置为默认设置为 no。<br>\n如果对延迟要求很高的应用，这个字段可以设置为 yes，否则还是设置为 no，这样对持久化特性来说这是更安全的选择。<br>\n设置为 yes 表示 rewrite 期间对新写操作不 fsync, 暂时存在内存中，等 rewrite 完成后再写入，默认为 no，建议 yes。<br>\nLinux 的默认 fsync 策略是 30 秒。可能丢失 30 秒数据。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">auto-aof-rewrite-percentage 100<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>aof 自动重写配置，当目前 aof 文件大小超过上一次重写的 aof 文件大小的百分之多少进行重写，<br>\n即当 aof 文件增长到一定大小的时候，Redis 能够调用 bgrewriteaof 对日志文件进行重写。<br>\n当前 AOF 文件大小是上次日志重写得到 AOF 文件大小的二倍（设置为 100）时，自动启动新的日志重写过程。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">auto-aof-rewrite-min-size 64mb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>设置允许重写的最小 aof 文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">aof-load-truncated yes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>aof 文件可能在尾部是不完整的，当 redis 启动的时候，aof 文件的数据被载入内存。<br>\n重启可能发生在 redis 所在的主机操作系统宕机后，尤其在 ext4 文件系统没有加上 data=ordered 选项，出现这种现象<br>\n redis 宕机或者异常终止不会造成尾部不完整现象，可以选择让 redis 退出，或者导入尽可能多的数据。<br>\n如果选择的是 yes，当截断的 aof 文件被导入的时候，会自动发布一个 log 给客户端然后 load。<br>\n如果是 no，用户必须手动 redis-check-aof 修复 AOF 文件才可以。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">lua-time-limit 5000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果达到最大时间限制（毫秒），redis 会记个 log，然后返回 error。当一个脚本超过了最大时限。<br>\n只有 SCRIPT KILL 和 SHUTDOWN NOSAVE 可以用。第一个可以杀没有调 write 命令的东西。<br>\n要是已经调用了 write，只能用第二个命令杀</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cluster-enabled yes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>集群开关，默认是不开启集群模式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cluster-config-file nodes-6379.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。<br>\n这个文件并不需要手动配置，这个配置文件有 Redis 生成并更新，每个 Redis 集群节点需要一个单独的配置文件<br>\n请确保与实例运行的系统中配置文件名称不冲突</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cluster-node-timeout 15000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>节点互连超时的阀值，集群节点超时毫秒数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cluster-slave-validity-factor 10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在进行故障转移的时候，全部 slave 都会请求申请为 master，但是有些 slave 可能与 master 断开连接一段时间了，<br>\n导致数据过于陈旧，这样的 slave 不应该被提升为 master。该参数就是用来判断 slave 节点与 master 断线的时间是否过长。<br>\n判断方法是：<br>\n比较 slave 断开连接的时间和 (node-timeout * slave-validity-factor) + repl-ping-slave-period<br>\n 如果节点超时时间为三十秒，并且 slave-validity-factor 为 10,<br>\n 假设默认的 repl-ping-slave-period 是 10 秒，即如果超过 310 秒 slave 将不会尝试进行故障转移</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cluster-migration-barrier 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>master 的 slave 数量大于该值，slave 才能迁移到其他孤立 master 上，如这个参数若被设为 2，<br>\n那么只有当一个主节点拥有 2 个可工作的从节点时，它的一个从节点会尝试迁移。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cluster-require-full-coverage yes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>默认情况下，集群全部的 slot 有节点负责，集群状态才为 ok，才能提供服务。<br>\n设置为 no，可以在 slot 没有全部分配的时候提供服务。<br>\n不建议打开该配置，这样会造成分区的时候，小分区的 master 一直在接受写请求，而造成很长时间数据不一致</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">slowlog-log-slower-than 10000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>slog log 是用来记录 redis 运行中执行比较慢的命令耗时。<br>\n当命令的执行超过了指定时间，就记录在 slow log 中，slog log 保存在内存中，所以没有 IO 操作。<br>\n执行时间比 slowlog-log-slower-than 大的请求记录到 slowlog 里面，单位是微秒，所以 1000000 就是 1 秒。<br>\n注意，负数时间会禁用慢查询日志，而 0 则会强制记录所有命令。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">slowlog-max-len 128<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉，这个长度没有限制。<br>\n只要有足够的内存就行，你可以通过 SLOWLOG RESET 来释放内存</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">latency-monitor-threshold 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>延迟监控功能是用来监控 redis 中执行比较缓慢的一些操作，用 LATENCY 打印 redis 实例在跑命令时的耗时图表。<br>\n只记录大于等于下边设置的值的操作，0 的话，就是关闭监视。<br>\n默认延迟监控功能是关闭的，如果你需要打开，也可以通过 CONFIG SET 命令动态设置。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">notify-keyspace-events &quot;&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了 Redis 数据集的事件。因为开启键空间通知功能需要消耗一些 CPU ，所以在默认配置下，该功能处于关闭状态。<br>\nnotify-keyspace-events 的参数可以是以下字符的任意组合，它指定了服务器该发送哪些类型的通知：<br>\nK 键空间通知，所有通知以 <strong>keyspace@</strong> 为前缀<br>\n E 键事件通知，所有通知以 <strong>keyevent@</strong> 为前缀<br>\n g DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知<br>\n $ 字符串命令的通知<br>\n l 列表命令的通知<br>\n s 集合命令的通知<br>\n h 哈希命令的通知<br>\n z 有序集合命令的通知<br>\n x 过期事件：每当有过期键被删除时发送<br>\n e 驱逐 (evict) 事件：每当有键因为 maxmemory 政策而被删除时发送<br>\n A 参数 g$lshzxe 的别名<br>\n输入的参数中至少要有一个 K 或者 E，否则的话，不管其余的参数是什么，都不会有任何 通知被分发。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hash-max-ziplist-entries 512<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>hash 类型的数据结构在编码上可以使用 ziplist 和 hashtable。<br>\nziplist 的特点就是文件存储 (以及内存存储) 所需的空间较小，在内容较小时，性能和 hashtable 几乎一样。<br>\n因此 redis 对 hash 类型默认采取 ziplist。如果 hash 中条目的条目个数或者 value 长度达到阀值，将会被重构为 hashtable。<br>\n这个参数指的是 ziplist 中允许存储的最大条目个数，，默认为 512，建议为 128</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hash-max-ziplist-value 64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>ziplist 中允许条目 value 值最大字节数，默认为 64，建议为 1024</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">list-max-ziplist-size -2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当取正值的时候，表示按照数据项个数来限定每个 quicklist 节点上的 ziplist 长度。比如，当这个参数配置成 5 的时候，表示每个 quicklist 节点的 ziplist 最多包含 5 个数据项。<br>\n当取负值的时候，表示按照占用字节数来限定每个 quicklist 节点上的 ziplist 长度。这时，它只能取 - 1 到 - 5 这五个值，每个值含义如下：<br>\n-5: 每个 quicklist 节点上的 ziplist 大小不能超过 64 Kb。（注：1kb =&gt; 1024 bytes）<br>\n-4: 每个 quicklist 节点上的 ziplist 大小不能超过 32 Kb。<br>\n-3: 每个 quicklist 节点上的 ziplist 大小不能超过 16 Kb。<br>\n-2: 每个 quicklist 节点上的 ziplist 大小不能超过 8 Kb。（-2 是 Redis 给出的默认值）<br>\n-1: 每个 quicklist 节点上的 ziplist 大小不能超过 4 Kb。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">list-compress-depth 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个参数表示一个 quicklist 两端不被压缩的节点个数。<br>\n注：这里的节点个数是指 quicklist 双向链表的节点个数，而不是指 ziplist 里面的数据项个数。<br>\n实际上，一个 quicklist 节点上的 ziplist，如果被压缩，就是整体被压缩的。<br>\n参数 list-compress-depth 的取值含义如下：<br>\n0: 是个特殊值，表示都不压缩。这是 Redis 的默认值。<br>\n1: 表示 quicklist 两端各有 1 个节点不压缩，中间的节点压缩。<br>\n2: 表示 quicklist 两端各有 2 个节点不压缩，中间的节点压缩。<br>\n3: 表示 quicklist 两端各有 3 个节点不压缩，中间的节点压缩。<br>\n依此类推…<br>\n 由于 0 是个特殊值，很容易看出 quicklist 的头节点和尾节点总是不被压缩的，以便于在表的两端进行快速存取。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">set-max-intset-entries 512<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>数据量小于等于 set-max-intset-entries 用 intset，大于 set-max-intset-entries 用 set</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">zset-max-ziplist-entries 128\nzset-max-ziplist-value 64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>数据量小于等于 zset-max-ziplist-entries 用 ziplist，大于 zset-max-ziplist-entries 用 zset</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hll-sparse-max-bytes 3000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>value 大小小于等于 hll-sparse-max-bytes 使用稀疏数据结构（sparse）<br>\n大于 hll-sparse-max-bytes 使用稠密的数据结构（dense），一个比 16000 大的 value 是几乎没用的，<br>\n建议的 value 大概为 3000。如果对 CPU 要求不高，对空间要求较高的，建议设置到 10000 左右</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">activerehashing yes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Redis 将在每 100 毫秒时使用 1 毫秒的 CPU 时间来对 redis 的 hash 表进行重新 hash，可以降低内存的使用。<br>\n当你的使用场景中，有非常严格的实时性需要，不能够接受 Redis 时不时的对请求有 2 毫秒的延迟的话，把这项配置为 no。<br>\n如果没有这么严格的实时性要求，可以设置为 yes，以便能够尽可能快的释放内存</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">client-output-buffer-limit normal 0 0 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，用来强制关闭传输缓慢的客户端。<br>\n对于 normal client，第一个 0 表示取消 hard limit，第二个 0 和第三个 0 表示取消 soft limit，normal client 默认取消限制，因为如果没有寻问，他们是不会接收数据的</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">client-output-buffer-limit slave 256mb 64mb 60<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>对于 slave client 和 MONITER client，如果 client-output-buffer 一旦超过 256mb，又或者超过 64mb 持续 60 秒，那么服务器就会立即断开客户端连接。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">client-output-buffer-limit pubsub 32mb 8mb 60<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>对于 pubsub client，如果 client-output-buffer 一旦超过 32mb，又或者超过 8mb 持续 60 秒，那么服务器就会立即断开客户端连接。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hz 10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>redis 执行任务的频率为 1s 除以 hz</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">aof-rewrite-incremental-fsync yes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在 aof 重写的时候，如果打开了 aof-rewrite-incremental-fsync 开关，系统会每 32MB 执行一次 fsync。<br>\n这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值</p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/18/redis/jedis/",
            "url": "https://prehitting.gitee.io/2022/05/18/redis/jedis/",
            "title": "Jedis",
            "date_published": "2022-05-18T07:51:30.000Z",
            "content_html": "<h2 id=\"jedis\"><a class=\"markdownIt-Anchor\" href=\"#jedis\">#</a> Jedis</h2>\n<blockquote>\n<p>官方推荐的 Java 连接开发工具</p>\n</blockquote>\n<ol>\n<li>导入依赖</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>redis.clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jedis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.2.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>fastjson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.0.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>test</li>\n</ol>\n<p><strong>创建 Jedis 对象即可使用 redis 的全部命令</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestPing</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//1. new Jedis对象</span>\n        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 可以使用Redis的所有命令</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"常用api\"><a class=\"markdownIt-Anchor\" href=\"#常用api\">#</a> 常用 API</h2>\n<hr>\n<p>所有的命令都不变</p>\n<p>String</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestPing</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//1. new Jedis对象</span>\n        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 可以使用Redis的所有命令</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"清空数据\"</span><span class=\"token operator\">+</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">flushDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"判断某个key是否存在\"</span><span class=\"token operator\">+</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新增键值对\"</span><span class=\"token operator\">+</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"YiMing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"系统中的所有键值对：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查看key对应的类型\"</span><span class=\"token operator\">+</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"随机返回key空间的一个\"</span><span class=\"token operator\">+</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">randomKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get值\"</span><span class=\"token operator\">+</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"重命名\"</span><span class=\"token operator\">+</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"按索引查询\"</span><span class=\"token operator\">+</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"返回key的数目\"</span><span class=\"token operator\">+</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">dbSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除键值对\"</span><span class=\"token operator\">+</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>List</p>\n<p>Set</p>\n<p>Hash</p>\n<p>Zset</p>\n<h2 id=\"事务处理\"><a class=\"markdownIt-Anchor\" href=\"#事务处理\">#</a> 事务处理</h2>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n\n\n\n\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson2<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONObject</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//一定要手动导入这个包</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Jedis</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Transaction</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test02</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">JSONObject</span> jsonObject<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"YiMing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Transaction</span> transaction <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">multi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//开启事务</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            transaction<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            transaction<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user2\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            transaction<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            transaction<span class=\"token punctuation\">.</span><span class=\"token function\">discard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"springboot整合\"><a class=\"markdownIt-Anchor\" href=\"#springboot整合\">#</a> Springboot 整合</h2>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 127.0.0.1\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span>\n  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">3306</span>\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> root\n    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>\n<p>Springboot 操作数据：Spring-data，jpa，mongodb，redis</p>\n</li>\n<li>\n<p>在 Springboot 2.x 之后，原来使用的 jedis 被替换为了 lettuce</p>\n<ul>\n<li>jedis：采用的直连，多个线程操作的话不安全，如果想要避免，使用 jedis pool 连接池  BIO</li>\n<li>lettuce：采用 netty，实例可以在多个线程中共享，不存在线程不安全的情况，可以减少线程数据了  NIO</li>\n</ul>\n</li>\n</ul>\n<p><strong>勉为其难地看看源码吧</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n   <span class=\"token annotation punctuation\">@ConditionalOnMissingBean</span><span class=\"token punctuation\">(</span>\n       name <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"redisTemplate\"</span><span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">)</span>\n   <span class=\"token annotation punctuation\">@ConditionalOnSingleCandidate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> redisConnectionFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       template<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>redisConnectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token annotation punctuation\">@Bean</span>\n   <span class=\"token annotation punctuation\">@ConditionalOnMissingBean</span>\n   <span class=\"token annotation punctuation\">@ConditionalOnSingleCandidate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">StringRedisTemplate</span> <span class=\"token function\">stringRedisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> redisConnectionFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisTemplate</span><span class=\"token punctuation\">(</span>redisConnectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>Test</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisSpringbootApplicationTests</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//来自RedisAutoConfig</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">contextLoads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//redisTemplate 操作不同的数据类型，api和指令一致</span>\n        <span class=\"token comment\">//redisTemplate.opsForValue  操作字符串</span>\n        <span class=\"token comment\">//opsForSet</span>\n        <span class=\"token comment\">//opsForHash</span>\n        <span class=\"token comment\">//opsForZSet</span>\n        <span class=\"token comment\">//opsForGeo</span>\n        <span class=\"token comment\">//opsForHyperLogLog</span>\n        <span class=\"token comment\">//除了基本操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务和CRUD</span>\n\n        <span class=\"token comment\">//获取redis连接对象</span>\n        <span class=\"token class-name\">RedisConnection</span> redisConnection <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        redisConnection<span class=\"token punctuation\">.</span><span class=\"token function\">flushDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        redisConnection<span class=\"token punctuation\">.</span><span class=\"token function\">flushAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"自定义redistemplate\"><a class=\"markdownIt-Anchor\" href=\"#自定义redistemplate\">#</a> 自定义 RedisTemplate</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token punctuation\">&#123;</span>\n    \n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \ttemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ObjectMapper</span> om <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        om<span class=\"token punctuation\">.</span><span class=\"token function\">setVisibility</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyAccessor</span><span class=\"token punctuation\">.</span>ALL<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonAutoDetect<span class=\"token punctuation\">.</span>Visibility</span><span class=\"token punctuation\">.</span>ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        om<span class=\"token punctuation\">.</span><span class=\"token function\">enableDefaultTyping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapper<span class=\"token punctuation\">.</span>DefaultTyping</span><span class=\"token punctuation\">.</span>NON_FINAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jackson2JsonRedisSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">setObjectMapper</span><span class=\"token punctuation\">(</span>om<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringRedisSerializer</span> stringRedisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// key采用String的序列化方式</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span>stringRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// hash的key也采用String的序列化方式</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashKeySerializer</span><span class=\"token punctuation\">(</span>stringRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// value序列化方式采用jackson</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// hash的value序列化方式采用jackson</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashValueSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"redis工具类\"><a class=\"markdownIt-Anchor\" href=\"#redis工具类\">#</a> Redis 工具类</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisUtil</span> <span class=\"token punctuation\">&#123;</span>\n\t\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> redisTemplate<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// =============================common============================</span>\n\t<span class=\"token comment\">/**\n\t * 指定缓存失效时间\n\t * @param key 键\n\t * @param time 时间(秒)\n\t * @return\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">expire</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 根据key 获取过期时间\n\t * @param key 键 不能为null\n\t * @return 时间(秒) 返回0代表为永久有效\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getExpire</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getExpire</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 判断key是否存在\n\t * @param key 键\n\t * @return true 存在 false不存在\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">hasKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 删除缓存\n\t * @param key 可以传一个值 或多个\n\t */</span>\n\t<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">arrayToList</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// ============================String=============================</span>\n\t<span class=\"token comment\">/**\n\t * 普通缓存获取\n\t * @param key 键\n\t * @return 值\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 普通缓存放入\n\t * @param key 键\n\t * @param value 值\n\t * @return true成功 false失败\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 普通缓存放入并设置时间\n\t * @param key 键\n\t * @param value 值\n\t * @param time 时间(秒) time要大于0 如果time小于等于0 将设置无限期\n\t * @return true成功 false 失败\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 递增\n\t * @param key 键\n\t * @param delta 要增加几(大于0)\n\t * @return\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">incr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> delta<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delta <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"递增因子必须大于0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 递减\n\t * @param key 键\n\t * @param delta 要减少几(小于0)\n\t * @return\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">decr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> delta<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delta <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"递减因子必须大于0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// ================================Map=================================</span>\n\t<span class=\"token comment\">/**\n\t * HashGet\n\t * @param key 键 不能为null\n\t * @param item 项 不能为null\n\t * @return 值\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">hget</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 获取hashKey对应的所有键值\n\t * @param key 键\n\t * @return 对应的多个键值\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">hmget</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * HashSet\n\t * @param key 键\n\t * @param map 对应多个键值\n\t * @return true 成功 false 失败\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hmset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putAll</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * HashSet 并设置时间\n\t * @param key 键\n\t * @param map 对应多个键值\n\t * @param time 时间(秒)\n\t * @return true成功 false失败\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hmset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putAll</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 向一张hash表中放入数据,如果不存在将创建\n\t * @param key 键\n\t * @param item 项\n\t * @param value 值\n\t * @return true 成功 false失败\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> item<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 向一张hash表中放入数据,如果不存在将创建\n\t * @param key 键\n\t * @param item 项\n\t * @param value 值\n\t * @param time 时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间\n\t * @return true 成功 false失败\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> item<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 删除hash表中的值\n\t * @param key 键 不能为null\n\t * @param item 项 可以使多个 不能为null\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hdel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 判断hash表中是否有该项的值\n\t * @param key 键 不能为null\n\t * @param item 项 不能为null\n\t * @return true 存在 false不存在\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hHasKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * hash递增 如果不存在,就会创建一个 并把新增后的值返回\n\t * @param key 键\n\t * @param item 项\n\t * @param by 要增加几(大于0)\n\t * @return\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">hincr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> item<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> by<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> by<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * hash递减\n\t * @param key 键\n\t * @param item 项\n\t * @param by 要减少记(小于0)\n\t * @return\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">hdecr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> item<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> by<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>by<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// ============================set=============================</span>\n\t<span class=\"token comment\">/**\n\t * 根据key获取Set中的所有值\n\t * @param key 键\n\t * @return\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">sGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 根据value从一个set中查询,是否存在\n\t * @param key 键\n\t * @param value 值\n\t * @return true 存在 false不存在\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">sHasKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isMember</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 将数据放入set缓存\n\t * @param key 键\n\t * @param values 值 可以是多个\n\t * @return 成功个数\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">sSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 将set数据放入缓存\n\t * @param key 键\n\t * @param time 时间(秒)\n\t * @param values 值 可以是多个\n\t * @return 成功个数\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">sSetAndTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">Long</span> count <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 获取set缓存的长度\n\t * @param key 键\n\t * @return\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">sGetSetSize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 移除值为value的\n\t * @param key 键\n\t * @param values 值 可以是多个\n\t * @return 移除的个数\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">setRemove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">Long</span> count <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// ===============================list=================================</span>\n\n\t<span class=\"token comment\">/**\n\t * 获取list缓存的内容\n\t * @param key 键\n\t * @param start 开始\n\t * @param end 结束 0 到 -1代表所有值\n\t * @return\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">lGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 获取list缓存的长度\n\t * @param key 键\n\t * @return\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">lGetListSize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 通过索引 获取list中的值\n\t * @param key 键\n\t * @param index 索引 index>=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推\n\t * @return\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">lGetIndex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 将list放入缓存\n\t * @param key 键\n\t * @param value 值\n\t * @param time 时间(秒)\n\t * @return\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">lSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rightPush</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 将list放入缓存\n\t * @param key 键\n\t * @param value 值\n\t * @param time 时间(秒)\n\t * @return\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">lSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rightPush</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 将list放入缓存\n\t * @param key 键\n\t * @param value 值\n\t * @param time 时间(秒)\n\t * @return\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">lSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rightPushAll</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 将list放入缓存\n\t * \n\t * @param key 键\n\t * @param value 值\n\t * @param time 时间(秒)\n\t * @return\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">lSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rightPushAll</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 根据索引修改list中的某条数据\n\t * @param key 键\n\t * @param index 索引\n\t * @param value 值\n\t * @return\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">lUpdateIndex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * 移除N个值为value\n\t * @param key 键\n\t * @param count 移除多少个\n\t * @param value 值\n\t * @return 移除的个数\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">lRemove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> count<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">Long</span> remove <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> remove<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Redis",
                "Jedis"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/18/redis/shi-wu/",
            "url": "https://prehitting.gitee.io/2022/05/18/redis/shi-wu/",
            "title": "事务",
            "date_published": "2022-05-18T03:41:50.000Z",
            "content_html": "<h2 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h2>\n<hr>\n<p>Redis 事务的本质：一组命令的集合，一组事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序进行</p>\n<p>一次性，顺序性，排他性</p>\n<ul>\n<li>批量操作在发送 EXEC 命令前被放入队列缓存。</li>\n<li>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li>\n<li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li>\n</ul>\n<p>一个事务从开始到执行会经历以下三个阶段：</p>\n<ul>\n<li>开始事务 (multi)。0</li>\n<li>命令入队。</li>\n<li>执行事务 (exec)。</li>\n</ul>\n<p><font color=\"red\">Redis 事务没有隔离级别的概念</font></p>\n<p>所有命令在事务中，并没有立即执行。只有发起执行命令时才会执行</p>\n<p><font color=\"red\">Redis 单条命令是保持原子性的，但是事务不保证原子性</font></p>\n<hr>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> multi\n<span class=\"token comment\">#开启事务</span>\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> k1 v1\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> k2 v2\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> k3 v3\n<span class=\"token comment\">#此时并未执行</span>\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">exec</span>\n<span class=\"token comment\">#执行事务</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"异常\"><a class=\"markdownIt-Anchor\" href=\"#异常\">#</a> 异常</h3>\n<blockquote>\n<p>编译型异常</p>\n</blockquote>\n<p>（代码有误，命令有错），事务中所有的命令都不会执行</p>\n<blockquote>\n<p>运行时异常</p>\n</blockquote>\n<p>如果事务队列中存在错误，那么执行的时候，其他命令可以正常执行，错误命令抛出异常</p>\n<h3 id=\"监控\"><a class=\"markdownIt-Anchor\" href=\"#监控\">#</a> 监控</h3>\n<blockquote>\n<p>悲观锁</p>\n</blockquote>\n<p>认为什么时候都会出错，无论做什么都会加锁</p>\n<blockquote>\n<p>乐观锁</p>\n</blockquote>\n<p>认为什么时候都不会出问题，所以不会上锁。</p>\n<p>使用 version 字段，更新数据的时候判断在此期间是否有人修改过数据</p>\n<h3 id=\"命令\"><a class=\"markdownIt-Anchor\" href=\"#命令\">#</a> 命令</h3>\n<ol>\n<li>multi \t\t开启事务</li>\n<li>exec          执行事务</li>\n<li>discard    放弃事务</li>\n<li>unwatch   取消 watch 命令对所有 key 的监视</li>\n<li>watch key [key…]     监视一个（或多个）key，如果在事务执行之前这个（或这些）key 被其他命令所改动，那么事务将被打断\n<ul>\n<li>执行 watch 命令，相当于拿到了这个 key 的 version，每次执行完事务后要重新加锁，无论事务执行成功或失败，Redis 都会自动解锁</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/18/redis/redis-te-shu-shu-ju-lei-xing/bitmap/",
            "url": "https://prehitting.gitee.io/2022/05/18/redis/redis-te-shu-shu-ju-lei-xing/bitmap/",
            "title": "BitMap",
            "date_published": "2022-05-18T03:28:33.000Z",
            "content_html": "<h2 id=\"bitmaps\"><a class=\"markdownIt-Anchor\" href=\"#bitmaps\">#</a> BitMaps</h2>\n<p>相当于 map&lt;Integer,Byte&gt;</p>\n<blockquote>\n<p>位存储</p>\n</blockquote>\n<p>统计用户信息，活跃 or 不活跃，登录 or 未登录，凡是只有两个状态的，都可以使用 BitMaps</p>\n<h2 id=\"命令\"><a class=\"markdownIt-Anchor\" href=\"#命令\">#</a> 命令</h2>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">setbit （key） （offset） （value）\ngetbit (key) (offset)\nbitcount (key) [start,end]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>实例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">setbit sign 0 0\nsetbit sign 7 1\ngetbit sign 7\nbitcount sign<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/17/redis/redis-te-shu-shu-ju-lei-xing/hyperloglog/",
            "url": "https://prehitting.gitee.io/2022/05/17/redis/redis-te-shu-shu-ju-lei-xing/hyperloglog/",
            "title": "HyperLogLog",
            "date_published": "2022-05-17T12:41:46.000Z",
            "content_html": "<blockquote>\n<p>什么是基数</p>\n</blockquote>\n<p>一个集合中不重复的元素个数，可以接收误差</p>\n<blockquote>\n<p>简介</p>\n</blockquote>\n<ul>\n<li>Redis 在 2.8.9 版本添加了 HyperLogLog 结构</li>\n<li>基数统计算法</li>\n<li>优点：占用内存固定，2^64 不同的元素只需要 12KB 内存！如果要从内存角度来比较，Hyperloglog 首选</li>\n<li>存在 0.81% 的错误率，如果不允许容错，使用 set 即可</li>\n<li>网站的 UV（一个人访问一个网站多次，但算作一个人）\n<ul>\n<li>传统统计方式：set 存储用户 id，然后就可以统计 set 中的元素作为标准判断</li>\n<li>用传统方式保存大量用户 id 会比较麻烦</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>命令</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>[PFADD key element [element …]] 添加指定元素到 HyperLogLog 中。</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>[PFCOUNT key [key …]] 返回给定 HyperLogLog 的基数估算值。</td>\n<td></td>\n</tr>\n<tr>\n<td>3</td>\n<td>[PFMERGE destkey sourcekey [sourcekey …]] 将多个 HyperLogLog 合并为一个 HyperLogLog</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/17/redis/redis-ji-ben-shu-ju-lei-xing/redis-ming-ling-lie-biao-list/",
            "url": "https://prehitting.gitee.io/2022/05/17/redis/redis-ji-ben-shu-ju-lei-xing/redis-ming-ling-lie-biao-list/",
            "title": "Redis命令_列表（List）",
            "date_published": "2022-05-17T09:19:26.000Z",
            "content_html": "<h2 id=\"list命令\"><a class=\"markdownIt-Anchor\" href=\"#list命令\">#</a> List 命令</h2>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>[BLPOP key1 <a href=\"https://www.runoob.com/redis/lists-blpop.html\">key2 ] timeout</a> 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>[BRPOP key1 <a href=\"https://www.runoob.com/redis/lists-brpop.html\">key2 ] timeout</a> 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td>3</td>\n<td><a href=\"https://www.runoob.com/redis/lists-brpoplpush.html\">BRPOPLPUSH source destination timeout</a> 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td>4</td>\n<td><a href=\"https://www.runoob.com/redis/lists-lindex.html\">LINDEX key index</a> 通过索引获取列表中的元素</td>\n</tr>\n<tr>\n<td>5</td>\n<td><a href=\"https://www.runoob.com/redis/lists-linsert.html\">LINSERT key BEFORE|AFTER pivot value</a> 在列表的元素前或者后插入元素</td>\n</tr>\n<tr>\n<td>6</td>\n<td><a href=\"https://www.runoob.com/redis/lists-llen.html\">LLEN key</a> 获取列表长度</td>\n</tr>\n<tr>\n<td>7</td>\n<td><a href=\"https://www.runoob.com/redis/lists-lpop.html\">LPOP key</a> 移出并获取列表的第一个元素</td>\n</tr>\n<tr>\n<td>8</td>\n<td>[LPUSH key value1 <a href=\"https://www.runoob.com/redis/lists-lpush.html\">value2]</a> 将一个或多个值插入到列表头部</td>\n</tr>\n<tr>\n<td>9</td>\n<td><a href=\"https://www.runoob.com/redis/lists-lpushx.html\">LPUSHX key value</a> 将一个值插入到已存在的列表头部</td>\n</tr>\n<tr>\n<td>10</td>\n<td><a href=\"https://www.runoob.com/redis/lists-lrange.html\">LRANGE key start stop</a> 获取列表指定范围内的元素</td>\n</tr>\n<tr>\n<td>11</td>\n<td><a href=\"https://www.runoob.com/redis/lists-lrem.html\">LREM key count value</a> 移除列表元素</td>\n</tr>\n<tr>\n<td>12</td>\n<td><a href=\"https://www.runoob.com/redis/lists-lset.html\">LSET key index value</a> 通过索引设置列表元素的值</td>\n</tr>\n<tr>\n<td>13</td>\n<td><a href=\"https://www.runoob.com/redis/lists-ltrim.html\">LTRIM key start stop</a> 对一个列表进行修剪 (trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td>\n</tr>\n<tr>\n<td>14</td>\n<td><a href=\"https://www.runoob.com/redis/lists-rpop.html\">RPOP key</a> 移除列表的最后一个元素，返回值为移除的元素。</td>\n</tr>\n<tr>\n<td>15</td>\n<td><a href=\"https://www.runoob.com/redis/lists-rpoplpush.html\">RPOPLPUSH source destination</a> 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td>\n</tr>\n<tr>\n<td>16</td>\n<td>[RPUSH key value1 <a href=\"https://www.runoob.com/redis/lists-rpush.html\">value2]</a> 在列表中添加一个或多个值</td>\n</tr>\n<tr>\n<td>17</td>\n<td><a href=\"https://www.runoob.com/redis/lists-rpushx.html\">RPUSHX key value</a> 为已存在的列表添加值</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/17/redis/redis-ji-ben-shu-ju-lei-xing/redis-ming-ling-you-xu-ji-he-sortedlist/",
            "url": "https://prehitting.gitee.io/2022/05/17/redis/redis-ji-ben-shu-ju-lei-xing/redis-ming-ling-you-xu-ji-he-sortedlist/",
            "title": "Redis命令_有序集合（SortedList）",
            "date_published": "2022-05-17T09:17:46.000Z",
            "content_html": "<h2 id=\"sortedlist\"><a class=\"markdownIt-Anchor\" href=\"#sortedlist\">#</a> SortedList</h2>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>[ZADD key score1 member1 <a href=\"https://www.runoob.com/redis/sorted-sets-zadd.html\">score2 member2]</a> 向有序集合添加一个或多个成员，或者更新已存在成员的分数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zcard.html\">ZCARD key</a> 获取有序集合的成员数</td>\n</tr>\n<tr>\n<td>3</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zcount.html\">ZCOUNT key min max</a> 计算在有序集合中指定区间分数的成员数</td>\n</tr>\n<tr>\n<td>4</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zincrby.html\">ZINCRBY key increment member</a> 有序集合中对指定成员的分数加上增量 increment</td>\n</tr>\n<tr>\n<td>5</td>\n<td>[ZINTERSTORE destination numkeys key <a href=\"https://www.runoob.com/redis/sorted-sets-zinterstore.html\">key …]</a> 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中</td>\n</tr>\n<tr>\n<td>6</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zlexcount.html\">ZLEXCOUNT key min max</a> 在有序集合中计算指定字典区间内成员数量</td>\n</tr>\n<tr>\n<td>7</td>\n<td>[ZRANGE key start stop <a href=\"https://www.runoob.com/redis/sorted-sets-zrange.html\">WITHSCORES]</a> 通过索引区间返回有序集合指定区间内的成员</td>\n</tr>\n<tr>\n<td>8</td>\n<td>[ZRANGEBYLEX key min max <a href=\"https://www.runoob.com/redis/sorted-sets-zrangebylex.html\">LIMIT offset count]</a> 通过字典区间返回有序集合的成员</td>\n</tr>\n<tr>\n<td>9</td>\n<td>[ZRANGEBYSCORE key min max <a href=\"https://www.runoob.com/redis/sorted-sets-zrangebyscore.html\">WITHSCORES] [LIMIT]</a> 通过分数返回有序集合指定区间内的成员</td>\n</tr>\n<tr>\n<td>10</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zrank.html\">ZRANK key member</a> 返回有序集合中指定成员的索引</td>\n</tr>\n<tr>\n<td>11</td>\n<td>[ZREM key member <a href=\"https://www.runoob.com/redis/sorted-sets-zrem.html\">member …]</a> 移除有序集合中的一个或多个成员</td>\n</tr>\n<tr>\n<td>12</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebylex.html\">ZREMRANGEBYLEX key min max</a> 移除有序集合中给定的字典区间的所有成员</td>\n</tr>\n<tr>\n<td>13</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebyrank.html\">ZREMRANGEBYRANK key start stop</a> 移除有序集合中给定的排名区间的所有成员</td>\n</tr>\n<tr>\n<td>14</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebyscore.html\">ZREMRANGEBYSCORE key min max</a> 移除有序集合中给定的分数区间的所有成员</td>\n</tr>\n<tr>\n<td>15</td>\n<td>[ZREVRANGE key start stop <a href=\"https://www.runoob.com/redis/sorted-sets-zrevrange.html\">WITHSCORES]</a> 返回有序集中指定区间内的成员，通过索引，分数从高到低</td>\n</tr>\n<tr>\n<td>16</td>\n<td>[ZREVRANGEBYSCORE key max min <a href=\"https://www.runoob.com/redis/sorted-sets-zrevrangebyscore.html\">WITHSCORES]</a> 返回有序集中指定分数区间内的成员，分数从高到低排序</td>\n</tr>\n<tr>\n<td>17</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zrevrank.html\">ZREVRANK key member</a> 返回有序集合中指定成员的排名，有序集成员按分数值递减 (从大到小) 排序</td>\n</tr>\n<tr>\n<td>18</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zscore.html\">ZSCORE key member</a> 返回有序集中，成员的分数值</td>\n</tr>\n<tr>\n<td>19</td>\n<td>[ZUNIONSTORE destination numkeys key <a href=\"https://www.runoob.com/redis/sorted-sets-zunionstore.html\">key …]</a> 计算给定的一个或多个有序集的并集，并存储在新的 key 中</td>\n</tr>\n<tr>\n<td>20</td>\n<td>[ZSCAN key cursor <a href=\"https://www.runoob.com/redis/sorted-sets-zscan.html\">MATCH pattern] [COUNT count]</a> 迭代有序集合中的元素（包括元素成员和元素分值）</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/17/redis/redis-ji-ben-shu-ju-lei-xing/redis-ming-ling-ji-he-set/",
            "url": "https://prehitting.gitee.io/2022/05/17/redis/redis-ji-ben-shu-ju-lei-xing/redis-ming-ling-ji-he-set/",
            "title": "Redis命令_集合（Set）",
            "date_published": "2022-05-17T09:13:14.000Z",
            "content_html": "<h2 id=\"set命令\"><a class=\"markdownIt-Anchor\" href=\"#set命令\">#</a> Set 命令</h2>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>[SADD key member1 <a href=\"https://www.runoob.com/redis/sets-sadd.html\">member2]</a> 向集合添加一个或多个成员</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td><a href=\"https://www.runoob.com/redis/sets-scard.html\">SCARD key</a> 获取集合的成员数</td>\n</tr>\n<tr>\n<td>3</td>\n<td>[SDIFF key1 <a href=\"https://www.runoob.com/redis/sets-sdiff.html\">key2]</a> 返回第一个集合与其他集合之间的差异。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>[SDIFFSTORE destination key1 <a href=\"https://www.runoob.com/redis/sets-sdiffstore.html\">key2]</a> 返回给定所有集合的差集并存储在 destination 中</td>\n</tr>\n<tr>\n<td>5</td>\n<td>[SINTER key1 <a href=\"https://www.runoob.com/redis/sets-sinter.html\">key2]</a> 返回给定所有集合的交集</td>\n</tr>\n<tr>\n<td>6</td>\n<td>[SINTERSTORE destination key1 <a href=\"https://www.runoob.com/redis/sets-sinterstore.html\">key2]</a> 返回给定所有集合的交集并存储在 destination 中</td>\n</tr>\n<tr>\n<td>7</td>\n<td><a href=\"https://www.runoob.com/redis/sets-sismember.html\">SISMEMBER key member</a> 判断 member 元素是否是集合 key 的成员</td>\n</tr>\n<tr>\n<td>8</td>\n<td><a href=\"https://www.runoob.com/redis/sets-smembers.html\">SMEMBERS key</a> 返回集合中的所有成员</td>\n</tr>\n<tr>\n<td>9</td>\n<td><a href=\"https://www.runoob.com/redis/sets-smove.html\">SMOVE source destination member</a> 将 member 元素从 source 集合移动到 destination 集合</td>\n</tr>\n<tr>\n<td>10</td>\n<td><a href=\"https://www.runoob.com/redis/sets-spop.html\">SPOP key</a> 移除并返回集合中的一个随机元素</td>\n</tr>\n<tr>\n<td>11</td>\n<td>[SRANDMEMBER key <a href=\"https://www.runoob.com/redis/sets-srandmember.html\">count]</a> 返回集合中一个或多个随机数</td>\n</tr>\n<tr>\n<td>12</td>\n<td>[SREM key member1 <a href=\"https://www.runoob.com/redis/sets-srem.html\">member2]</a> 移除集合中一个或多个成员</td>\n</tr>\n<tr>\n<td>13</td>\n<td>[SUNION key1 <a href=\"https://www.runoob.com/redis/sets-sunion.html\">key2]</a> 返回所有给定集合的并集</td>\n</tr>\n<tr>\n<td>14</td>\n<td>[SUNIONSTORE destination key1 <a href=\"https://www.runoob.com/redis/sets-sunionstore.html\">key2]</a> 所有给定集合的并集存储在 destination 集合中</td>\n</tr>\n<tr>\n<td>15</td>\n<td>[SSCAN key cursor <a href=\"https://www.runoob.com/redis/sets-sscan.html\">MATCH pattern] [COUNT count]</a> 迭代集合中的元素</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/16/redis/redis-ming-ling/redis-ming-ling-fu-wu-qi/",
            "url": "https://prehitting.gitee.io/2022/05/16/redis/redis-ming-ling/redis-ming-ling-fu-wu-qi/",
            "title": "Redis命令_服务器",
            "date_published": "2022-05-16T14:46:07.000Z",
            "content_html": "<h2 id=\"服务器\"><a class=\"markdownIt-Anchor\" href=\"#服务器\">#</a> 服务器</h2>\n<ol>\n<li>在远程 Redis 服务上执行命令</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ redis-cli -h <span class=\"token function\">host</span> -p port -a password<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>实例</strong></p>\n<p>连接到主机 127.0.0.1，端口为 6379，密码为 mypass 的 redis 服务上</p>\n<blockquote>\n<p>$ redis-cli -h 127.0.0.1 -p 6379 -a  “mypass”</p>\n</blockquote>\n<h2 id=\"键key命令\"><a class=\"markdownIt-Anchor\" href=\"#键key命令\">#</a> 键（key）命令</h2>\n<ol>\n<li>设置键值对</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">set (keyname) (keyvalue)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"2\">\n<li>删除键</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">del (key)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"3\">\n<li>序列化给定 key，并返回被序列化的值</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">dump (key)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"4\">\n<li>检查给定 key 是否存在</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">exists key<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"5\">\n<li>给 key 设置过期时间 (以秒为单位)</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">expire (key) (seconds)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">expire (key) (timestamp)\nEXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pexpire (key) (milliseconds)\n设置key过期时间(以毫秒为单位)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">PEXPIREAT (key) (milliseconds-timestamp)\n设置 key 过期时间的时间戳(unix timestamp) 以毫秒计<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol start=\"6\">\n<li>查找所有符合给定模式 (pattern) 的 key</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">keys pattern<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>实例</strong></p>\n<p>keys *</p>\n<p>列出所有键</p>\n<ol start=\"7\">\n<li>移动 key 到指定数据库</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">move key db<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"8\">\n<li>移除 key 期间，key 将长久保持</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">persist (key)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"9\">\n<li>返回 key 剩余的过期时间</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pttl (key)\n#以毫秒为单位\nttl (key)\n#以秒为单位<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"10\">\n<li>从数据库中随机返回一个 key</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">randomkey<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"11\">\n<li>修改 key 名称</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">rename (key) (newkey)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"12\">\n<li>仅当 newkey 不存在时，将 key 改名为 newkey</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">renamenx (key) (newkey)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"13\">\n<li>返回 key 所存储的值的类型</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">type key<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"14\">\n<li>迭代数据库中的数据库键</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">scan cursor [MATCH pattern] [COUNT count]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"string命令\"><a class=\"markdownIt-Anchor\" href=\"#string命令\">#</a> String 命令</h2>\n<ol>\n<li>获取 (设定) 值</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">set (key) (value)\nget (key)\ngetrange (key) start end #范围获取\ngetset (keyvalue) #获取并设定，返回原值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>对 key 所储存的字符串值，获取（设定）指定偏移量上的位 (bit)。</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">getbit key offset\nsetbit key offset value<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>获取一个或多个给定 key 的值</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mget key1[key2..]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"4\">\n<li>更改</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">incr key #将 key 中储存的数字值增\nincrby key increament#将 key 所储存的值加上给定的增量值（increment）\nincrbyfloat key increament#将 key 所储存的值加上给定的浮点增量值\ndecr key #将 key 中储存的数字值减一\ndecrby key decrement#key 所储存的值减去给定的减量值\nappend key value#如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"hash命令\"><a class=\"markdownIt-Anchor\" href=\"#hash命令\">#</a> Hash 命令</h2>\n<ol>\n<li>查</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hexists key field#查看哈希表key中，指定字段是否存在\nhget key field#获取\nhgetall key#获取所有字段和值\nhkeys key#获取所有哈希表中的字段\nhlen key#获取哈希表中字段数量\nhmget key field1 [field2]#获取所有给定字段的值\nhscan key cursor [MATCH pattern] [COUNT count]#迭代键值对\nhvals key#获取哈希表中所有值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>增</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hincrby key field increament#为哈希表 key 中的指定字段的整数值加上增量\nhincrbyfloat field increament#为哈希表 key 中的指定字段的浮点数值加上增量\nhmset key field1 value1 [field2] value2#设置多个键值对\nhsetnx key field value#字段不存在时设置字段的值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>删</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hdel key field1 [field2]#删除一个或多个字段<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"4\">\n<li>改</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hset key field value<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"set命令\"><a class=\"markdownIt-Anchor\" href=\"#set命令\">#</a> Set 命令</h2>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>[SADD key member1 <a href=\"https://www.runoob.com/redis/sets-sadd.html\">member2]</a> 向集合添加一个或多个成员</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td><a href=\"https://www.runoob.com/redis/sets-scard.html\">SCARD key</a> 获取集合的成员数</td>\n</tr>\n<tr>\n<td>3</td>\n<td>[SDIFF key1 <a href=\"https://www.runoob.com/redis/sets-sdiff.html\">key2]</a> 返回第一个集合与其他集合之间的差异。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>[SDIFFSTORE destination key1 <a href=\"https://www.runoob.com/redis/sets-sdiffstore.html\">key2]</a> 返回给定所有集合的差集并存储在 destination 中</td>\n</tr>\n<tr>\n<td>5</td>\n<td>[SINTER key1 <a href=\"https://www.runoob.com/redis/sets-sinter.html\">key2]</a> 返回给定所有集合的交集</td>\n</tr>\n<tr>\n<td>6</td>\n<td>[SINTERSTORE destination key1 <a href=\"https://www.runoob.com/redis/sets-sinterstore.html\">key2]</a> 返回给定所有集合的交集并存储在 destination 中</td>\n</tr>\n<tr>\n<td>7</td>\n<td><a href=\"https://www.runoob.com/redis/sets-sismember.html\">SISMEMBER key member</a> 判断 member 元素是否是集合 key 的成员</td>\n</tr>\n<tr>\n<td>8</td>\n<td><a href=\"https://www.runoob.com/redis/sets-smembers.html\">SMEMBERS key</a> 返回集合中的所有成员</td>\n</tr>\n<tr>\n<td>9</td>\n<td><a href=\"https://www.runoob.com/redis/sets-smove.html\">SMOVE source destination member</a> 将 member 元素从 source 集合移动到 destination 集合</td>\n</tr>\n<tr>\n<td>10</td>\n<td><a href=\"https://www.runoob.com/redis/sets-spop.html\">SPOP key</a> 移除并返回集合中的一个随机元素</td>\n</tr>\n<tr>\n<td>11</td>\n<td>[SRANDMEMBER key <a href=\"https://www.runoob.com/redis/sets-srandmember.html\">count]</a> 返回集合中一个或多个随机数</td>\n</tr>\n<tr>\n<td>12</td>\n<td>[SREM key member1 <a href=\"https://www.runoob.com/redis/sets-srem.html\">member2]</a> 移除集合中一个或多个成员</td>\n</tr>\n<tr>\n<td>13</td>\n<td>[SUNION key1 <a href=\"https://www.runoob.com/redis/sets-sunion.html\">key2]</a> 返回所有给定集合的并集</td>\n</tr>\n<tr>\n<td>14</td>\n<td>[SUNIONSTORE destination key1 <a href=\"https://www.runoob.com/redis/sets-sunionstore.html\">key2]</a> 所有给定集合的并集存储在 destination 集合中</td>\n</tr>\n<tr>\n<td>15</td>\n<td>[SSCAN key cursor <a href=\"https://www.runoob.com/redis/sets-sscan.html\">MATCH pattern] [COUNT count]</a> 迭代集合中的元素</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"sortedlist\"><a class=\"markdownIt-Anchor\" href=\"#sortedlist\">#</a> SortedList</h2>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>[ZADD key score1 member1 <a href=\"https://www.runoob.com/redis/sorted-sets-zadd.html\">score2 member2]</a> 向有序集合添加一个或多个成员，或者更新已存在成员的分数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zcard.html\">ZCARD key</a> 获取有序集合的成员数</td>\n</tr>\n<tr>\n<td>3</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zcount.html\">ZCOUNT key min max</a> 计算在有序集合中指定区间分数的成员数</td>\n</tr>\n<tr>\n<td>4</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zincrby.html\">ZINCRBY key increment member</a> 有序集合中对指定成员的分数加上增量 increment</td>\n</tr>\n<tr>\n<td>5</td>\n<td>[ZINTERSTORE destination numkeys key <a href=\"https://www.runoob.com/redis/sorted-sets-zinterstore.html\">key …]</a> 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中</td>\n</tr>\n<tr>\n<td>6</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zlexcount.html\">ZLEXCOUNT key min max</a> 在有序集合中计算指定字典区间内成员数量</td>\n</tr>\n<tr>\n<td>7</td>\n<td>[ZRANGE key start stop <a href=\"https://www.runoob.com/redis/sorted-sets-zrange.html\">WITHSCORES]</a> 通过索引区间返回有序集合指定区间内的成员</td>\n</tr>\n<tr>\n<td>8</td>\n<td>[ZRANGEBYLEX key min max <a href=\"https://www.runoob.com/redis/sorted-sets-zrangebylex.html\">LIMIT offset count]</a> 通过字典区间返回有序集合的成员</td>\n</tr>\n<tr>\n<td>9</td>\n<td>[ZRANGEBYSCORE key min max <a href=\"https://www.runoob.com/redis/sorted-sets-zrangebyscore.html\">WITHSCORES] [LIMIT]</a> 通过分数返回有序集合指定区间内的成员</td>\n</tr>\n<tr>\n<td>10</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zrank.html\">ZRANK key member</a> 返回有序集合中指定成员的索引</td>\n</tr>\n<tr>\n<td>11</td>\n<td>[ZREM key member <a href=\"https://www.runoob.com/redis/sorted-sets-zrem.html\">member …]</a> 移除有序集合中的一个或多个成员</td>\n</tr>\n<tr>\n<td>12</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebylex.html\">ZREMRANGEBYLEX key min max</a> 移除有序集合中给定的字典区间的所有成员</td>\n</tr>\n<tr>\n<td>13</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebyrank.html\">ZREMRANGEBYRANK key start stop</a> 移除有序集合中给定的排名区间的所有成员</td>\n</tr>\n<tr>\n<td>14</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebyscore.html\">ZREMRANGEBYSCORE key min max</a> 移除有序集合中给定的分数区间的所有成员</td>\n</tr>\n<tr>\n<td>15</td>\n<td>[ZREVRANGE key start stop <a href=\"https://www.runoob.com/redis/sorted-sets-zrevrange.html\">WITHSCORES]</a> 返回有序集中指定区间内的成员，通过索引，分数从高到低</td>\n</tr>\n<tr>\n<td>16</td>\n<td>[ZREVRANGEBYSCORE key max min <a href=\"https://www.runoob.com/redis/sorted-sets-zrevrangebyscore.html\">WITHSCORES]</a> 返回有序集中指定分数区间内的成员，分数从高到低排序</td>\n</tr>\n<tr>\n<td>17</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zrevrank.html\">ZREVRANK key member</a> 返回有序集合中指定成员的排名，有序集成员按分数值递减 (从大到小) 排序</td>\n</tr>\n<tr>\n<td>18</td>\n<td><a href=\"https://www.runoob.com/redis/sorted-sets-zscore.html\">ZSCORE key member</a> 返回有序集中，成员的分数值</td>\n</tr>\n<tr>\n<td>19</td>\n<td>[ZUNIONSTORE destination numkeys key <a href=\"https://www.runoob.com/redis/sorted-sets-zunionstore.html\">key …]</a> 计算给定的一个或多个有序集的并集，并存储在新的 key 中</td>\n</tr>\n<tr>\n<td>20</td>\n<td>[ZSCAN key cursor <a href=\"https://www.runoob.com/redis/sorted-sets-zscan.html\">MATCH pattern] [COUNT count]</a> 迭代有序集合中的元素（包括元素成员和元素分值）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"list命令\"><a class=\"markdownIt-Anchor\" href=\"#list命令\">#</a> List 命令</h2>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>[BLPOP key1 <a href=\"https://www.runoob.com/redis/lists-blpop.html\">key2 ] timeout</a> 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>[BRPOP key1 <a href=\"https://www.runoob.com/redis/lists-brpop.html\">key2 ] timeout</a> 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td>3</td>\n<td><a href=\"https://www.runoob.com/redis/lists-brpoplpush.html\">BRPOPLPUSH source destination timeout</a> 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td>4</td>\n<td><a href=\"https://www.runoob.com/redis/lists-lindex.html\">LINDEX key index</a> 通过索引获取列表中的元素</td>\n</tr>\n<tr>\n<td>5</td>\n<td><a href=\"https://www.runoob.com/redis/lists-linsert.html\">LINSERT key BEFORE|AFTER pivot value</a> 在列表的元素前或者后插入元素</td>\n</tr>\n<tr>\n<td>6</td>\n<td><a href=\"https://www.runoob.com/redis/lists-llen.html\">LLEN key</a> 获取列表长度</td>\n</tr>\n<tr>\n<td>7</td>\n<td><a href=\"https://www.runoob.com/redis/lists-lpop.html\">LPOP key</a> 移出并获取列表的第一个元素</td>\n</tr>\n<tr>\n<td>8</td>\n<td>[LPUSH key value1 <a href=\"https://www.runoob.com/redis/lists-lpush.html\">value2]</a> 将一个或多个值插入到列表头部</td>\n</tr>\n<tr>\n<td>9</td>\n<td><a href=\"https://www.runoob.com/redis/lists-lpushx.html\">LPUSHX key value</a> 将一个值插入到已存在的列表头部</td>\n</tr>\n<tr>\n<td>10</td>\n<td><a href=\"https://www.runoob.com/redis/lists-lrange.html\">LRANGE key start stop</a> 获取列表指定范围内的元素</td>\n</tr>\n<tr>\n<td>11</td>\n<td><a href=\"https://www.runoob.com/redis/lists-lrem.html\">LREM key count value</a> 移除列表元素</td>\n</tr>\n<tr>\n<td>12</td>\n<td><a href=\"https://www.runoob.com/redis/lists-lset.html\">LSET key index value</a> 通过索引设置列表元素的值</td>\n</tr>\n<tr>\n<td>13</td>\n<td><a href=\"https://www.runoob.com/redis/lists-ltrim.html\">LTRIM key start stop</a> 对一个列表进行修剪 (trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td>\n</tr>\n<tr>\n<td>14</td>\n<td><a href=\"https://www.runoob.com/redis/lists-rpop.html\">RPOP key</a> 移除列表的最后一个元素，返回值为移除的元素。</td>\n</tr>\n<tr>\n<td>15</td>\n<td><a href=\"https://www.runoob.com/redis/lists-rpoplpush.html\">RPOPLPUSH source destination</a> 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td>\n</tr>\n<tr>\n<td>16</td>\n<td>[RPUSH key value1 <a href=\"https://www.runoob.com/redis/lists-rpush.html\">value2]</a> 在列表中添加一个或多个值</td>\n</tr>\n<tr>\n<td>17</td>\n<td><a href=\"https://www.runoob.com/redis/lists-rpushx.html\">RPUSHX key value</a> 为已存在的列表添加值</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Redis",
                "Redis命令"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/16/redis/redis-ming-ling/redis-ming-ling-jian-key/",
            "url": "https://prehitting.gitee.io/2022/05/16/redis/redis-ming-ling/redis-ming-ling-jian-key/",
            "title": "Redis命令_键(key)",
            "date_published": "2022-05-16T14:46:07.000Z",
            "content_html": "<h2 id=\"键key命令\"><a class=\"markdownIt-Anchor\" href=\"#键key命令\">#</a> 键（key）命令</h2>\n<ol>\n<li>设置键值对</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">set (keyname) (keyvalue)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"2\">\n<li>删除键</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">del (key)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"3\">\n<li>序列化给定 key，并返回被序列化的值</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">dump (key)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"4\">\n<li>检查给定 key 是否存在</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">exists key<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"5\">\n<li>给 key 设置过期时间 (以秒为单位)</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">expire (key) (seconds)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">expire (key) (timestamp)\nEXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pexpire (key) (milliseconds)\n设置key过期时间(以毫秒为单位)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">PEXPIREAT (key) (milliseconds-timestamp)\n设置 key 过期时间的时间戳(unix timestamp) 以毫秒计<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol start=\"6\">\n<li>查找所有符合给定模式 (pattern) 的 key</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">keys pattern<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>实例</strong></p>\n<p>keys *</p>\n<p>列出所有键</p>\n<ol start=\"7\">\n<li>移动 key 到指定数据库</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">move key db<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"8\">\n<li>移除 key 期间，key 将长久保持</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">persist (key)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"9\">\n<li>返回 key 剩余的过期时间</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pttl (key)\n#以毫秒为单位\nttl (key)\n#以秒为单位<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"10\">\n<li>从数据库中随机返回一个 key</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">randomkey<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"11\">\n<li>修改 key 名称</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">rename (key) (newkey)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"12\">\n<li>仅当 newkey 不存在时，将 key 改名为 newkey</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">renamenx (key) (newkey)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"13\">\n<li>返回 key 所存储的值的类型</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">type key<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"14\">\n<li>迭代数据库中的数据库键</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">scan cursor [MATCH pattern] [COUNT count]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/16/redis/redis-ji-ben-shu-ju-lei-xing/redis-ming-ling-ha-xi-hash/",
            "url": "https://prehitting.gitee.io/2022/05/16/redis/redis-ji-ben-shu-ju-lei-xing/redis-ming-ling-ha-xi-hash/",
            "title": "Redis命令_哈希(Hash)",
            "date_published": "2022-05-16T14:46:07.000Z",
            "content_html": "<h2 id=\"hash命令\"><a class=\"markdownIt-Anchor\" href=\"#hash命令\">#</a> Hash 命令</h2>\n<ol>\n<li>查</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hexists key field#查看哈希表key中，指定字段是否存在\nhget key field#获取\nhgetall key#获取所有字段和值\nhkeys key#获取所有哈希表中的字段\nhlen key#获取哈希表中字段数量\nhmget key field1 [field2]#获取所有给定字段的值\nhscan key cursor [MATCH pattern] [COUNT count]#迭代键值对\nhvals key#获取哈希表中所有值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>增</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hincrby key field increament#为哈希表 key 中的指定字段的整数值加上增量\nhincrbyfloat field increament#为哈希表 key 中的指定字段的浮点数值加上增量\nhmset key field1 value1 [field2] value2#设置多个键值对\nhsetnx key field value#字段不存在时设置字段的值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>删</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hdel key field1 [field2]#删除一个或多个字段<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"4\">\n<li>改</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hset key field value<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/16/redis/redis-ji-ben-shu-ju-lei-xing/redis-ming-ling-zi-fu-chuan-string/",
            "url": "https://prehitting.gitee.io/2022/05/16/redis/redis-ji-ben-shu-ju-lei-xing/redis-ming-ling-zi-fu-chuan-string/",
            "title": "Redis命令_字符串(String)",
            "date_published": "2022-05-16T14:46:07.000Z",
            "content_html": "<h2 id=\"string命令\"><a class=\"markdownIt-Anchor\" href=\"#string命令\">#</a> String 命令</h2>\n<ol>\n<li>获取 (设定) 值</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">set (key) (value)\nget (key)\ngetrange (key) start end #范围获取\ngetset (keyvalue) #获取并设定，返回原值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>对 key 所储存的字符串值，获取（设定）指定偏移量上的位 (bit)。</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">getbit key offset\nsetbit key offset value<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>获取一个或多个给定 key 的值</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mget key1[key2..]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"4\">\n<li>更改</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">incr key #将 key 中储存的数字值增\nincrby key increament#将 key 所储存的值加上给定的增量值（increment）\nincrbyfloat key increament#将 key 所储存的值加上给定的浮点增量值\ndecr key #将 key 中储存的数字值减一\ndecrby key decrement#key 所储存的值减去给定的减量值\nappend key value#如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://prehitting.gitee.io/2022/05/16/redis/guan-yu-redis-dan-xian-cheng/",
            "url": "https://prehitting.gitee.io/2022/05/16/redis/guan-yu-redis-dan-xian-cheng/",
            "title": "关于Redis的单线程问题",
            "date_published": "2022-05-16T14:15:41.000Z",
            "content_html": "<h2 id=\"基础知识\"><a class=\"markdownIt-Anchor\" href=\"#基础知识\">#</a> 基础知识</h2>\n<blockquote>\n<p>Redis 是单线程的</p>\n</blockquote>\n<h3 id=\"为什么redis单线程却支持高并发\"><a class=\"markdownIt-Anchor\" href=\"#为什么redis单线程却支持高并发\">#</a> 为什么 Redis 单线程却支持高并发</h3>\n<ol>\n<li>纯内存操作</li>\n<li>核心是基于非阻塞的 IO</li>\n<li>多路复用机制 单线程反而避免了多线程的频繁上下文切换问题</li>\n</ol>\n<h3 id=\"redis高并发和快速的原因\"><a class=\"markdownIt-Anchor\" href=\"#redis高并发和快速的原因\">#</a> Redis 高并发和快速的原因</h3>\n<p>1.redis 是基于内存的，内存的读写速度非常快（纯内存）; 数据存在内存中，数据结构用 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是 O (1)。</p>\n<p>2.redis 是单线程的，省去了很多上下文切换线程的时间（避免线程切换和竞态消耗）。</p>\n<p>3.redis 使用 IO 多路复用技术（IO multiplexing, 解决对多个 I/O 监听时，一个 I/O 阻塞影响其他 I/O 的问题），可以处理并发的连接（非阻塞 IO）。</p>\n<h3 id=\"为甚么redis是单线程的\"><a class=\"markdownIt-Anchor\" href=\"#为甚么redis是单线程的\">#</a> 为甚么 Redis 是单线程的</h3>\n<p><strong>官方答案</strong></p>\n<p>因为 Redis 是基于内存的操作，CPU 不是 Redis 的瓶颈，Redis 的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且 CPU 不会成为瓶颈，那就顺理成章地采用单线程的方案了。</p>\n<p><strong>性能指标</strong></p>\n<p>关于 redis 的性能，官方网站也有，普通笔记本轻松处理每秒几十万的请求。</p>\n<p><strong>详细原因</strong></p>\n<p>1）不需要各种锁的性能消耗</p>\n<p>Redis 的数据结构并不全是简单的 Key-Value，还有 list，hash 等复杂的结构，这些结构有可能会进行很细粒度的操作，比如在很长的列表后面添加一个元素，在 hash 当中添加或者删除一个对象。这些操作可能就需要加非常多的锁，导致的结果是同步开销大大增加。</p>\n<p>总之，在单线程的情况下，就不用去考虑各种锁的问题，不存在加锁、释放锁操作，没有因为可能出现死锁而导致的性能消耗。</p>\n<p>2）单线程多进程集群方案</p>\n<p>单线程的威力实际上非常强大，单核 cpu 效率也非常高，多线程自然是可以比单线程有更高的性能上限，但是在今天的计算环境中，即使是单机多线程的上限也往往不能满足需要了，需要进一步摸索的是多服务器集群化的方案，这些方案中多线程的技术照样是用不上的。</p>\n<p>所以 “单线程、多进程的集群” 不失为一个时髦的解决方案。</p>\n<p>3）CPU 消耗</p>\n<p>采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU。</p>\n<p>但是如果 CPU 成为 Redis 瓶颈，或者不想让服务器其他 CUP 核闲置，那怎么办？</p>\n<p>可以考虑多起几个 Redis 进程，Redis 是 key-value 数据库，不是关系数据库，数据之间没有约束。只要客户端分清哪些 key 放在哪个 Redis 进程上就可以了。</p>\n<h3 id=\"redis单线程的优劣势\"><a class=\"markdownIt-Anchor\" href=\"#redis单线程的优劣势\">#</a> Redis 单线程的优劣势</h3>\n<p><strong>单进程单线程优势</strong></p>\n<p>代码更清晰，处理逻辑更简单。<br>\n不用去考虑各种锁的问题，不存在加锁、释放锁操作，没有因为可能出现死锁而导致的性能消耗。<br>\n不存在 “多进程或者多线程导致的切换” 而消耗 CPU。</p>\n<p><strong>单进程单线程弊端</strong></p>\n<p>无法发挥多核 CPU 性能，不过可以通过在单机开多个 Redis 实例来完善。</p>\n",
            "tags": [
                "Redis"
            ]
        }
    ]
}